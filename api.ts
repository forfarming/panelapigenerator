/* tslint:disable */
/* eslint-disable */
/**
 * Api
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface Batch
 */
export interface Batch {
    /**
     * 
     * @type {string}
     * @memberof Batch
     */
    uid?: string;
    /**
     * 
     * @type {string}
     * @memberof Batch
     */
    createdOn?: string;
    /**
     * 
     * @type {string}
     * @memberof Batch
     */
    lastUpdatedOn?: string;
    /**
     * 
     * @type {boolean}
     * @memberof Batch
     */
    isActive?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof Batch
     */
    isDeleted?: boolean;
    /**
     * 
     * @type {string}
     * @memberof Batch
     */
    deletedOn?: string | null;
    /**
     * 
     * @type {Array<object>}
     * @memberof Batch
     */
    domainEvents?: Array<object> | null;
    /**
     * 
     * @type {number}
     * @memberof Batch
     */
    id?: number;
    /**
     * 
     * @type {number}
     * @memberof Batch
     */
    productionId?: number;
    /**
     * 
     * @type {number}
     * @memberof Batch
     */
    quantityInKgs?: number | null;
    /**
     * 
     * @type {string}
     * @memberof Batch
     */
    harvestDate?: string | null;
    /**
     * 
     * @type {number}
     * @memberof Batch
     */
    quantityInCrates?: number | null;
    /**
     * 
     * @type {number}
     * @memberof Batch
     */
    batchId?: number;
    /**
     * 
     * @type {number}
     * @memberof Batch
     */
    facilityId?: number | null;
    /**
     * 
     * @type {BatchStatus}
     * @memberof Batch
     */
    status?: BatchStatus;
    /**
     * 
     * @type {number}
     * @memberof Batch
     */
    supplierId?: number;
    /**
     * 
     * @type {number}
     * @memberof Batch
     */
    templateId?: number;
    /**
     * 
     * @type {string}
     * @memberof Batch
     */
    commercialProductName?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Batch
     */
    procurementDate?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Batch
     */
    shippingDate?: string | null;
    /**
     * 
     * @type {number}
     * @memberof Batch
     */
    distributorId?: number | null;
    /**
     * 
     * @type {number}
     * @memberof Batch
     */
    destinationCustomerId?: number | null;
    /**
     * 
     * @type {number}
     * @memberof Batch
     */
    interfaceCustomerId?: number | null;
    /**
     * 
     * @type {string}
     * @memberof Batch
     */
    approvalDate?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Batch
     */
    arrivalDate?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Batch
     */
    name?: string | null;
    /**
     * 
     * @type {number}
     * @memberof Batch
     */
    customerId?: number | null;
    /**
     * 
     * @type {Array<EnvironmentData>}
     * @memberof Batch
     */
    environmentData?: Array<EnvironmentData> | null;
    /**
     * 
     * @type {string}
     * @memberof Batch
     */
    packagingDate?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Batch
     */
    expirationDate?: string | null;
}
/**
 * 
 * @export
 * @interface BatchDataItemModel
 */
export interface BatchDataItemModel {
    /**
     * 
     * @type {string}
     * @memberof BatchDataItemModel
     */
    uid?: string | null;
    /**
     * 
     * @type {string}
     * @memberof BatchDataItemModel
     */
    value?: string | null;
    /**
     * 
     * @type {string}
     * @memberof BatchDataItemModel
     */
    batchMetadataItemUid?: string;
    /**
     * 
     * @type {BatchMetadataItemType}
     * @memberof BatchDataItemModel
     */
    itemType?: BatchMetadataItemType;
    /**
     * 
     * @type {string}
     * @memberof BatchDataItemModel
     */
    placeholder?: string | null;
    /**
     * 
     * @type {string}
     * @memberof BatchDataItemModel
     */
    tag?: string | null;
    /**
     * 
     * @type {string}
     * @memberof BatchDataItemModel
     */
    code?: string | null;
    /**
     * 
     * @type {string}
     * @memberof BatchDataItemModel
     */
    createdOn?: string;
    /**
     * 
     * @type {string}
     * @memberof BatchDataItemModel
     */
    information?: string | null;
    /**
     * 
     * @type {boolean}
     * @memberof BatchDataItemModel
     */
    haveQr?: boolean;
}
/**
 * 
 * @export
 * @interface BatchDataModel
 */
export interface BatchDataModel {
    /**
     * 
     * @type {string}
     * @memberof BatchDataModel
     */
    uid?: string | null;
    /**
     * 
     * @type {string}
     * @memberof BatchDataModel
     */
    batchMetadataUid?: string;
    /**
     * 
     * @type {string}
     * @memberof BatchDataModel
     */
    placeholder?: string | null;
    /**
     * 
     * @type {Array<BatchDataItemModel>}
     * @memberof BatchDataModel
     */
    items?: Array<BatchDataItemModel> | null;
    /**
     * 
     * @type {string}
     * @memberof BatchDataModel
     */
    code?: string | null;
    /**
     * 
     * @type {string}
     * @memberof BatchDataModel
     */
    createdOn?: string;
    /**
     * 
     * @type {string}
     * @memberof BatchDataModel
     */
    information?: string | null;
}
/**
 * 
 * @export
 * @enum {string}
 */
export enum BatchMetadataItemType {
    NUMBER_0 = 0,
    NUMBER_1 = 1,
    NUMBER_2 = 2,
    NUMBER_3 = 3,
    NUMBER_4 = 4,
    NUMBER_5 = 5,
    NUMBER_6 = 6,
    NUMBER_7 = 7,
    NUMBER_8 = 8,
    NUMBER_9 = 9,
    NUMBER_10 = 10
}

/**
 * 
 * @export
 * @interface BatchModel
 */
export interface BatchModel {
    /**
     * 
     * @type {string}
     * @memberof BatchModel
     */
    uid?: string | null;
    /**
     * 
     * @type {Batch}
     * @memberof BatchModel
     */
    batch?: Batch;
    /**
     * 
     * @type {Array<BatchDataModel>}
     * @memberof BatchModel
     */
    batchData?: Array<BatchDataModel> | null;
    /**
     * 
     * @type {ProductionModel}
     * @memberof BatchModel
     */
    production?: ProductionModel;
    /**
     * 
     * @type {string}
     * @memberof BatchModel
     */
    qrcodeUrl?: string | null;
    /**
     * 
     * @type {string}
     * @memberof BatchModel
     */
    name?: string | null;
    /**
     * 
     * @type {string}
     * @memberof BatchModel
     */
    templateUid?: string | null;
    /**
     * 
     * @type {string}
     * @memberof BatchModel
     */
    supplierUid?: string | null;
    /**
     * 
     * @type {string}
     * @memberof BatchModel
     */
    customerUid?: string | null;
    /**
     * 
     * @type {number}
     * @memberof BatchModel
     */
    templateFrontendId?: number;
    /**
     * 
     * @type {string}
     * @memberof BatchModel
     */
    qrcodeAppUrl?: string | null;
    /**
     * 
     * @type {string}
     * @memberof BatchModel
     */
    analysisReport?: string | null;
}
/**
 * 
 * @export
 * @enum {string}
 */
export enum BatchStatus {
    NUMBER_0 = 0,
    NUMBER_1 = 1
}

/**
 * 
 * @export
 * @interface ChangePasswordCommand
 */
export interface ChangePasswordCommand {
    /**
     * 
     * @type {string}
     * @memberof ChangePasswordCommand
     */
    uid?: string;
    /**
     * 
     * @type {string}
     * @memberof ChangePasswordCommand
     */
    oldPassword?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ChangePasswordCommand
     */
    newPassword?: string | null;
}
/**
 * 
 * @export
 * @interface Company
 */
export interface Company {
    /**
     * 
     * @type {string}
     * @memberof Company
     */
    uid?: string;
    /**
     * 
     * @type {string}
     * @memberof Company
     */
    createdOn?: string;
    /**
     * 
     * @type {string}
     * @memberof Company
     */
    lastUpdatedOn?: string;
    /**
     * 
     * @type {boolean}
     * @memberof Company
     */
    isActive?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof Company
     */
    isDeleted?: boolean;
    /**
     * 
     * @type {string}
     * @memberof Company
     */
    deletedOn?: string | null;
    /**
     * 
     * @type {Array<object>}
     * @memberof Company
     */
    domainEvents?: Array<object> | null;
    /**
     * 
     * @type {number}
     * @memberof Company
     */
    id?: number;
    /**
     * 
     * @type {string}
     * @memberof Company
     */
    name?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Company
     */
    logo?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Company
     */
    title?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Company
     */
    address?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Company
     */
    description?: string | null;
    /**
     * 
     * @type {number}
     * @memberof Company
     */
    contactId?: number | null;
    /**
     * 
     * @type {number}
     * @memberof Company
     */
    sizeInSquareMeters?: number | null;
    /**
     * 
     * @type {CompanyType}
     * @memberof Company
     */
    companyType?: CompanyType;
    /**
     * 
     * @type {string}
     * @memberof Company
     */
    photo?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Company
     */
    video?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Company
     */
    website?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Company
     */
    facebook?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Company
     */
    instagram?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Company
     */
    linkedin?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Company
     */
    twitter?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Company
     */
    youtube?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Company
     */
    producerName?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Company
     */
    producerTitle?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Company
     */
    producerDescription?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Company
     */
    producerEmail?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Company
     */
    producerPhone?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Company
     */
    producerPhoto?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Company
     */
    producerAddress?: string | null;
    /**
     * 
     * @type {Array<Product>}
     * @memberof Company
     */
    products?: Array<Product> | null;
    /**
     * 
     * @type {Array<CompanyFacilityPhoto>}
     * @memberof Company
     */
    facilityPhotos?: Array<CompanyFacilityPhoto> | null;
    /**
     * 
     * @type {Array<CompanyCertificate>}
     * @memberof Company
     */
    certificates?: Array<CompanyCertificate> | null;
    /**
     * 
     * @type {string}
     * @memberof Company
     */
    url?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Company
     */
    code?: string | null;
    /**
     * 
     * @type {Array<EnvironmentData>}
     * @memberof Company
     */
    environmentData?: Array<EnvironmentData> | null;
    /**
     * 
     * @type {number}
     * @memberof Company
     */
    parentCompanyId?: number | null;
    /**
     * 
     * @type {string}
     * @memberof Company
     */
    email?: string | null;
    /**
     * 
     * @type {number}
     * @memberof Company
     */
    availableProducts?: number;
    /**
     * 
     * @type {string}
     * @memberof Company
     */
    customTrialEndDate?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Company
     */
    contactName?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Company
     */
    contactEmail?: string | null;
    /**
     * 
     * @type {number}
     * @memberof Company
     */
    packageId?: number;
}
/**
 * 
 * @export
 * @interface CompanyCertificate
 */
export interface CompanyCertificate {
    /**
     * 
     * @type {string}
     * @memberof CompanyCertificate
     */
    uid?: string;
    /**
     * 
     * @type {string}
     * @memberof CompanyCertificate
     */
    createdOn?: string;
    /**
     * 
     * @type {string}
     * @memberof CompanyCertificate
     */
    lastUpdatedOn?: string;
    /**
     * 
     * @type {boolean}
     * @memberof CompanyCertificate
     */
    isActive?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof CompanyCertificate
     */
    isDeleted?: boolean;
    /**
     * 
     * @type {string}
     * @memberof CompanyCertificate
     */
    deletedOn?: string | null;
    /**
     * 
     * @type {Array<object>}
     * @memberof CompanyCertificate
     */
    domainEvents?: Array<object> | null;
    /**
     * 
     * @type {number}
     * @memberof CompanyCertificate
     */
    id?: number;
    /**
     * 
     * @type {number}
     * @memberof CompanyCertificate
     */
    companyId?: number;
    /**
     * 
     * @type {string}
     * @memberof CompanyCertificate
     */
    name?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CompanyCertificate
     */
    authority?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CompanyCertificate
     */
    certificationDate?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CompanyCertificate
     */
    expiryDate?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CompanyCertificate
     */
    file?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CompanyCertificate
     */
    url?: string | null;
}
/**
 * 
 * @export
 * @interface CompanyFacilityPhoto
 */
export interface CompanyFacilityPhoto {
    /**
     * 
     * @type {string}
     * @memberof CompanyFacilityPhoto
     */
    uid?: string;
    /**
     * 
     * @type {string}
     * @memberof CompanyFacilityPhoto
     */
    createdOn?: string;
    /**
     * 
     * @type {string}
     * @memberof CompanyFacilityPhoto
     */
    lastUpdatedOn?: string;
    /**
     * 
     * @type {boolean}
     * @memberof CompanyFacilityPhoto
     */
    isActive?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof CompanyFacilityPhoto
     */
    isDeleted?: boolean;
    /**
     * 
     * @type {string}
     * @memberof CompanyFacilityPhoto
     */
    deletedOn?: string | null;
    /**
     * 
     * @type {Array<object>}
     * @memberof CompanyFacilityPhoto
     */
    domainEvents?: Array<object> | null;
    /**
     * 
     * @type {number}
     * @memberof CompanyFacilityPhoto
     */
    id?: number;
    /**
     * 
     * @type {number}
     * @memberof CompanyFacilityPhoto
     */
    companyId?: number;
    /**
     * 
     * @type {string}
     * @memberof CompanyFacilityPhoto
     */
    photo?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CompanyFacilityPhoto
     */
    description?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CompanyFacilityPhoto
     */
    url?: string | null;
}
/**
 * 
 * @export
 * @enum {string}
 */
export enum CompanyType {
    NUMBER_1 = 1,
    NUMBER_2 = 2,
    NUMBER_4 = 4
}

/**
 * 
 * @export
 * @interface CreateBatchCommand
 */
export interface CreateBatchCommand {
    /**
     * 
     * @type {string}
     * @memberof CreateBatchCommand
     */
    uid?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CreateBatchCommand
     */
    supplierUid?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateBatchCommand
     */
    productionUid?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateBatchCommand
     */
    harvestDate?: string | null;
    /**
     * 
     * @type {number}
     * @memberof CreateBatchCommand
     */
    quantityInKgs?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CreateBatchCommand
     */
    quantityInCrates?: number | null;
    /**
     * 
     * @type {string}
     * @memberof CreateBatchCommand
     */
    customerUid?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CreateBatchCommand
     */
    templateUid?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateBatchCommand
     */
    packagingDate?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CreateBatchCommand
     */
    expirationDate?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CreateBatchCommand
     */
    commercialProductName?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CreateBatchCommand
     */
    name?: string | null;
}
/**
 * 
 * @export
 * @interface CreateCompanyProductCommand
 */
export interface CreateCompanyProductCommand {
    /**
     * 
     * @type {string}
     * @memberof CreateCompanyProductCommand
     */
    uid?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CreateCompanyProductCommand
     */
    companyUid?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateCompanyProductCommand
     */
    productUid?: string;
    /**
     * 
     * @type {number}
     * @memberof CreateCompanyProductCommand
     */
    capacity?: number;
}
/**
 * 
 * @export
 * @interface CreateCustomDataCommand
 */
export interface CreateCustomDataCommand {
    /**
     * 
     * @type {string}
     * @memberof CreateCustomDataCommand
     */
    uid?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CreateCustomDataCommand
     */
    companyUid?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CreateCustomDataCommand
     */
    productionUid?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CreateCustomDataCommand
     */
    batchUid?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CreateCustomDataCommand
     */
    customDataDefinitionUId?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateCustomDataCommand
     */
    text?: string | null;
    /**
     * 
     * @type {Array<CustomDataItemModel>}
     * @memberof CreateCustomDataCommand
     */
    items?: Array<CustomDataItemModel> | null;
}
/**
 * 
 * @export
 * @interface CreateCustomizationCommand
 */
export interface CreateCustomizationCommand {
    /**
     * 
     * @type {string}
     * @memberof CreateCustomizationCommand
     */
    uid?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CreateCustomizationCommand
     */
    companyUid?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CreateCustomizationCommand
     */
    templateUid?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CreateCustomizationCommand
     */
    productUid?: string | null;
    /**
     * 
     * @type {Array<CustomizationPropertyFieldMappingModel>}
     * @memberof CreateCustomizationCommand
     */
    mappings?: Array<CustomizationPropertyFieldMappingModel> | null;
}
/**
 * 
 * @export
 * @interface CreateDataCommand
 */
export interface CreateDataCommand {
    /**
     * 
     * @type {string}
     * @memberof CreateDataCommand
     */
    uid?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CreateDataCommand
     */
    companyUid?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateDataCommand
     */
    productionUid?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateDataCommand
     */
    batchUid?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CreateDataCommand
     */
    batchMetadataUid?: string;
    /**
     * 
     * @type {Array<BatchDataItemModel>}
     * @memberof CreateDataCommand
     */
    items?: Array<BatchDataItemModel> | null;
}
/**
 * 
 * @export
 * @interface CreateEnvironmentDataCommand
 */
export interface CreateEnvironmentDataCommand {
    /**
     * 
     * @type {string}
     * @memberof CreateEnvironmentDataCommand
     */
    uid?: string | null;
    /**
     * 
     * @type {EnvironmentDataType}
     * @memberof CreateEnvironmentDataCommand
     */
    type?: EnvironmentDataType;
    /**
     * 
     * @type {string}
     * @memberof CreateEnvironmentDataCommand
     */
    companyUid?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateEnvironmentDataCommand
     */
    productionUid?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CreateEnvironmentDataCommand
     */
    batchUid?: string | null;
    /**
     * 
     * @type {number}
     * @memberof CreateEnvironmentDataCommand
     */
    value?: number;
}
/**
 * 
 * @export
 * @interface CreateProductionCommand
 */
export interface CreateProductionCommand {
    /**
     * 
     * @type {string}
     * @memberof CreateProductionCommand
     */
    uid?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CreateProductionCommand
     */
    productUid?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateProductionCommand
     */
    startDate?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CreateProductionCommand
     */
    companyUid?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateProductionCommand
     */
    supplierUid?: string;
    /**
     * 
     * @type {number}
     * @memberof CreateProductionCommand
     */
    areaSize?: number;
    /**
     * 
     * @type {string}
     * @memberof CreateProductionCommand
     */
    name?: string | null;
}
/**
 * 
 * @export
 * @interface CreateUserCommand
 */
export interface CreateUserCommand {
    /**
     * 
     * @type {string}
     * @memberof CreateUserCommand
     */
    uid?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CreateUserCommand
     */
    email?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CreateUserCommand
     */
    firstName?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CreateUserCommand
     */
    lastName?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CreateUserCommand
     */
    password?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CreateUserCommand
     */
    companyUid?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CreateUserCommand
     */
    companyName?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CreateUserCommand
     */
    companyCode?: string | null;
}
/**
 * 
 * @export
 * @interface CredentialsModel
 */
export interface CredentialsModel {
    /**
     * 
     * @type {string}
     * @memberof CredentialsModel
     */
    userName?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CredentialsModel
     */
    password?: string | null;
}
/**
 * 
 * @export
 * @interface CustomDataItemModel
 */
export interface CustomDataItemModel {
    /**
     * 
     * @type {number}
     * @memberof CustomDataItemModel
     */
    customDataDefinitionItemId?: number;
    /**
     * 
     * @type {string}
     * @memberof CustomDataItemModel
     */
    text?: string | null;
}
/**
 * 
 * @export
 * @interface CustomizationField
 */
export interface CustomizationField {
    /**
     * 
     * @type {string}
     * @memberof CustomizationField
     */
    uid?: string;
    /**
     * 
     * @type {string}
     * @memberof CustomizationField
     */
    createdOn?: string;
    /**
     * 
     * @type {string}
     * @memberof CustomizationField
     */
    lastUpdatedOn?: string;
    /**
     * 
     * @type {boolean}
     * @memberof CustomizationField
     */
    isActive?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof CustomizationField
     */
    isDeleted?: boolean;
    /**
     * 
     * @type {string}
     * @memberof CustomizationField
     */
    deletedOn?: string | null;
    /**
     * 
     * @type {Array<object>}
     * @memberof CustomizationField
     */
    domainEvents?: Array<object> | null;
    /**
     * 
     * @type {number}
     * @memberof CustomizationField
     */
    id?: number;
    /**
     * 
     * @type {string}
     * @memberof CustomizationField
     */
    name?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CustomizationField
     */
    description?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CustomizationField
     */
    field?: string | null;
    /**
     * 
     * @type {CustomizationFieldType}
     * @memberof CustomizationField
     */
    type?: CustomizationFieldType;
    /**
     * 
     * @type {Array<CustomizationProperty>}
     * @memberof CustomizationField
     */
    properties?: Array<CustomizationProperty> | null;
    /**
     * 
     * @type {number}
     * @memberof CustomizationField
     */
    order?: number;
    /**
     * 
     * @type {number}
     * @memberof CustomizationField
     */
    cardIndex?: number;
    /**
     * 
     * @type {number}
     * @memberof CustomizationField
     */
    packageId?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CustomizationField
     */
    companyId?: number | null;
}
/**
 * 
 * @export
 * @enum {string}
 */
export enum CustomizationFieldType {
    NUMBER_0 = 0,
    NUMBER_1 = 1,
    NUMBER_2 = 2,
    NUMBER_3 = 3,
    NUMBER_4 = 4,
    NUMBER_5 = 5,
    NUMBER_6 = 6,
    NUMBER_7 = 7,
    NUMBER_8 = 8,
    NUMBER_9 = 9
}

/**
 * 
 * @export
 * @interface CustomizationProperty
 */
export interface CustomizationProperty {
    /**
     * 
     * @type {string}
     * @memberof CustomizationProperty
     */
    uid?: string;
    /**
     * 
     * @type {string}
     * @memberof CustomizationProperty
     */
    createdOn?: string;
    /**
     * 
     * @type {string}
     * @memberof CustomizationProperty
     */
    lastUpdatedOn?: string;
    /**
     * 
     * @type {boolean}
     * @memberof CustomizationProperty
     */
    isActive?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof CustomizationProperty
     */
    isDeleted?: boolean;
    /**
     * 
     * @type {string}
     * @memberof CustomizationProperty
     */
    deletedOn?: string | null;
    /**
     * 
     * @type {Array<object>}
     * @memberof CustomizationProperty
     */
    domainEvents?: Array<object> | null;
    /**
     * 
     * @type {number}
     * @memberof CustomizationProperty
     */
    id?: number;
    /**
     * 
     * @type {string}
     * @memberof CustomizationProperty
     */
    name?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CustomizationProperty
     */
    description?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CustomizationProperty
     */
    typeName?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CustomizationProperty
     */
    property?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CustomizationProperty
     */
    key?: string | null;
    /**
     * 
     * @type {CustomizationPropertyType}
     * @memberof CustomizationProperty
     */
    type?: CustomizationPropertyType;
    /**
     * 
     * @type {string}
     * @memberof CustomizationProperty
     */
    metadataProperties?: string | null;
    /**
     * 
     * @type {Array<string>}
     * @memberof CustomizationProperty
     */
    metadataPropertyList?: Array<string> | null;
    /**
     * 
     * @type {string}
     * @memberof CustomizationProperty
     */
    text?: string | null;
    /**
     * 
     * @type {number}
     * @memberof CustomizationProperty
     */
    groupIndex?: number;
    /**
     * 
     * @type {number}
     * @memberof CustomizationProperty
     */
    packageId?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CustomizationProperty
     */
    companyId?: number | null;
}
/**
 * 
 * @export
 * @interface CustomizationPropertyFieldMappingModel
 */
export interface CustomizationPropertyFieldMappingModel {
    /**
     * 
     * @type {string}
     * @memberof CustomizationPropertyFieldMappingModel
     */
    propertyUid?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CustomizationPropertyFieldMappingModel
     */
    fieldUid?: string | null;
    /**
     * 
     * @type {boolean}
     * @memberof CustomizationPropertyFieldMappingModel
     */
    isActive?: boolean;
}
/**
 * 
 * @export
 * @enum {string}
 */
export enum CustomizationPropertyType {
    NUMBER_0 = 0,
    NUMBER_1 = 1,
    NUMBER_2 = 2,
    NUMBER_3 = 3,
    NUMBER_4 = 4,
    NUMBER_5 = 5,
    NUMBER_6 = 6
}

/**
 * 
 * @export
 * @interface DeleteBatchCommand
 */
export interface DeleteBatchCommand {
    /**
     * 
     * @type {string}
     * @memberof DeleteBatchCommand
     */
    uid?: string;
}
/**
 * 
 * @export
 * @interface DeleteCompanyCertificateCommand
 */
export interface DeleteCompanyCertificateCommand {
    /**
     * 
     * @type {string}
     * @memberof DeleteCompanyCertificateCommand
     */
    uid?: string;
}
/**
 * 
 * @export
 * @interface DeleteCompanyCommand
 */
export interface DeleteCompanyCommand {
    /**
     * 
     * @type {string}
     * @memberof DeleteCompanyCommand
     */
    uid?: string;
}
/**
 * 
 * @export
 * @interface DeleteCompanyContactCommand
 */
export interface DeleteCompanyContactCommand {
    /**
     * 
     * @type {string}
     * @memberof DeleteCompanyContactCommand
     */
    uid?: string;
}
/**
 * 
 * @export
 * @interface DeleteCompanyFacilityPhotoCommand
 */
export interface DeleteCompanyFacilityPhotoCommand {
    /**
     * 
     * @type {string}
     * @memberof DeleteCompanyFacilityPhotoCommand
     */
    uid?: string;
}
/**
 * 
 * @export
 * @interface DeleteCompanyProductCommand
 */
export interface DeleteCompanyProductCommand {
    /**
     * 
     * @type {string}
     * @memberof DeleteCompanyProductCommand
     */
    uid?: string;
}
/**
 * 
 * @export
 * @interface DeleteDataCommand
 */
export interface DeleteDataCommand {
    /**
     * 
     * @type {string}
     * @memberof DeleteDataCommand
     */
    uid?: string;
}
/**
 * 
 * @export
 * @interface DeleteEnvironmentDataCommand
 */
export interface DeleteEnvironmentDataCommand {
    /**
     * 
     * @type {string}
     * @memberof DeleteEnvironmentDataCommand
     */
    uid?: string;
}
/**
 * 
 * @export
 * @interface DeleteProductionCommand
 */
export interface DeleteProductionCommand {
    /**
     * 
     * @type {string}
     * @memberof DeleteProductionCommand
     */
    uid?: string;
}
/**
 * 
 * @export
 * @interface DeleteUserCommand
 */
export interface DeleteUserCommand {
    /**
     * 
     * @type {string}
     * @memberof DeleteUserCommand
     */
    uid?: string;
}
/**
 * 
 * @export
 * @interface EnvironmentData
 */
export interface EnvironmentData {
    /**
     * 
     * @type {string}
     * @memberof EnvironmentData
     */
    uid?: string;
    /**
     * 
     * @type {string}
     * @memberof EnvironmentData
     */
    createdOn?: string;
    /**
     * 
     * @type {string}
     * @memberof EnvironmentData
     */
    lastUpdatedOn?: string;
    /**
     * 
     * @type {boolean}
     * @memberof EnvironmentData
     */
    isActive?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof EnvironmentData
     */
    isDeleted?: boolean;
    /**
     * 
     * @type {string}
     * @memberof EnvironmentData
     */
    deletedOn?: string | null;
    /**
     * 
     * @type {Array<object>}
     * @memberof EnvironmentData
     */
    domainEvents?: Array<object> | null;
    /**
     * 
     * @type {number}
     * @memberof EnvironmentData
     */
    id?: number;
    /**
     * 
     * @type {EnvironmentDataType}
     * @memberof EnvironmentData
     */
    type?: EnvironmentDataType;
    /**
     * 
     * @type {number}
     * @memberof EnvironmentData
     */
    companyId?: number;
    /**
     * 
     * @type {number}
     * @memberof EnvironmentData
     */
    productionId?: number | null;
    /**
     * 
     * @type {number}
     * @memberof EnvironmentData
     */
    batchId?: number | null;
    /**
     * 
     * @type {number}
     * @memberof EnvironmentData
     */
    value?: number;
    /**
     * 
     * @type {string}
     * @memberof EnvironmentData
     */
    description?: string | null;
}
/**
 * 
 * @export
 * @enum {string}
 */
export enum EnvironmentDataType {
    NUMBER_0 = 0,
    NUMBER_1 = 1,
    NUMBER_2 = 2,
    NUMBER_3 = 3,
    NUMBER_4 = 4
}

/**
 * 
 * @export
 * @interface ForgotPasswordCommand
 */
export interface ForgotPasswordCommand {
    /**
     * 
     * @type {string}
     * @memberof ForgotPasswordCommand
     */
    email?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ForgotPasswordCommand
     */
    token?: string | null;
}
/**
 * 
 * @export
 * @interface MenuItem
 */
export interface MenuItem {
    /**
     * 
     * @type {string}
     * @memberof MenuItem
     */
    uid?: string;
    /**
     * 
     * @type {string}
     * @memberof MenuItem
     */
    createdOn?: string;
    /**
     * 
     * @type {string}
     * @memberof MenuItem
     */
    lastUpdatedOn?: string;
    /**
     * 
     * @type {boolean}
     * @memberof MenuItem
     */
    isActive?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof MenuItem
     */
    isDeleted?: boolean;
    /**
     * 
     * @type {string}
     * @memberof MenuItem
     */
    deletedOn?: string | null;
    /**
     * 
     * @type {Array<object>}
     * @memberof MenuItem
     */
    domainEvents?: Array<object> | null;
    /**
     * 
     * @type {number}
     * @memberof MenuItem
     */
    id?: number;
    /**
     * 
     * @type {string}
     * @memberof MenuItem
     */
    text?: string | null;
    /**
     * 
     * @type {string}
     * @memberof MenuItem
     */
    url?: string | null;
    /**
     * 
     * @type {string}
     * @memberof MenuItem
     */
    icon?: string | null;
    /**
     * 
     * @type {RoleType}
     * @memberof MenuItem
     */
    allowedRoles?: RoleType;
    /**
     * 
     * @type {number}
     * @memberof MenuItem
     */
    order?: number;
    /**
     * 
     * @type {boolean}
     * @memberof MenuItem
     */
    isNew?: boolean;
}
/**
 * 
 * @export
 * @interface ProblemDetails
 */
export interface ProblemDetails {
    [key: string]: any | any;

    /**
     * 
     * @type {string}
     * @memberof ProblemDetails
     */
    type?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ProblemDetails
     */
    title?: string | null;
    /**
     * 
     * @type {number}
     * @memberof ProblemDetails
     */
    status?: number | null;
    /**
     * 
     * @type {string}
     * @memberof ProblemDetails
     */
    detail?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ProblemDetails
     */
    instance?: string | null;
}
/**
 * 
 * @export
 * @interface Product
 */
export interface Product {
    /**
     * 
     * @type {string}
     * @memberof Product
     */
    uid?: string;
    /**
     * 
     * @type {string}
     * @memberof Product
     */
    createdOn?: string;
    /**
     * 
     * @type {string}
     * @memberof Product
     */
    lastUpdatedOn?: string;
    /**
     * 
     * @type {boolean}
     * @memberof Product
     */
    isActive?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof Product
     */
    isDeleted?: boolean;
    /**
     * 
     * @type {string}
     * @memberof Product
     */
    deletedOn?: string | null;
    /**
     * 
     * @type {Array<object>}
     * @memberof Product
     */
    domainEvents?: Array<object> | null;
    /**
     * 
     * @type {number}
     * @memberof Product
     */
    id?: number;
    /**
     * 
     * @type {string}
     * @memberof Product
     */
    name?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Product
     */
    photo?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Product
     */
    url?: string | null;
}
/**
 * 
 * @export
 * @interface ProductionModel
 */
export interface ProductionModel {
    /**
     * 
     * @type {string}
     * @memberof ProductionModel
     */
    uid?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ProductionModel
     */
    companyUid?: string;
    /**
     * 
     * @type {string}
     * @memberof ProductionModel
     */
    supplierUid?: string;
    /**
     * 
     * @type {string}
     * @memberof ProductionModel
     */
    startDate?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ProductionModel
     */
    productName?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ProductionModel
     */
    productPhoto?: string | null;
    /**
     * 
     * @type {number}
     * @memberof ProductionModel
     */
    areaSize?: number;
    /**
     * 
     * @type {string}
     * @memberof ProductionModel
     */
    name?: string | null;
    /**
     * 
     * @type {Company}
     * @memberof ProductionModel
     */
    supplier?: Company;
    /**
     * 
     * @type {string}
     * @memberof ProductionModel
     */
    qrcodeUrl?: string | null;
}
/**
 * 
 * @export
 * @interface QrCodeItem
 */
export interface QrCodeItem {
    /**
     * 
     * @type {CustomizationProperty}
     * @memberof QrCodeItem
     */
    property?: CustomizationProperty;
    /**
     * 
     * @type {CustomizationField}
     * @memberof QrCodeItem
     */
    field?: CustomizationField;
    /**
     * 
     * @type {any}
     * @memberof QrCodeItem
     */
    value?: any | null;
    /**
     * 
     * @type {string}
     * @memberof QrCodeItem
     */
    text?: string | null;
    /**
     * 
     * @type {boolean}
     * @memberof QrCodeItem
     */
    isActive?: boolean;
    /**
     * 
     * @type {number}
     * @memberof QrCodeItem
     */
    groupIndex?: number;
}
/**
 * 
 * @export
 * @enum {string}
 */
export enum QuickQrcodeItemDefinitionType {
    NUMBER_0 = 0,
    NUMBER_1 = 1,
    NUMBER_2 = 2,
    NUMBER_3 = 3,
    NUMBER_4 = 4,
    NUMBER_5 = 5,
    NUMBER_6 = 6
}

/**
 * 
 * @export
 * @interface QuickQrcodeItemModel
 */
export interface QuickQrcodeItemModel {
    /**
     * 
     * @type {string}
     * @memberof QuickQrcodeItemModel
     */
    uid?: string;
    /**
     * 
     * @type {string}
     * @memberof QuickQrcodeItemModel
     */
    value?: string | null;
    /**
     * 
     * @type {QuickQrcodeItemDefinitionType}
     * @memberof QuickQrcodeItemModel
     */
    type?: QuickQrcodeItemDefinitionType;
    /**
     * 
     * @type {string}
     * @memberof QuickQrcodeItemModel
     */
    name?: string | null;
    /**
     * 
     * @type {string}
     * @memberof QuickQrcodeItemModel
     */
    description?: string | null;
    /**
     * 
     * @type {number}
     * @memberof QuickQrcodeItemModel
     */
    groupIndex?: number;
    /**
     * 
     * @type {string}
     * @memberof QuickQrcodeItemModel
     */
    groupName?: string | null;
    /**
     * 
     * @type {string}
     * @memberof QuickQrcodeItemModel
     */
    groupDescription?: string | null;
    /**
     * 
     * @type {boolean}
     * @memberof QuickQrcodeItemModel
     */
    isMandatory?: boolean;
    /**
     * 
     * @type {number}
     * @memberof QuickQrcodeItemModel
     */
    order?: number;
    /**
     * 
     * @type {string}
     * @memberof QuickQrcodeItemModel
     */
    code?: string | null;
    /**
     * 
     * @type {string}
     * @memberof QuickQrcodeItemModel
     */
    placeholder?: string | null;
    /**
     * 
     * @type {string}
     * @memberof QuickQrcodeItemModel
     */
    tooltip?: string | null;
}
/**
 * 
 * @export
 * @interface QuickQrcodeModel
 */
export interface QuickQrcodeModel {
    /**
     * 
     * @type {string}
     * @memberof QuickQrcodeModel
     */
    qrcodeAppUrl?: string | null;
    /**
     * 
     * @type {Array<QuickQrcodeItemModel>}
     * @memberof QuickQrcodeModel
     */
    items?: Array<QuickQrcodeItemModel> | null;
}
/**
 * 
 * @export
 * @interface ResetPasswordCommand
 */
export interface ResetPasswordCommand {
    /**
     * 
     * @type {string}
     * @memberof ResetPasswordCommand
     */
    token?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ResetPasswordCommand
     */
    newPassword?: string | null;
}
/**
 * 
 * @export
 * @enum {string}
 */
export enum RoleType {
    NUMBER_1 = 1,
    NUMBER_2 = 2
}

/**
 * 
 * @export
 * @interface SaveQuickCodeFeedbackCommand
 */
export interface SaveQuickCodeFeedbackCommand {
    /**
     * 
     * @type {string}
     * @memberof SaveQuickCodeFeedbackCommand
     */
    companyUid?: string;
    /**
     * 
     * @type {number}
     * @memberof SaveQuickCodeFeedbackCommand
     */
    rating?: number;
    /**
     * 
     * @type {string}
     * @memberof SaveQuickCodeFeedbackCommand
     */
    feedback?: string | null;
}
/**
 * 
 * @export
 * @interface SendEmailCommand
 */
export interface SendEmailCommand {
    /**
     * 
     * @type {string}
     * @memberof SendEmailCommand
     */
    hash?: string | null;
    /**
     * 
     * @type {string}
     * @memberof SendEmailCommand
     */
    code?: string | null;
}
/**
 * 
 * @export
 * @interface Template
 */
export interface Template {
    /**
     * 
     * @type {string}
     * @memberof Template
     */
    uid?: string;
    /**
     * 
     * @type {string}
     * @memberof Template
     */
    createdOn?: string;
    /**
     * 
     * @type {string}
     * @memberof Template
     */
    lastUpdatedOn?: string;
    /**
     * 
     * @type {boolean}
     * @memberof Template
     */
    isActive?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof Template
     */
    isDeleted?: boolean;
    /**
     * 
     * @type {string}
     * @memberof Template
     */
    deletedOn?: string | null;
    /**
     * 
     * @type {Array<object>}
     * @memberof Template
     */
    domainEvents?: Array<object> | null;
    /**
     * 
     * @type {number}
     * @memberof Template
     */
    id?: number;
    /**
     * 
     * @type {string}
     * @memberof Template
     */
    name?: string | null;
    /**
     * 
     * @type {number}
     * @memberof Template
     */
    frontendId?: number;
    /**
     * 
     * @type {boolean}
     * @memberof Template
     */
    isHidden?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof Template
     */
    isDefault?: boolean;
}
/**
 * 
 * @export
 * @interface UpdateBatchCommand
 */
export interface UpdateBatchCommand {
    /**
     * 
     * @type {string}
     * @memberof UpdateBatchCommand
     */
    uid?: string | null;
    /**
     * 
     * @type {string}
     * @memberof UpdateBatchCommand
     */
    supplierUid?: string;
    /**
     * 
     * @type {string}
     * @memberof UpdateBatchCommand
     */
    productionUid?: string;
    /**
     * 
     * @type {string}
     * @memberof UpdateBatchCommand
     */
    harvestDate?: string | null;
    /**
     * 
     * @type {number}
     * @memberof UpdateBatchCommand
     */
    quantityInKgs?: number | null;
    /**
     * 
     * @type {number}
     * @memberof UpdateBatchCommand
     */
    quantityInCrates?: number | null;
    /**
     * 
     * @type {string}
     * @memberof UpdateBatchCommand
     */
    customerUid?: string | null;
    /**
     * 
     * @type {string}
     * @memberof UpdateBatchCommand
     */
    templateUid?: string;
    /**
     * 
     * @type {string}
     * @memberof UpdateBatchCommand
     */
    packagingDate?: string | null;
    /**
     * 
     * @type {string}
     * @memberof UpdateBatchCommand
     */
    expirationDate?: string | null;
    /**
     * 
     * @type {string}
     * @memberof UpdateBatchCommand
     */
    commercialProductName?: string | null;
    /**
     * 
     * @type {string}
     * @memberof UpdateBatchCommand
     */
    name?: string | null;
}
/**
 * 
 * @export
 * @interface UpdateCompanyProductCommand
 */
export interface UpdateCompanyProductCommand {
    /**
     * 
     * @type {string}
     * @memberof UpdateCompanyProductCommand
     */
    uid?: string | null;
    /**
     * 
     * @type {string}
     * @memberof UpdateCompanyProductCommand
     */
    companyUid?: string;
    /**
     * 
     * @type {number}
     * @memberof UpdateCompanyProductCommand
     */
    capacity?: number;
    /**
     * 
     * @type {string}
     * @memberof UpdateCompanyProductCommand
     */
    productUid?: string;
}
/**
 * 
 * @export
 * @interface UpdateDataCommand
 */
export interface UpdateDataCommand {
    /**
     * 
     * @type {string}
     * @memberof UpdateDataCommand
     */
    uid?: string | null;
    /**
     * 
     * @type {string}
     * @memberof UpdateDataCommand
     */
    companyUid?: string;
    /**
     * 
     * @type {string}
     * @memberof UpdateDataCommand
     */
    productionUid?: string;
    /**
     * 
     * @type {string}
     * @memberof UpdateDataCommand
     */
    batchUid?: string | null;
    /**
     * 
     * @type {string}
     * @memberof UpdateDataCommand
     */
    batchMetadataUid?: string;
    /**
     * 
     * @type {Array<BatchDataItemModel>}
     * @memberof UpdateDataCommand
     */
    items?: Array<BatchDataItemModel> | null;
}
/**
 * 
 * @export
 * @interface UpdateEnvironmentDataCommand
 */
export interface UpdateEnvironmentDataCommand {
    /**
     * 
     * @type {string}
     * @memberof UpdateEnvironmentDataCommand
     */
    uid?: string | null;
    /**
     * 
     * @type {EnvironmentDataType}
     * @memberof UpdateEnvironmentDataCommand
     */
    type?: EnvironmentDataType;
    /**
     * 
     * @type {string}
     * @memberof UpdateEnvironmentDataCommand
     */
    companyUid?: string;
    /**
     * 
     * @type {string}
     * @memberof UpdateEnvironmentDataCommand
     */
    productionUid?: string | null;
    /**
     * 
     * @type {string}
     * @memberof UpdateEnvironmentDataCommand
     */
    batchUid?: string | null;
    /**
     * 
     * @type {number}
     * @memberof UpdateEnvironmentDataCommand
     */
    value?: number;
}
/**
 * 
 * @export
 * @interface UpdateProductionCommand
 */
export interface UpdateProductionCommand {
    /**
     * 
     * @type {string}
     * @memberof UpdateProductionCommand
     */
    uid?: string | null;
    /**
     * 
     * @type {string}
     * @memberof UpdateProductionCommand
     */
    productUid?: string;
    /**
     * 
     * @type {string}
     * @memberof UpdateProductionCommand
     */
    startDate?: string | null;
    /**
     * 
     * @type {string}
     * @memberof UpdateProductionCommand
     */
    companyUid?: string;
    /**
     * 
     * @type {string}
     * @memberof UpdateProductionCommand
     */
    supplierUid?: string;
    /**
     * 
     * @type {number}
     * @memberof UpdateProductionCommand
     */
    areaSize?: number;
    /**
     * 
     * @type {string}
     * @memberof UpdateProductionCommand
     */
    name?: string | null;
}
/**
 * 
 * @export
 * @interface UpdateUserCommand
 */
export interface UpdateUserCommand {
    /**
     * 
     * @type {string}
     * @memberof UpdateUserCommand
     */
    uid?: string | null;
    /**
     * 
     * @type {string}
     * @memberof UpdateUserCommand
     */
    email?: string | null;
    /**
     * 
     * @type {string}
     * @memberof UpdateUserCommand
     */
    firstName?: string | null;
    /**
     * 
     * @type {string}
     * @memberof UpdateUserCommand
     */
    lastName?: string | null;
    /**
     * 
     * @type {string}
     * @memberof UpdateUserCommand
     */
    password?: string | null;
    /**
     * 
     * @type {string}
     * @memberof UpdateUserCommand
     */
    companyUid?: string | null;
    /**
     * 
     * @type {string}
     * @memberof UpdateUserCommand
     */
    companyName?: string | null;
    /**
     * 
     * @type {string}
     * @memberof UpdateUserCommand
     */
    companyCode?: string | null;
    /**
     * 
     * @type {string}
     * @memberof UpdateUserCommand
     */
    photo?: string | null;
}
/**
 * 
 * @export
 * @interface UserModel
 */
export interface UserModel {
    /**
     * 
     * @type {string}
     * @memberof UserModel
     */
    uid?: string | null;
    /**
     * 
     * @type {string}
     * @memberof UserModel
     */
    firstName?: string | null;
    /**
     * 
     * @type {string}
     * @memberof UserModel
     */
    lastName?: string | null;
    /**
     * 
     * @type {string}
     * @memberof UserModel
     */
    email?: string | null;
    /**
     * 
     * @type {string}
     * @memberof UserModel
     */
    companyUid?: string;
    /**
     * 
     * @type {boolean}
     * @memberof UserModel
     */
    isSubscriber?: boolean;
    /**
     * 
     * @type {number}
     * @memberof UserModel
     */
    availableProducts?: number;
    /**
     * 
     * @type {number}
     * @memberof UserModel
     */
    availableCustomers?: number;
    /**
     * 
     * @type {number}
     * @memberof UserModel
     */
    availableSuppliers?: number;
    /**
     * 
     * @type {string}
     * @memberof UserModel
     */
    subscriptionEmail?: string | null;
    /**
     * 
     * @type {string}
     * @memberof UserModel
     */
    subscriptionId?: string | null;
    /**
     * 
     * @type {string}
     * @memberof UserModel
     */
    customerId?: string | null;
    /**
     * 
     * @type {boolean}
     * @memberof UserModel
     */
    isTrial?: boolean;
    /**
     * 
     * @type {string}
     * @memberof UserModel
     */
    trialEndDate?: string | null;
    /**
     * 
     * @type {boolean}
     * @memberof UserModel
     */
    upgradeable?: boolean;
}
/**
 * 
 * @export
 * @interface ViewQrcodeModel
 */
export interface ViewQrcodeModel {
    /**
     * 
     * @type {string}
     * @memberof ViewQrcodeModel
     */
    itemUid?: string | null;
    /**
     * 
     * @type {number}
     * @memberof ViewQrcodeModel
     */
    companyId?: number | null;
    /**
     * 
     * @type {string}
     * @memberof ViewQrcodeModel
     */
    externalCompanyId?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ViewQrcodeModel
     */
    ip?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ViewQrcodeModel
     */
    parentItemUid?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ViewQrcodeModel
     */
    productName?: string | null;
}

/**
 * AuthApi - axios parameter creator
 * @export
 */
export const AuthApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {CredentialsModel} [credentialsModel] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTokenPost: async (credentialsModel?: CredentialsModel, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/token`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(credentialsModel, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AuthApi - functional programming interface
 * @export
 */
export const AuthApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AuthApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {CredentialsModel} [credentialsModel] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiTokenPost(credentialsModel?: CredentialsModel, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiTokenPost(credentialsModel, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * AuthApi - factory interface
 * @export
 */
export const AuthApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AuthApiFp(configuration)
    return {
        /**
         * 
         * @param {CredentialsModel} [credentialsModel] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTokenPost(credentialsModel?: CredentialsModel, options?: any): AxiosPromise<void> {
            return localVarFp.apiTokenPost(credentialsModel, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AuthApi - object-oriented interface
 * @export
 * @class AuthApi
 * @extends {BaseAPI}
 */
export class AuthApi extends BaseAPI {
    /**
     * 
     * @param {CredentialsModel} [credentialsModel] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public apiTokenPost(credentialsModel?: CredentialsModel, options?: any) {
        return AuthApiFp(this.configuration).apiTokenPost(credentialsModel, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * BatchApi - axios parameter creator
 * @export
 */
export const BatchApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} companyUid 
         * @param {string} batchUid 
         * @param {string} culture 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCultureBatchCompanyUidBatchUidGet: async (companyUid: string, batchUid: string, culture: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyUid' is not null or undefined
            assertParamExists('apiCultureBatchCompanyUidBatchUidGet', 'companyUid', companyUid)
            // verify required parameter 'batchUid' is not null or undefined
            assertParamExists('apiCultureBatchCompanyUidBatchUidGet', 'batchUid', batchUid)
            // verify required parameter 'culture' is not null or undefined
            assertParamExists('apiCultureBatchCompanyUidBatchUidGet', 'culture', culture)
            const localVarPath = `/api/{culture}/Batch/{companyUid}/{batchUid}`
                .replace(`{${"companyUid"}}`, encodeURIComponent(String(companyUid)))
                .replace(`{${"batchUid"}}`, encodeURIComponent(String(batchUid)))
                .replace(`{${"culture"}}`, encodeURIComponent(String(culture)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} companyUid 
         * @param {string} batchUid 
         * @param {boolean} appendDetails 
         * @param {string} culture 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCultureBatchCompanyUidBatchUidViewsAppendDetailsGet: async (companyUid: string, batchUid: string, appendDetails: boolean, culture: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyUid' is not null or undefined
            assertParamExists('apiCultureBatchCompanyUidBatchUidViewsAppendDetailsGet', 'companyUid', companyUid)
            // verify required parameter 'batchUid' is not null or undefined
            assertParamExists('apiCultureBatchCompanyUidBatchUidViewsAppendDetailsGet', 'batchUid', batchUid)
            // verify required parameter 'appendDetails' is not null or undefined
            assertParamExists('apiCultureBatchCompanyUidBatchUidViewsAppendDetailsGet', 'appendDetails', appendDetails)
            // verify required parameter 'culture' is not null or undefined
            assertParamExists('apiCultureBatchCompanyUidBatchUidViewsAppendDetailsGet', 'culture', culture)
            const localVarPath = `/api/{culture}/Batch/{companyUid}/{batchUid}/views/{appendDetails}`
                .replace(`{${"companyUid"}}`, encodeURIComponent(String(companyUid)))
                .replace(`{${"batchUid"}}`, encodeURIComponent(String(batchUid)))
                .replace(`{${"appendDetails"}}`, encodeURIComponent(String(appendDetails)))
                .replace(`{${"culture"}}`, encodeURIComponent(String(culture)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} companyUid 
         * @param {string} culture 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCultureBatchCompanyUidDistributedGet: async (companyUid: string, culture: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyUid' is not null or undefined
            assertParamExists('apiCultureBatchCompanyUidDistributedGet', 'companyUid', companyUid)
            // verify required parameter 'culture' is not null or undefined
            assertParamExists('apiCultureBatchCompanyUidDistributedGet', 'culture', culture)
            const localVarPath = `/api/{culture}/Batch/{companyUid}/distributed`
                .replace(`{${"companyUid"}}`, encodeURIComponent(String(companyUid)))
                .replace(`{${"culture"}}`, encodeURIComponent(String(culture)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} companyUid 
         * @param {string} culture 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCultureBatchCompanyUidHarvestedGet: async (companyUid: string, culture: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyUid' is not null or undefined
            assertParamExists('apiCultureBatchCompanyUidHarvestedGet', 'companyUid', companyUid)
            // verify required parameter 'culture' is not null or undefined
            assertParamExists('apiCultureBatchCompanyUidHarvestedGet', 'culture', culture)
            const localVarPath = `/api/{culture}/Batch/{companyUid}/harvested`
                .replace(`{${"companyUid"}}`, encodeURIComponent(String(companyUid)))
                .replace(`{${"culture"}}`, encodeURIComponent(String(culture)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} companyUid 
         * @param {string} culture 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCultureBatchCompanyUidLatestGet: async (companyUid: string, culture: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyUid' is not null or undefined
            assertParamExists('apiCultureBatchCompanyUidLatestGet', 'companyUid', companyUid)
            // verify required parameter 'culture' is not null or undefined
            assertParamExists('apiCultureBatchCompanyUidLatestGet', 'culture', culture)
            const localVarPath = `/api/{culture}/Batch/{companyUid}/latest`
                .replace(`{${"companyUid"}}`, encodeURIComponent(String(companyUid)))
                .replace(`{${"culture"}}`, encodeURIComponent(String(culture)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} companyUid 
         * @param {string} supplierUid 
         * @param {string} culture 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCultureBatchCompanyUidSupplierSupplierUidGet: async (companyUid: string, supplierUid: string, culture: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyUid' is not null or undefined
            assertParamExists('apiCultureBatchCompanyUidSupplierSupplierUidGet', 'companyUid', companyUid)
            // verify required parameter 'supplierUid' is not null or undefined
            assertParamExists('apiCultureBatchCompanyUidSupplierSupplierUidGet', 'supplierUid', supplierUid)
            // verify required parameter 'culture' is not null or undefined
            assertParamExists('apiCultureBatchCompanyUidSupplierSupplierUidGet', 'culture', culture)
            const localVarPath = `/api/{culture}/Batch/{companyUid}/supplier/{supplierUid}`
                .replace(`{${"companyUid"}}`, encodeURIComponent(String(companyUid)))
                .replace(`{${"supplierUid"}}`, encodeURIComponent(String(supplierUid)))
                .replace(`{${"culture"}}`, encodeURIComponent(String(culture)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} culture 
         * @param {DeleteBatchCommand} [deleteBatchCommand] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCultureBatchDelete: async (culture: string, deleteBatchCommand?: DeleteBatchCommand, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'culture' is not null or undefined
            assertParamExists('apiCultureBatchDelete', 'culture', culture)
            const localVarPath = `/api/{culture}/Batch`
                .replace(`{${"culture"}}`, encodeURIComponent(String(culture)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(deleteBatchCommand, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} culture 
         * @param {CreateBatchCommand} [createBatchCommand] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCultureBatchPost: async (culture: string, createBatchCommand?: CreateBatchCommand, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'culture' is not null or undefined
            assertParamExists('apiCultureBatchPost', 'culture', culture)
            const localVarPath = `/api/{culture}/Batch`
                .replace(`{${"culture"}}`, encodeURIComponent(String(culture)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createBatchCommand, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} culture 
         * @param {UpdateBatchCommand} [updateBatchCommand] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCultureBatchPut: async (culture: string, updateBatchCommand?: UpdateBatchCommand, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'culture' is not null or undefined
            assertParamExists('apiCultureBatchPut', 'culture', culture)
            const localVarPath = `/api/{culture}/Batch`
                .replace(`{${"culture"}}`, encodeURIComponent(String(culture)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateBatchCommand, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} uid 
         * @param {string} culture 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCultureBatchUidQrcodeGet: async (uid: string, culture: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'uid' is not null or undefined
            assertParamExists('apiCultureBatchUidQrcodeGet', 'uid', uid)
            // verify required parameter 'culture' is not null or undefined
            assertParamExists('apiCultureBatchUidQrcodeGet', 'culture', culture)
            const localVarPath = `/api/{culture}/Batch/{uid}/qrcode`
                .replace(`{${"uid"}}`, encodeURIComponent(String(uid)))
                .replace(`{${"culture"}}`, encodeURIComponent(String(culture)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * BatchApi - functional programming interface
 * @export
 */
export const BatchApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = BatchApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {string} companyUid 
         * @param {string} batchUid 
         * @param {string} culture 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiCultureBatchCompanyUidBatchUidGet(companyUid: string, batchUid: string, culture: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiCultureBatchCompanyUidBatchUidGet(companyUid, batchUid, culture, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} companyUid 
         * @param {string} batchUid 
         * @param {boolean} appendDetails 
         * @param {string} culture 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiCultureBatchCompanyUidBatchUidViewsAppendDetailsGet(companyUid: string, batchUid: string, appendDetails: boolean, culture: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiCultureBatchCompanyUidBatchUidViewsAppendDetailsGet(companyUid, batchUid, appendDetails, culture, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} companyUid 
         * @param {string} culture 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiCultureBatchCompanyUidDistributedGet(companyUid: string, culture: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<BatchModel>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiCultureBatchCompanyUidDistributedGet(companyUid, culture, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} companyUid 
         * @param {string} culture 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiCultureBatchCompanyUidHarvestedGet(companyUid: string, culture: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<BatchModel>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiCultureBatchCompanyUidHarvestedGet(companyUid, culture, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} companyUid 
         * @param {string} culture 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiCultureBatchCompanyUidLatestGet(companyUid: string, culture: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<BatchModel>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiCultureBatchCompanyUidLatestGet(companyUid, culture, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} companyUid 
         * @param {string} supplierUid 
         * @param {string} culture 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiCultureBatchCompanyUidSupplierSupplierUidGet(companyUid: string, supplierUid: string, culture: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<BatchModel>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiCultureBatchCompanyUidSupplierSupplierUidGet(companyUid, supplierUid, culture, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} culture 
         * @param {DeleteBatchCommand} [deleteBatchCommand] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiCultureBatchDelete(culture: string, deleteBatchCommand?: DeleteBatchCommand, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeleteBatchCommand>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiCultureBatchDelete(culture, deleteBatchCommand, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} culture 
         * @param {CreateBatchCommand} [createBatchCommand] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiCultureBatchPost(culture: string, createBatchCommand?: CreateBatchCommand, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateBatchCommand>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiCultureBatchPost(culture, createBatchCommand, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} culture 
         * @param {UpdateBatchCommand} [updateBatchCommand] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiCultureBatchPut(culture: string, updateBatchCommand?: UpdateBatchCommand, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UpdateBatchCommand>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiCultureBatchPut(culture, updateBatchCommand, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} uid 
         * @param {string} culture 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiCultureBatchUidQrcodeGet(uid: string, culture: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiCultureBatchUidQrcodeGet(uid, culture, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * BatchApi - factory interface
 * @export
 */
export const BatchApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = BatchApiFp(configuration)
    return {
        /**
         * 
         * @param {string} companyUid 
         * @param {string} batchUid 
         * @param {string} culture 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCultureBatchCompanyUidBatchUidGet(companyUid: string, batchUid: string, culture: string, options?: any): AxiosPromise<void> {
            return localVarFp.apiCultureBatchCompanyUidBatchUidGet(companyUid, batchUid, culture, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} companyUid 
         * @param {string} batchUid 
         * @param {boolean} appendDetails 
         * @param {string} culture 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCultureBatchCompanyUidBatchUidViewsAppendDetailsGet(companyUid: string, batchUid: string, appendDetails: boolean, culture: string, options?: any): AxiosPromise<void> {
            return localVarFp.apiCultureBatchCompanyUidBatchUidViewsAppendDetailsGet(companyUid, batchUid, appendDetails, culture, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} companyUid 
         * @param {string} culture 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCultureBatchCompanyUidDistributedGet(companyUid: string, culture: string, options?: any): AxiosPromise<Array<BatchModel>> {
            return localVarFp.apiCultureBatchCompanyUidDistributedGet(companyUid, culture, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} companyUid 
         * @param {string} culture 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCultureBatchCompanyUidHarvestedGet(companyUid: string, culture: string, options?: any): AxiosPromise<Array<BatchModel>> {
            return localVarFp.apiCultureBatchCompanyUidHarvestedGet(companyUid, culture, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} companyUid 
         * @param {string} culture 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCultureBatchCompanyUidLatestGet(companyUid: string, culture: string, options?: any): AxiosPromise<Array<BatchModel>> {
            return localVarFp.apiCultureBatchCompanyUidLatestGet(companyUid, culture, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} companyUid 
         * @param {string} supplierUid 
         * @param {string} culture 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCultureBatchCompanyUidSupplierSupplierUidGet(companyUid: string, supplierUid: string, culture: string, options?: any): AxiosPromise<Array<BatchModel>> {
            return localVarFp.apiCultureBatchCompanyUidSupplierSupplierUidGet(companyUid, supplierUid, culture, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} culture 
         * @param {DeleteBatchCommand} [deleteBatchCommand] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCultureBatchDelete(culture: string, deleteBatchCommand?: DeleteBatchCommand, options?: any): AxiosPromise<DeleteBatchCommand> {
            return localVarFp.apiCultureBatchDelete(culture, deleteBatchCommand, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} culture 
         * @param {CreateBatchCommand} [createBatchCommand] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCultureBatchPost(culture: string, createBatchCommand?: CreateBatchCommand, options?: any): AxiosPromise<CreateBatchCommand> {
            return localVarFp.apiCultureBatchPost(culture, createBatchCommand, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} culture 
         * @param {UpdateBatchCommand} [updateBatchCommand] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCultureBatchPut(culture: string, updateBatchCommand?: UpdateBatchCommand, options?: any): AxiosPromise<UpdateBatchCommand> {
            return localVarFp.apiCultureBatchPut(culture, updateBatchCommand, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} uid 
         * @param {string} culture 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCultureBatchUidQrcodeGet(uid: string, culture: string, options?: any): AxiosPromise<void> {
            return localVarFp.apiCultureBatchUidQrcodeGet(uid, culture, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * BatchApi - object-oriented interface
 * @export
 * @class BatchApi
 * @extends {BaseAPI}
 */
export class BatchApi extends BaseAPI {
    /**
     * 
     * @param {string} companyUid 
     * @param {string} batchUid 
     * @param {string} culture 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BatchApi
     */
    public apiCultureBatchCompanyUidBatchUidGet(companyUid: string, batchUid: string, culture: string, options?: any) {
        return BatchApiFp(this.configuration).apiCultureBatchCompanyUidBatchUidGet(companyUid, batchUid, culture, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} companyUid 
     * @param {string} batchUid 
     * @param {boolean} appendDetails 
     * @param {string} culture 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BatchApi
     */
    public apiCultureBatchCompanyUidBatchUidViewsAppendDetailsGet(companyUid: string, batchUid: string, appendDetails: boolean, culture: string, options?: any) {
        return BatchApiFp(this.configuration).apiCultureBatchCompanyUidBatchUidViewsAppendDetailsGet(companyUid, batchUid, appendDetails, culture, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} companyUid 
     * @param {string} culture 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BatchApi
     */
    public apiCultureBatchCompanyUidDistributedGet(companyUid: string, culture: string, options?: any) {
        return BatchApiFp(this.configuration).apiCultureBatchCompanyUidDistributedGet(companyUid, culture, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} companyUid 
     * @param {string} culture 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BatchApi
     */
    public apiCultureBatchCompanyUidHarvestedGet(companyUid: string, culture: string, options?: any) {
        return BatchApiFp(this.configuration).apiCultureBatchCompanyUidHarvestedGet(companyUid, culture, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} companyUid 
     * @param {string} culture 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BatchApi
     */
    public apiCultureBatchCompanyUidLatestGet(companyUid: string, culture: string, options?: any) {
        return BatchApiFp(this.configuration).apiCultureBatchCompanyUidLatestGet(companyUid, culture, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} companyUid 
     * @param {string} supplierUid 
     * @param {string} culture 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BatchApi
     */
    public apiCultureBatchCompanyUidSupplierSupplierUidGet(companyUid: string, supplierUid: string, culture: string, options?: any) {
        return BatchApiFp(this.configuration).apiCultureBatchCompanyUidSupplierSupplierUidGet(companyUid, supplierUid, culture, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} culture 
     * @param {DeleteBatchCommand} [deleteBatchCommand] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BatchApi
     */
    public apiCultureBatchDelete(culture: string, deleteBatchCommand?: DeleteBatchCommand, options?: any) {
        return BatchApiFp(this.configuration).apiCultureBatchDelete(culture, deleteBatchCommand, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} culture 
     * @param {CreateBatchCommand} [createBatchCommand] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BatchApi
     */
    public apiCultureBatchPost(culture: string, createBatchCommand?: CreateBatchCommand, options?: any) {
        return BatchApiFp(this.configuration).apiCultureBatchPost(culture, createBatchCommand, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} culture 
     * @param {UpdateBatchCommand} [updateBatchCommand] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BatchApi
     */
    public apiCultureBatchPut(culture: string, updateBatchCommand?: UpdateBatchCommand, options?: any) {
        return BatchApiFp(this.configuration).apiCultureBatchPut(culture, updateBatchCommand, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} uid 
     * @param {string} culture 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BatchApi
     */
    public apiCultureBatchUidQrcodeGet(uid: string, culture: string, options?: any) {
        return BatchApiFp(this.configuration).apiCultureBatchUidQrcodeGet(uid, culture, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * BatchMetadataApi - axios parameter creator
 * @export
 */
export const BatchMetadataApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} companyUid 
         * @param {string} batchMetadataUid 
         * @param {string} culture 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCultureBatchMetadataCompanyCompanyUidBatchMetadataUidGet: async (companyUid: string, batchMetadataUid: string, culture: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyUid' is not null or undefined
            assertParamExists('apiCultureBatchMetadataCompanyCompanyUidBatchMetadataUidGet', 'companyUid', companyUid)
            // verify required parameter 'batchMetadataUid' is not null or undefined
            assertParamExists('apiCultureBatchMetadataCompanyCompanyUidBatchMetadataUidGet', 'batchMetadataUid', batchMetadataUid)
            // verify required parameter 'culture' is not null or undefined
            assertParamExists('apiCultureBatchMetadataCompanyCompanyUidBatchMetadataUidGet', 'culture', culture)
            const localVarPath = `/api/{culture}/BatchMetadata/company/{companyUid}/{batchMetadataUid}`
                .replace(`{${"companyUid"}}`, encodeURIComponent(String(companyUid)))
                .replace(`{${"batchMetadataUid"}}`, encodeURIComponent(String(batchMetadataUid)))
                .replace(`{${"culture"}}`, encodeURIComponent(String(culture)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} companyUid 
         * @param {string} culture 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCultureBatchMetadataCompanyCompanyUidGet: async (companyUid: string, culture: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyUid' is not null or undefined
            assertParamExists('apiCultureBatchMetadataCompanyCompanyUidGet', 'companyUid', companyUid)
            // verify required parameter 'culture' is not null or undefined
            assertParamExists('apiCultureBatchMetadataCompanyCompanyUidGet', 'culture', culture)
            const localVarPath = `/api/{culture}/BatchMetadata/company/{companyUid}`
                .replace(`{${"companyUid"}}`, encodeURIComponent(String(companyUid)))
                .replace(`{${"culture"}}`, encodeURIComponent(String(culture)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * BatchMetadataApi - functional programming interface
 * @export
 */
export const BatchMetadataApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = BatchMetadataApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {string} companyUid 
         * @param {string} batchMetadataUid 
         * @param {string} culture 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiCultureBatchMetadataCompanyCompanyUidBatchMetadataUidGet(companyUid: string, batchMetadataUid: string, culture: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiCultureBatchMetadataCompanyCompanyUidBatchMetadataUidGet(companyUid, batchMetadataUid, culture, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} companyUid 
         * @param {string} culture 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiCultureBatchMetadataCompanyCompanyUidGet(companyUid: string, culture: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiCultureBatchMetadataCompanyCompanyUidGet(companyUid, culture, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * BatchMetadataApi - factory interface
 * @export
 */
export const BatchMetadataApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = BatchMetadataApiFp(configuration)
    return {
        /**
         * 
         * @param {string} companyUid 
         * @param {string} batchMetadataUid 
         * @param {string} culture 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCultureBatchMetadataCompanyCompanyUidBatchMetadataUidGet(companyUid: string, batchMetadataUid: string, culture: string, options?: any): AxiosPromise<void> {
            return localVarFp.apiCultureBatchMetadataCompanyCompanyUidBatchMetadataUidGet(companyUid, batchMetadataUid, culture, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} companyUid 
         * @param {string} culture 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCultureBatchMetadataCompanyCompanyUidGet(companyUid: string, culture: string, options?: any): AxiosPromise<void> {
            return localVarFp.apiCultureBatchMetadataCompanyCompanyUidGet(companyUid, culture, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * BatchMetadataApi - object-oriented interface
 * @export
 * @class BatchMetadataApi
 * @extends {BaseAPI}
 */
export class BatchMetadataApi extends BaseAPI {
    /**
     * 
     * @param {string} companyUid 
     * @param {string} batchMetadataUid 
     * @param {string} culture 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BatchMetadataApi
     */
    public apiCultureBatchMetadataCompanyCompanyUidBatchMetadataUidGet(companyUid: string, batchMetadataUid: string, culture: string, options?: any) {
        return BatchMetadataApiFp(this.configuration).apiCultureBatchMetadataCompanyCompanyUidBatchMetadataUidGet(companyUid, batchMetadataUid, culture, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} companyUid 
     * @param {string} culture 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BatchMetadataApi
     */
    public apiCultureBatchMetadataCompanyCompanyUidGet(companyUid: string, culture: string, options?: any) {
        return BatchMetadataApiFp(this.configuration).apiCultureBatchMetadataCompanyCompanyUidGet(companyUid, culture, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * CompanyApi - axios parameter creator
 * @export
 */
export const CompanyApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} culture 
         * @param {DeleteCompanyCertificateCommand} [deleteCompanyCertificateCommand] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCultureCompanyCertificatesDelete: async (culture: string, deleteCompanyCertificateCommand?: DeleteCompanyCertificateCommand, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'culture' is not null or undefined
            assertParamExists('apiCultureCompanyCertificatesDelete', 'culture', culture)
            const localVarPath = `/api/{culture}/Company/certificates`
                .replace(`{${"culture"}}`, encodeURIComponent(String(culture)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(deleteCompanyCertificateCommand, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} culture 
         * @param {string} [data] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCultureCompanyCertificatesPost: async (culture: string, data?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'culture' is not null or undefined
            assertParamExists('apiCultureCompanyCertificatesPost', 'culture', culture)
            const localVarPath = `/api/{culture}/Company/certificates`
                .replace(`{${"culture"}}`, encodeURIComponent(String(culture)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


            if (data !== undefined) { 
                localVarFormParams.append('data', data as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} companyUid 
         * @param {string} culture 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCultureCompanyCompanyUidCertificatesGet: async (companyUid: string, culture: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyUid' is not null or undefined
            assertParamExists('apiCultureCompanyCompanyUidCertificatesGet', 'companyUid', companyUid)
            // verify required parameter 'culture' is not null or undefined
            assertParamExists('apiCultureCompanyCompanyUidCertificatesGet', 'culture', culture)
            const localVarPath = `/api/{culture}/Company/{companyUid}/certificates`
                .replace(`{${"companyUid"}}`, encodeURIComponent(String(companyUid)))
                .replace(`{${"culture"}}`, encodeURIComponent(String(culture)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} companyUid 
         * @param {string} culture 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCultureCompanyCompanyUidContactsGet: async (companyUid: string, culture: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyUid' is not null or undefined
            assertParamExists('apiCultureCompanyCompanyUidContactsGet', 'companyUid', companyUid)
            // verify required parameter 'culture' is not null or undefined
            assertParamExists('apiCultureCompanyCompanyUidContactsGet', 'culture', culture)
            const localVarPath = `/api/{culture}/Company/{companyUid}/contacts`
                .replace(`{${"companyUid"}}`, encodeURIComponent(String(companyUid)))
                .replace(`{${"culture"}}`, encodeURIComponent(String(culture)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} companyUid 
         * @param {string} culture 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCultureCompanyCompanyUidFacilityPhotosGet: async (companyUid: string, culture: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyUid' is not null or undefined
            assertParamExists('apiCultureCompanyCompanyUidFacilityPhotosGet', 'companyUid', companyUid)
            // verify required parameter 'culture' is not null or undefined
            assertParamExists('apiCultureCompanyCompanyUidFacilityPhotosGet', 'culture', culture)
            const localVarPath = `/api/{culture}/Company/{companyUid}/facilityPhotos`
                .replace(`{${"companyUid"}}`, encodeURIComponent(String(companyUid)))
                .replace(`{${"culture"}}`, encodeURIComponent(String(culture)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} companyUid 
         * @param {string} culture 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCultureCompanyCompanyUidGet: async (companyUid: string, culture: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyUid' is not null or undefined
            assertParamExists('apiCultureCompanyCompanyUidGet', 'companyUid', companyUid)
            // verify required parameter 'culture' is not null or undefined
            assertParamExists('apiCultureCompanyCompanyUidGet', 'culture', culture)
            const localVarPath = `/api/{culture}/Company/{companyUid}`
                .replace(`{${"companyUid"}}`, encodeURIComponent(String(companyUid)))
                .replace(`{${"culture"}}`, encodeURIComponent(String(culture)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} companyUid 
         * @param {string} culture 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCultureCompanyCompanyUidProductsGet: async (companyUid: string, culture: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyUid' is not null or undefined
            assertParamExists('apiCultureCompanyCompanyUidProductsGet', 'companyUid', companyUid)
            // verify required parameter 'culture' is not null or undefined
            assertParamExists('apiCultureCompanyCompanyUidProductsGet', 'culture', culture)
            const localVarPath = `/api/{culture}/Company/{companyUid}/products`
                .replace(`{${"companyUid"}}`, encodeURIComponent(String(companyUid)))
                .replace(`{${"culture"}}`, encodeURIComponent(String(culture)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} companyuid 
         * @param {string} culture 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCultureCompanyCompanyuidCustomersGet: async (companyuid: string, culture: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyuid' is not null or undefined
            assertParamExists('apiCultureCompanyCompanyuidCustomersGet', 'companyuid', companyuid)
            // verify required parameter 'culture' is not null or undefined
            assertParamExists('apiCultureCompanyCompanyuidCustomersGet', 'culture', culture)
            const localVarPath = `/api/{culture}/Company/{companyuid}/customers`
                .replace(`{${"companyuid"}}`, encodeURIComponent(String(companyuid)))
                .replace(`{${"culture"}}`, encodeURIComponent(String(culture)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} companyuid 
         * @param {string} culture 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCultureCompanyCompanyuidSuppliersGet: async (companyuid: string, culture: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyuid' is not null or undefined
            assertParamExists('apiCultureCompanyCompanyuidSuppliersGet', 'companyuid', companyuid)
            // verify required parameter 'culture' is not null or undefined
            assertParamExists('apiCultureCompanyCompanyuidSuppliersGet', 'culture', culture)
            const localVarPath = `/api/{culture}/Company/{companyuid}/suppliers`
                .replace(`{${"companyuid"}}`, encodeURIComponent(String(companyuid)))
                .replace(`{${"culture"}}`, encodeURIComponent(String(culture)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} companyuid 
         * @param {string} culture 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCultureCompanyCompanyuidTemplatesGet: async (companyuid: string, culture: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyuid' is not null or undefined
            assertParamExists('apiCultureCompanyCompanyuidTemplatesGet', 'companyuid', companyuid)
            // verify required parameter 'culture' is not null or undefined
            assertParamExists('apiCultureCompanyCompanyuidTemplatesGet', 'culture', culture)
            const localVarPath = `/api/{culture}/Company/{companyuid}/templates`
                .replace(`{${"companyuid"}}`, encodeURIComponent(String(companyuid)))
                .replace(`{${"culture"}}`, encodeURIComponent(String(culture)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} culture 
         * @param {DeleteCompanyContactCommand} [deleteCompanyContactCommand] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCultureCompanyContactsDelete: async (culture: string, deleteCompanyContactCommand?: DeleteCompanyContactCommand, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'culture' is not null or undefined
            assertParamExists('apiCultureCompanyContactsDelete', 'culture', culture)
            const localVarPath = `/api/{culture}/Company/contacts`
                .replace(`{${"culture"}}`, encodeURIComponent(String(culture)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(deleteCompanyContactCommand, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} culture 
         * @param {string} [data] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCultureCompanyContactsPost: async (culture: string, data?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'culture' is not null or undefined
            assertParamExists('apiCultureCompanyContactsPost', 'culture', culture)
            const localVarPath = `/api/{culture}/Company/contacts`
                .replace(`{${"culture"}}`, encodeURIComponent(String(culture)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


            if (data !== undefined) { 
                localVarFormParams.append('data', data as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} culture 
         * @param {string} [data] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCultureCompanyContactsPut: async (culture: string, data?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'culture' is not null or undefined
            assertParamExists('apiCultureCompanyContactsPut', 'culture', culture)
            const localVarPath = `/api/{culture}/Company/contacts`
                .replace(`{${"culture"}}`, encodeURIComponent(String(culture)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


            if (data !== undefined) { 
                localVarFormParams.append('data', data as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} culture 
         * @param {DeleteCompanyCommand} [deleteCompanyCommand] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCultureCompanyDelete: async (culture: string, deleteCompanyCommand?: DeleteCompanyCommand, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'culture' is not null or undefined
            assertParamExists('apiCultureCompanyDelete', 'culture', culture)
            const localVarPath = `/api/{culture}/Company`
                .replace(`{${"culture"}}`, encodeURIComponent(String(culture)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(deleteCompanyCommand, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} culture 
         * @param {DeleteCompanyFacilityPhotoCommand} [deleteCompanyFacilityPhotoCommand] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCultureCompanyFacilityPhotosDelete: async (culture: string, deleteCompanyFacilityPhotoCommand?: DeleteCompanyFacilityPhotoCommand, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'culture' is not null or undefined
            assertParamExists('apiCultureCompanyFacilityPhotosDelete', 'culture', culture)
            const localVarPath = `/api/{culture}/Company/facilityPhotos`
                .replace(`{${"culture"}}`, encodeURIComponent(String(culture)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(deleteCompanyFacilityPhotoCommand, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} culture 
         * @param {string} [data] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCultureCompanyFacilityPhotosPost: async (culture: string, data?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'culture' is not null or undefined
            assertParamExists('apiCultureCompanyFacilityPhotosPost', 'culture', culture)
            const localVarPath = `/api/{culture}/Company/facilityPhotos`
                .replace(`{${"culture"}}`, encodeURIComponent(String(culture)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


            if (data !== undefined) { 
                localVarFormParams.append('data', data as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} culture 
         * @param {string} [data] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCultureCompanyPost: async (culture: string, data?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'culture' is not null or undefined
            assertParamExists('apiCultureCompanyPost', 'culture', culture)
            const localVarPath = `/api/{culture}/Company`
                .replace(`{${"culture"}}`, encodeURIComponent(String(culture)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


            if (data !== undefined) { 
                localVarFormParams.append('data', data as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} culture 
         * @param {DeleteCompanyProductCommand} [deleteCompanyProductCommand] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCultureCompanyProductsDelete: async (culture: string, deleteCompanyProductCommand?: DeleteCompanyProductCommand, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'culture' is not null or undefined
            assertParamExists('apiCultureCompanyProductsDelete', 'culture', culture)
            const localVarPath = `/api/{culture}/Company/products`
                .replace(`{${"culture"}}`, encodeURIComponent(String(culture)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(deleteCompanyProductCommand, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} culture 
         * @param {CreateCompanyProductCommand} [createCompanyProductCommand] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCultureCompanyProductsPost: async (culture: string, createCompanyProductCommand?: CreateCompanyProductCommand, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'culture' is not null or undefined
            assertParamExists('apiCultureCompanyProductsPost', 'culture', culture)
            const localVarPath = `/api/{culture}/Company/products`
                .replace(`{${"culture"}}`, encodeURIComponent(String(culture)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createCompanyProductCommand, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} culture 
         * @param {UpdateCompanyProductCommand} [updateCompanyProductCommand] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCultureCompanyProductsPut: async (culture: string, updateCompanyProductCommand?: UpdateCompanyProductCommand, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'culture' is not null or undefined
            assertParamExists('apiCultureCompanyProductsPut', 'culture', culture)
            const localVarPath = `/api/{culture}/Company/products`
                .replace(`{${"culture"}}`, encodeURIComponent(String(culture)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateCompanyProductCommand, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} culture 
         * @param {string} [data] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCultureCompanyPut: async (culture: string, data?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'culture' is not null or undefined
            assertParamExists('apiCultureCompanyPut', 'culture', culture)
            const localVarPath = `/api/{culture}/Company`
                .replace(`{${"culture"}}`, encodeURIComponent(String(culture)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


            if (data !== undefined) { 
                localVarFormParams.append('data', data as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CompanyApi - functional programming interface
 * @export
 */
export const CompanyApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CompanyApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {string} culture 
         * @param {DeleteCompanyCertificateCommand} [deleteCompanyCertificateCommand] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiCultureCompanyCertificatesDelete(culture: string, deleteCompanyCertificateCommand?: DeleteCompanyCertificateCommand, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Company>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiCultureCompanyCertificatesDelete(culture, deleteCompanyCertificateCommand, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} culture 
         * @param {string} [data] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiCultureCompanyCertificatesPost(culture: string, data?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Company>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiCultureCompanyCertificatesPost(culture, data, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} companyUid 
         * @param {string} culture 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiCultureCompanyCompanyUidCertificatesGet(companyUid: string, culture: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiCultureCompanyCompanyUidCertificatesGet(companyUid, culture, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} companyUid 
         * @param {string} culture 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiCultureCompanyCompanyUidContactsGet(companyUid: string, culture: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiCultureCompanyCompanyUidContactsGet(companyUid, culture, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} companyUid 
         * @param {string} culture 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiCultureCompanyCompanyUidFacilityPhotosGet(companyUid: string, culture: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiCultureCompanyCompanyUidFacilityPhotosGet(companyUid, culture, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} companyUid 
         * @param {string} culture 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiCultureCompanyCompanyUidGet(companyUid: string, culture: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiCultureCompanyCompanyUidGet(companyUid, culture, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} companyUid 
         * @param {string} culture 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiCultureCompanyCompanyUidProductsGet(companyUid: string, culture: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiCultureCompanyCompanyUidProductsGet(companyUid, culture, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} companyuid 
         * @param {string} culture 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiCultureCompanyCompanyuidCustomersGet(companyuid: string, culture: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Company>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiCultureCompanyCompanyuidCustomersGet(companyuid, culture, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} companyuid 
         * @param {string} culture 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiCultureCompanyCompanyuidSuppliersGet(companyuid: string, culture: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Company>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiCultureCompanyCompanyuidSuppliersGet(companyuid, culture, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} companyuid 
         * @param {string} culture 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiCultureCompanyCompanyuidTemplatesGet(companyuid: string, culture: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Template>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiCultureCompanyCompanyuidTemplatesGet(companyuid, culture, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} culture 
         * @param {DeleteCompanyContactCommand} [deleteCompanyContactCommand] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiCultureCompanyContactsDelete(culture: string, deleteCompanyContactCommand?: DeleteCompanyContactCommand, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Company>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiCultureCompanyContactsDelete(culture, deleteCompanyContactCommand, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} culture 
         * @param {string} [data] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiCultureCompanyContactsPost(culture: string, data?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Company>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiCultureCompanyContactsPost(culture, data, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} culture 
         * @param {string} [data] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiCultureCompanyContactsPut(culture: string, data?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Company>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiCultureCompanyContactsPut(culture, data, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} culture 
         * @param {DeleteCompanyCommand} [deleteCompanyCommand] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiCultureCompanyDelete(culture: string, deleteCompanyCommand?: DeleteCompanyCommand, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Company>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiCultureCompanyDelete(culture, deleteCompanyCommand, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} culture 
         * @param {DeleteCompanyFacilityPhotoCommand} [deleteCompanyFacilityPhotoCommand] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiCultureCompanyFacilityPhotosDelete(culture: string, deleteCompanyFacilityPhotoCommand?: DeleteCompanyFacilityPhotoCommand, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Company>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiCultureCompanyFacilityPhotosDelete(culture, deleteCompanyFacilityPhotoCommand, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} culture 
         * @param {string} [data] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiCultureCompanyFacilityPhotosPost(culture: string, data?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Company>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiCultureCompanyFacilityPhotosPost(culture, data, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} culture 
         * @param {string} [data] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiCultureCompanyPost(culture: string, data?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Company>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiCultureCompanyPost(culture, data, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} culture 
         * @param {DeleteCompanyProductCommand} [deleteCompanyProductCommand] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiCultureCompanyProductsDelete(culture: string, deleteCompanyProductCommand?: DeleteCompanyProductCommand, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Company>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiCultureCompanyProductsDelete(culture, deleteCompanyProductCommand, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} culture 
         * @param {CreateCompanyProductCommand} [createCompanyProductCommand] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiCultureCompanyProductsPost(culture: string, createCompanyProductCommand?: CreateCompanyProductCommand, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Company>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiCultureCompanyProductsPost(culture, createCompanyProductCommand, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} culture 
         * @param {UpdateCompanyProductCommand} [updateCompanyProductCommand] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiCultureCompanyProductsPut(culture: string, updateCompanyProductCommand?: UpdateCompanyProductCommand, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Company>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiCultureCompanyProductsPut(culture, updateCompanyProductCommand, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} culture 
         * @param {string} [data] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiCultureCompanyPut(culture: string, data?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Company>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiCultureCompanyPut(culture, data, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * CompanyApi - factory interface
 * @export
 */
export const CompanyApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CompanyApiFp(configuration)
    return {
        /**
         * 
         * @param {string} culture 
         * @param {DeleteCompanyCertificateCommand} [deleteCompanyCertificateCommand] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCultureCompanyCertificatesDelete(culture: string, deleteCompanyCertificateCommand?: DeleteCompanyCertificateCommand, options?: any): AxiosPromise<Array<Company>> {
            return localVarFp.apiCultureCompanyCertificatesDelete(culture, deleteCompanyCertificateCommand, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} culture 
         * @param {string} [data] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCultureCompanyCertificatesPost(culture: string, data?: string, options?: any): AxiosPromise<Array<Company>> {
            return localVarFp.apiCultureCompanyCertificatesPost(culture, data, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} companyUid 
         * @param {string} culture 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCultureCompanyCompanyUidCertificatesGet(companyUid: string, culture: string, options?: any): AxiosPromise<void> {
            return localVarFp.apiCultureCompanyCompanyUidCertificatesGet(companyUid, culture, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} companyUid 
         * @param {string} culture 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCultureCompanyCompanyUidContactsGet(companyUid: string, culture: string, options?: any): AxiosPromise<void> {
            return localVarFp.apiCultureCompanyCompanyUidContactsGet(companyUid, culture, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} companyUid 
         * @param {string} culture 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCultureCompanyCompanyUidFacilityPhotosGet(companyUid: string, culture: string, options?: any): AxiosPromise<void> {
            return localVarFp.apiCultureCompanyCompanyUidFacilityPhotosGet(companyUid, culture, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} companyUid 
         * @param {string} culture 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCultureCompanyCompanyUidGet(companyUid: string, culture: string, options?: any): AxiosPromise<void> {
            return localVarFp.apiCultureCompanyCompanyUidGet(companyUid, culture, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} companyUid 
         * @param {string} culture 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCultureCompanyCompanyUidProductsGet(companyUid: string, culture: string, options?: any): AxiosPromise<void> {
            return localVarFp.apiCultureCompanyCompanyUidProductsGet(companyUid, culture, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} companyuid 
         * @param {string} culture 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCultureCompanyCompanyuidCustomersGet(companyuid: string, culture: string, options?: any): AxiosPromise<Array<Company>> {
            return localVarFp.apiCultureCompanyCompanyuidCustomersGet(companyuid, culture, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} companyuid 
         * @param {string} culture 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCultureCompanyCompanyuidSuppliersGet(companyuid: string, culture: string, options?: any): AxiosPromise<Array<Company>> {
            return localVarFp.apiCultureCompanyCompanyuidSuppliersGet(companyuid, culture, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} companyuid 
         * @param {string} culture 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCultureCompanyCompanyuidTemplatesGet(companyuid: string, culture: string, options?: any): AxiosPromise<Array<Template>> {
            return localVarFp.apiCultureCompanyCompanyuidTemplatesGet(companyuid, culture, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} culture 
         * @param {DeleteCompanyContactCommand} [deleteCompanyContactCommand] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCultureCompanyContactsDelete(culture: string, deleteCompanyContactCommand?: DeleteCompanyContactCommand, options?: any): AxiosPromise<Array<Company>> {
            return localVarFp.apiCultureCompanyContactsDelete(culture, deleteCompanyContactCommand, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} culture 
         * @param {string} [data] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCultureCompanyContactsPost(culture: string, data?: string, options?: any): AxiosPromise<Array<Company>> {
            return localVarFp.apiCultureCompanyContactsPost(culture, data, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} culture 
         * @param {string} [data] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCultureCompanyContactsPut(culture: string, data?: string, options?: any): AxiosPromise<Array<Company>> {
            return localVarFp.apiCultureCompanyContactsPut(culture, data, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} culture 
         * @param {DeleteCompanyCommand} [deleteCompanyCommand] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCultureCompanyDelete(culture: string, deleteCompanyCommand?: DeleteCompanyCommand, options?: any): AxiosPromise<Array<Company>> {
            return localVarFp.apiCultureCompanyDelete(culture, deleteCompanyCommand, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} culture 
         * @param {DeleteCompanyFacilityPhotoCommand} [deleteCompanyFacilityPhotoCommand] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCultureCompanyFacilityPhotosDelete(culture: string, deleteCompanyFacilityPhotoCommand?: DeleteCompanyFacilityPhotoCommand, options?: any): AxiosPromise<Array<Company>> {
            return localVarFp.apiCultureCompanyFacilityPhotosDelete(culture, deleteCompanyFacilityPhotoCommand, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} culture 
         * @param {string} [data] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCultureCompanyFacilityPhotosPost(culture: string, data?: string, options?: any): AxiosPromise<Array<Company>> {
            return localVarFp.apiCultureCompanyFacilityPhotosPost(culture, data, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} culture 
         * @param {string} [data] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCultureCompanyPost(culture: string, data?: string, options?: any): AxiosPromise<Array<Company>> {
            return localVarFp.apiCultureCompanyPost(culture, data, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} culture 
         * @param {DeleteCompanyProductCommand} [deleteCompanyProductCommand] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCultureCompanyProductsDelete(culture: string, deleteCompanyProductCommand?: DeleteCompanyProductCommand, options?: any): AxiosPromise<Array<Company>> {
            return localVarFp.apiCultureCompanyProductsDelete(culture, deleteCompanyProductCommand, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} culture 
         * @param {CreateCompanyProductCommand} [createCompanyProductCommand] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCultureCompanyProductsPost(culture: string, createCompanyProductCommand?: CreateCompanyProductCommand, options?: any): AxiosPromise<Array<Company>> {
            return localVarFp.apiCultureCompanyProductsPost(culture, createCompanyProductCommand, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} culture 
         * @param {UpdateCompanyProductCommand} [updateCompanyProductCommand] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCultureCompanyProductsPut(culture: string, updateCompanyProductCommand?: UpdateCompanyProductCommand, options?: any): AxiosPromise<Array<Company>> {
            return localVarFp.apiCultureCompanyProductsPut(culture, updateCompanyProductCommand, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} culture 
         * @param {string} [data] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCultureCompanyPut(culture: string, data?: string, options?: any): AxiosPromise<Array<Company>> {
            return localVarFp.apiCultureCompanyPut(culture, data, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * CompanyApi - object-oriented interface
 * @export
 * @class CompanyApi
 * @extends {BaseAPI}
 */
export class CompanyApi extends BaseAPI {
    /**
     * 
     * @param {string} culture 
     * @param {DeleteCompanyCertificateCommand} [deleteCompanyCertificateCommand] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CompanyApi
     */
    public apiCultureCompanyCertificatesDelete(culture: string, deleteCompanyCertificateCommand?: DeleteCompanyCertificateCommand, options?: any) {
        return CompanyApiFp(this.configuration).apiCultureCompanyCertificatesDelete(culture, deleteCompanyCertificateCommand, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} culture 
     * @param {string} [data] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CompanyApi
     */
    public apiCultureCompanyCertificatesPost(culture: string, data?: string, options?: any) {
        return CompanyApiFp(this.configuration).apiCultureCompanyCertificatesPost(culture, data, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} companyUid 
     * @param {string} culture 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CompanyApi
     */
    public apiCultureCompanyCompanyUidCertificatesGet(companyUid: string, culture: string, options?: any) {
        return CompanyApiFp(this.configuration).apiCultureCompanyCompanyUidCertificatesGet(companyUid, culture, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} companyUid 
     * @param {string} culture 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CompanyApi
     */
    public apiCultureCompanyCompanyUidContactsGet(companyUid: string, culture: string, options?: any) {
        return CompanyApiFp(this.configuration).apiCultureCompanyCompanyUidContactsGet(companyUid, culture, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} companyUid 
     * @param {string} culture 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CompanyApi
     */
    public apiCultureCompanyCompanyUidFacilityPhotosGet(companyUid: string, culture: string, options?: any) {
        return CompanyApiFp(this.configuration).apiCultureCompanyCompanyUidFacilityPhotosGet(companyUid, culture, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} companyUid 
     * @param {string} culture 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CompanyApi
     */
    public apiCultureCompanyCompanyUidGet(companyUid: string, culture: string, options?: any) {
        return CompanyApiFp(this.configuration).apiCultureCompanyCompanyUidGet(companyUid, culture, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} companyUid 
     * @param {string} culture 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CompanyApi
     */
    public apiCultureCompanyCompanyUidProductsGet(companyUid: string, culture: string, options?: any) {
        return CompanyApiFp(this.configuration).apiCultureCompanyCompanyUidProductsGet(companyUid, culture, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} companyuid 
     * @param {string} culture 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CompanyApi
     */
    public apiCultureCompanyCompanyuidCustomersGet(companyuid: string, culture: string, options?: any) {
        return CompanyApiFp(this.configuration).apiCultureCompanyCompanyuidCustomersGet(companyuid, culture, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} companyuid 
     * @param {string} culture 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CompanyApi
     */
    public apiCultureCompanyCompanyuidSuppliersGet(companyuid: string, culture: string, options?: any) {
        return CompanyApiFp(this.configuration).apiCultureCompanyCompanyuidSuppliersGet(companyuid, culture, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} companyuid 
     * @param {string} culture 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CompanyApi
     */
    public apiCultureCompanyCompanyuidTemplatesGet(companyuid: string, culture: string, options?: any) {
        return CompanyApiFp(this.configuration).apiCultureCompanyCompanyuidTemplatesGet(companyuid, culture, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} culture 
     * @param {DeleteCompanyContactCommand} [deleteCompanyContactCommand] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CompanyApi
     */
    public apiCultureCompanyContactsDelete(culture: string, deleteCompanyContactCommand?: DeleteCompanyContactCommand, options?: any) {
        return CompanyApiFp(this.configuration).apiCultureCompanyContactsDelete(culture, deleteCompanyContactCommand, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} culture 
     * @param {string} [data] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CompanyApi
     */
    public apiCultureCompanyContactsPost(culture: string, data?: string, options?: any) {
        return CompanyApiFp(this.configuration).apiCultureCompanyContactsPost(culture, data, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} culture 
     * @param {string} [data] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CompanyApi
     */
    public apiCultureCompanyContactsPut(culture: string, data?: string, options?: any) {
        return CompanyApiFp(this.configuration).apiCultureCompanyContactsPut(culture, data, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} culture 
     * @param {DeleteCompanyCommand} [deleteCompanyCommand] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CompanyApi
     */
    public apiCultureCompanyDelete(culture: string, deleteCompanyCommand?: DeleteCompanyCommand, options?: any) {
        return CompanyApiFp(this.configuration).apiCultureCompanyDelete(culture, deleteCompanyCommand, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} culture 
     * @param {DeleteCompanyFacilityPhotoCommand} [deleteCompanyFacilityPhotoCommand] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CompanyApi
     */
    public apiCultureCompanyFacilityPhotosDelete(culture: string, deleteCompanyFacilityPhotoCommand?: DeleteCompanyFacilityPhotoCommand, options?: any) {
        return CompanyApiFp(this.configuration).apiCultureCompanyFacilityPhotosDelete(culture, deleteCompanyFacilityPhotoCommand, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} culture 
     * @param {string} [data] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CompanyApi
     */
    public apiCultureCompanyFacilityPhotosPost(culture: string, data?: string, options?: any) {
        return CompanyApiFp(this.configuration).apiCultureCompanyFacilityPhotosPost(culture, data, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} culture 
     * @param {string} [data] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CompanyApi
     */
    public apiCultureCompanyPost(culture: string, data?: string, options?: any) {
        return CompanyApiFp(this.configuration).apiCultureCompanyPost(culture, data, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} culture 
     * @param {DeleteCompanyProductCommand} [deleteCompanyProductCommand] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CompanyApi
     */
    public apiCultureCompanyProductsDelete(culture: string, deleteCompanyProductCommand?: DeleteCompanyProductCommand, options?: any) {
        return CompanyApiFp(this.configuration).apiCultureCompanyProductsDelete(culture, deleteCompanyProductCommand, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} culture 
     * @param {CreateCompanyProductCommand} [createCompanyProductCommand] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CompanyApi
     */
    public apiCultureCompanyProductsPost(culture: string, createCompanyProductCommand?: CreateCompanyProductCommand, options?: any) {
        return CompanyApiFp(this.configuration).apiCultureCompanyProductsPost(culture, createCompanyProductCommand, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} culture 
     * @param {UpdateCompanyProductCommand} [updateCompanyProductCommand] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CompanyApi
     */
    public apiCultureCompanyProductsPut(culture: string, updateCompanyProductCommand?: UpdateCompanyProductCommand, options?: any) {
        return CompanyApiFp(this.configuration).apiCultureCompanyProductsPut(culture, updateCompanyProductCommand, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} culture 
     * @param {string} [data] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CompanyApi
     */
    public apiCultureCompanyPut(culture: string, data?: string, options?: any) {
        return CompanyApiFp(this.configuration).apiCultureCompanyPut(culture, data, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * CustomizationApi - axios parameter creator
 * @export
 */
export const CustomizationApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} batchUid 
         * @param {string} ip 
         * @param {string} culture 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCultureCustomizationBatchDataBatchUidIpGet: async (batchUid: string, ip: string, culture: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'batchUid' is not null or undefined
            assertParamExists('apiCultureCustomizationBatchDataBatchUidIpGet', 'batchUid', batchUid)
            // verify required parameter 'ip' is not null or undefined
            assertParamExists('apiCultureCustomizationBatchDataBatchUidIpGet', 'ip', ip)
            // verify required parameter 'culture' is not null or undefined
            assertParamExists('apiCultureCustomizationBatchDataBatchUidIpGet', 'culture', culture)
            const localVarPath = `/api/{culture}/Customization/batchData/{batchUid}/{ip}`
                .replace(`{${"batchUid"}}`, encodeURIComponent(String(batchUid)))
                .replace(`{${"ip"}}`, encodeURIComponent(String(ip)))
                .replace(`{${"culture"}}`, encodeURIComponent(String(culture)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} companyUid 
         * @param {string} templateUid 
         * @param {string} culture 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCultureCustomizationBatchDataPreviewCompanyUidTemplateUidGet: async (companyUid: string, templateUid: string, culture: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyUid' is not null or undefined
            assertParamExists('apiCultureCustomizationBatchDataPreviewCompanyUidTemplateUidGet', 'companyUid', companyUid)
            // verify required parameter 'templateUid' is not null or undefined
            assertParamExists('apiCultureCustomizationBatchDataPreviewCompanyUidTemplateUidGet', 'templateUid', templateUid)
            // verify required parameter 'culture' is not null or undefined
            assertParamExists('apiCultureCustomizationBatchDataPreviewCompanyUidTemplateUidGet', 'culture', culture)
            const localVarPath = `/api/{culture}/Customization/batchData/preview/{companyUid}/{templateUid}`
                .replace(`{${"companyUid"}}`, encodeURIComponent(String(companyUid)))
                .replace(`{${"templateUid"}}`, encodeURIComponent(String(templateUid)))
                .replace(`{${"culture"}}`, encodeURIComponent(String(culture)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} companyUid 
         * @param {string} templateUid 
         * @param {string} productUid 
         * @param {string} culture 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCultureCustomizationCompanyUidFieldsTemplateUidProductUidGet: async (companyUid: string, templateUid: string, productUid: string, culture: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyUid' is not null or undefined
            assertParamExists('apiCultureCustomizationCompanyUidFieldsTemplateUidProductUidGet', 'companyUid', companyUid)
            // verify required parameter 'templateUid' is not null or undefined
            assertParamExists('apiCultureCustomizationCompanyUidFieldsTemplateUidProductUidGet', 'templateUid', templateUid)
            // verify required parameter 'productUid' is not null or undefined
            assertParamExists('apiCultureCustomizationCompanyUidFieldsTemplateUidProductUidGet', 'productUid', productUid)
            // verify required parameter 'culture' is not null or undefined
            assertParamExists('apiCultureCustomizationCompanyUidFieldsTemplateUidProductUidGet', 'culture', culture)
            const localVarPath = `/api/{culture}/Customization/{companyUid}/fields/{templateUid}/{productUid}`
                .replace(`{${"companyUid"}}`, encodeURIComponent(String(companyUid)))
                .replace(`{${"templateUid"}}`, encodeURIComponent(String(templateUid)))
                .replace(`{${"productUid"}}`, encodeURIComponent(String(productUid)))
                .replace(`{${"culture"}}`, encodeURIComponent(String(culture)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} companyUid 
         * @param {string} productUid 
         * @param {string} culture 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCultureCustomizationCompanyUidProductUidGet: async (companyUid: string, productUid: string, culture: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyUid' is not null or undefined
            assertParamExists('apiCultureCustomizationCompanyUidProductUidGet', 'companyUid', companyUid)
            // verify required parameter 'productUid' is not null or undefined
            assertParamExists('apiCultureCustomizationCompanyUidProductUidGet', 'productUid', productUid)
            // verify required parameter 'culture' is not null or undefined
            assertParamExists('apiCultureCustomizationCompanyUidProductUidGet', 'culture', culture)
            const localVarPath = `/api/{culture}/Customization/{companyUid}/{productUid}`
                .replace(`{${"companyUid"}}`, encodeURIComponent(String(companyUid)))
                .replace(`{${"productUid"}}`, encodeURIComponent(String(productUid)))
                .replace(`{${"culture"}}`, encodeURIComponent(String(culture)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} companyUid 
         * @param {string} templateUid 
         * @param {string} productUid 
         * @param {string} culture 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCultureCustomizationCompanyUidPropertiesTemplateUidProductUidGet: async (companyUid: string, templateUid: string, productUid: string, culture: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyUid' is not null or undefined
            assertParamExists('apiCultureCustomizationCompanyUidPropertiesTemplateUidProductUidGet', 'companyUid', companyUid)
            // verify required parameter 'templateUid' is not null or undefined
            assertParamExists('apiCultureCustomizationCompanyUidPropertiesTemplateUidProductUidGet', 'templateUid', templateUid)
            // verify required parameter 'productUid' is not null or undefined
            assertParamExists('apiCultureCustomizationCompanyUidPropertiesTemplateUidProductUidGet', 'productUid', productUid)
            // verify required parameter 'culture' is not null or undefined
            assertParamExists('apiCultureCustomizationCompanyUidPropertiesTemplateUidProductUidGet', 'culture', culture)
            const localVarPath = `/api/{culture}/Customization/{companyUid}/properties/{templateUid}/{productUid}`
                .replace(`{${"companyUid"}}`, encodeURIComponent(String(companyUid)))
                .replace(`{${"templateUid"}}`, encodeURIComponent(String(templateUid)))
                .replace(`{${"productUid"}}`, encodeURIComponent(String(productUid)))
                .replace(`{${"culture"}}`, encodeURIComponent(String(culture)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} culture 
         * @param {CreateCustomizationCommand} [createCustomizationCommand] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCultureCustomizationPost: async (culture: string, createCustomizationCommand?: CreateCustomizationCommand, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'culture' is not null or undefined
            assertParamExists('apiCultureCustomizationPost', 'culture', culture)
            const localVarPath = `/api/{culture}/Customization`
                .replace(`{${"culture"}}`, encodeURIComponent(String(culture)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createCustomizationCommand, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} culture 
         * @param {ViewQrcodeModel} [viewQrcodeModel] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCultureCustomizationViewPost: async (culture: string, viewQrcodeModel?: ViewQrcodeModel, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'culture' is not null or undefined
            assertParamExists('apiCultureCustomizationViewPost', 'culture', culture)
            const localVarPath = `/api/{culture}/Customization/view`
                .replace(`{${"culture"}}`, encodeURIComponent(String(culture)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(viewQrcodeModel, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CustomizationApi - functional programming interface
 * @export
 */
export const CustomizationApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CustomizationApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {string} batchUid 
         * @param {string} ip 
         * @param {string} culture 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiCultureCustomizationBatchDataBatchUidIpGet(batchUid: string, ip: string, culture: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<QrCodeItem>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiCultureCustomizationBatchDataBatchUidIpGet(batchUid, ip, culture, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} companyUid 
         * @param {string} templateUid 
         * @param {string} culture 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiCultureCustomizationBatchDataPreviewCompanyUidTemplateUidGet(companyUid: string, templateUid: string, culture: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<QrCodeItem>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiCultureCustomizationBatchDataPreviewCompanyUidTemplateUidGet(companyUid, templateUid, culture, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} companyUid 
         * @param {string} templateUid 
         * @param {string} productUid 
         * @param {string} culture 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiCultureCustomizationCompanyUidFieldsTemplateUidProductUidGet(companyUid: string, templateUid: string, productUid: string, culture: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<CustomizationField>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiCultureCustomizationCompanyUidFieldsTemplateUidProductUidGet(companyUid, templateUid, productUid, culture, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} companyUid 
         * @param {string} productUid 
         * @param {string} culture 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiCultureCustomizationCompanyUidProductUidGet(companyUid: string, productUid: string, culture: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<CustomizationProperty>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiCultureCustomizationCompanyUidProductUidGet(companyUid, productUid, culture, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} companyUid 
         * @param {string} templateUid 
         * @param {string} productUid 
         * @param {string} culture 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiCultureCustomizationCompanyUidPropertiesTemplateUidProductUidGet(companyUid: string, templateUid: string, productUid: string, culture: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<CustomizationProperty>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiCultureCustomizationCompanyUidPropertiesTemplateUidProductUidGet(companyUid, templateUid, productUid, culture, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} culture 
         * @param {CreateCustomizationCommand} [createCustomizationCommand] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiCultureCustomizationPost(culture: string, createCustomizationCommand?: CreateCustomizationCommand, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateCustomizationCommand>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiCultureCustomizationPost(culture, createCustomizationCommand, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} culture 
         * @param {ViewQrcodeModel} [viewQrcodeModel] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiCultureCustomizationViewPost(culture: string, viewQrcodeModel?: ViewQrcodeModel, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiCultureCustomizationViewPost(culture, viewQrcodeModel, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * CustomizationApi - factory interface
 * @export
 */
export const CustomizationApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CustomizationApiFp(configuration)
    return {
        /**
         * 
         * @param {string} batchUid 
         * @param {string} ip 
         * @param {string} culture 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCultureCustomizationBatchDataBatchUidIpGet(batchUid: string, ip: string, culture: string, options?: any): AxiosPromise<Array<QrCodeItem>> {
            return localVarFp.apiCultureCustomizationBatchDataBatchUidIpGet(batchUid, ip, culture, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} companyUid 
         * @param {string} templateUid 
         * @param {string} culture 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCultureCustomizationBatchDataPreviewCompanyUidTemplateUidGet(companyUid: string, templateUid: string, culture: string, options?: any): AxiosPromise<Array<QrCodeItem>> {
            return localVarFp.apiCultureCustomizationBatchDataPreviewCompanyUidTemplateUidGet(companyUid, templateUid, culture, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} companyUid 
         * @param {string} templateUid 
         * @param {string} productUid 
         * @param {string} culture 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCultureCustomizationCompanyUidFieldsTemplateUidProductUidGet(companyUid: string, templateUid: string, productUid: string, culture: string, options?: any): AxiosPromise<Array<CustomizationField>> {
            return localVarFp.apiCultureCustomizationCompanyUidFieldsTemplateUidProductUidGet(companyUid, templateUid, productUid, culture, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} companyUid 
         * @param {string} productUid 
         * @param {string} culture 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCultureCustomizationCompanyUidProductUidGet(companyUid: string, productUid: string, culture: string, options?: any): AxiosPromise<Array<CustomizationProperty>> {
            return localVarFp.apiCultureCustomizationCompanyUidProductUidGet(companyUid, productUid, culture, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} companyUid 
         * @param {string} templateUid 
         * @param {string} productUid 
         * @param {string} culture 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCultureCustomizationCompanyUidPropertiesTemplateUidProductUidGet(companyUid: string, templateUid: string, productUid: string, culture: string, options?: any): AxiosPromise<Array<CustomizationProperty>> {
            return localVarFp.apiCultureCustomizationCompanyUidPropertiesTemplateUidProductUidGet(companyUid, templateUid, productUid, culture, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} culture 
         * @param {CreateCustomizationCommand} [createCustomizationCommand] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCultureCustomizationPost(culture: string, createCustomizationCommand?: CreateCustomizationCommand, options?: any): AxiosPromise<CreateCustomizationCommand> {
            return localVarFp.apiCultureCustomizationPost(culture, createCustomizationCommand, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} culture 
         * @param {ViewQrcodeModel} [viewQrcodeModel] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCultureCustomizationViewPost(culture: string, viewQrcodeModel?: ViewQrcodeModel, options?: any): AxiosPromise<void> {
            return localVarFp.apiCultureCustomizationViewPost(culture, viewQrcodeModel, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * CustomizationApi - object-oriented interface
 * @export
 * @class CustomizationApi
 * @extends {BaseAPI}
 */
export class CustomizationApi extends BaseAPI {
    /**
     * 
     * @param {string} batchUid 
     * @param {string} ip 
     * @param {string} culture 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomizationApi
     */
    public apiCultureCustomizationBatchDataBatchUidIpGet(batchUid: string, ip: string, culture: string, options?: any) {
        return CustomizationApiFp(this.configuration).apiCultureCustomizationBatchDataBatchUidIpGet(batchUid, ip, culture, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} companyUid 
     * @param {string} templateUid 
     * @param {string} culture 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomizationApi
     */
    public apiCultureCustomizationBatchDataPreviewCompanyUidTemplateUidGet(companyUid: string, templateUid: string, culture: string, options?: any) {
        return CustomizationApiFp(this.configuration).apiCultureCustomizationBatchDataPreviewCompanyUidTemplateUidGet(companyUid, templateUid, culture, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} companyUid 
     * @param {string} templateUid 
     * @param {string} productUid 
     * @param {string} culture 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomizationApi
     */
    public apiCultureCustomizationCompanyUidFieldsTemplateUidProductUidGet(companyUid: string, templateUid: string, productUid: string, culture: string, options?: any) {
        return CustomizationApiFp(this.configuration).apiCultureCustomizationCompanyUidFieldsTemplateUidProductUidGet(companyUid, templateUid, productUid, culture, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} companyUid 
     * @param {string} productUid 
     * @param {string} culture 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomizationApi
     */
    public apiCultureCustomizationCompanyUidProductUidGet(companyUid: string, productUid: string, culture: string, options?: any) {
        return CustomizationApiFp(this.configuration).apiCultureCustomizationCompanyUidProductUidGet(companyUid, productUid, culture, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} companyUid 
     * @param {string} templateUid 
     * @param {string} productUid 
     * @param {string} culture 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomizationApi
     */
    public apiCultureCustomizationCompanyUidPropertiesTemplateUidProductUidGet(companyUid: string, templateUid: string, productUid: string, culture: string, options?: any) {
        return CustomizationApiFp(this.configuration).apiCultureCustomizationCompanyUidPropertiesTemplateUidProductUidGet(companyUid, templateUid, productUid, culture, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} culture 
     * @param {CreateCustomizationCommand} [createCustomizationCommand] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomizationApi
     */
    public apiCultureCustomizationPost(culture: string, createCustomizationCommand?: CreateCustomizationCommand, options?: any) {
        return CustomizationApiFp(this.configuration).apiCultureCustomizationPost(culture, createCustomizationCommand, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} culture 
     * @param {ViewQrcodeModel} [viewQrcodeModel] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomizationApi
     */
    public apiCultureCustomizationViewPost(culture: string, viewQrcodeModel?: ViewQrcodeModel, options?: any) {
        return CustomizationApiFp(this.configuration).apiCultureCustomizationViewPost(culture, viewQrcodeModel, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * DataApi - axios parameter creator
 * @export
 */
export const DataApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} culture 
         * @param {DeleteDataCommand} [deleteDataCommand] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCultureDataDelete: async (culture: string, deleteDataCommand?: DeleteDataCommand, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'culture' is not null or undefined
            assertParamExists('apiCultureDataDelete', 'culture', culture)
            const localVarPath = `/api/{culture}/Data`
                .replace(`{${"culture"}}`, encodeURIComponent(String(culture)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(deleteDataCommand, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} culture 
         * @param {string} [data] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCultureDataPost: async (culture: string, data?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'culture' is not null or undefined
            assertParamExists('apiCultureDataPost', 'culture', culture)
            const localVarPath = `/api/{culture}/Data`
                .replace(`{${"culture"}}`, encodeURIComponent(String(culture)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


            if (data !== undefined) { 
                localVarFormParams.append('data', data as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} culture 
         * @param {string} [data] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCultureDataPut: async (culture: string, data?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'culture' is not null or undefined
            assertParamExists('apiCultureDataPut', 'culture', culture)
            const localVarPath = `/api/{culture}/Data`
                .replace(`{${"culture"}}`, encodeURIComponent(String(culture)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


            if (data !== undefined) { 
                localVarFormParams.append('data', data as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DataApi - functional programming interface
 * @export
 */
export const DataApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DataApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {string} culture 
         * @param {DeleteDataCommand} [deleteDataCommand] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiCultureDataDelete(culture: string, deleteDataCommand?: DeleteDataCommand, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeleteDataCommand>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiCultureDataDelete(culture, deleteDataCommand, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} culture 
         * @param {string} [data] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiCultureDataPost(culture: string, data?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateDataCommand>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiCultureDataPost(culture, data, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} culture 
         * @param {string} [data] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiCultureDataPut(culture: string, data?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UpdateDataCommand>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiCultureDataPut(culture, data, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * DataApi - factory interface
 * @export
 */
export const DataApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DataApiFp(configuration)
    return {
        /**
         * 
         * @param {string} culture 
         * @param {DeleteDataCommand} [deleteDataCommand] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCultureDataDelete(culture: string, deleteDataCommand?: DeleteDataCommand, options?: any): AxiosPromise<DeleteDataCommand> {
            return localVarFp.apiCultureDataDelete(culture, deleteDataCommand, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} culture 
         * @param {string} [data] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCultureDataPost(culture: string, data?: string, options?: any): AxiosPromise<CreateDataCommand> {
            return localVarFp.apiCultureDataPost(culture, data, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} culture 
         * @param {string} [data] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCultureDataPut(culture: string, data?: string, options?: any): AxiosPromise<UpdateDataCommand> {
            return localVarFp.apiCultureDataPut(culture, data, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DataApi - object-oriented interface
 * @export
 * @class DataApi
 * @extends {BaseAPI}
 */
export class DataApi extends BaseAPI {
    /**
     * 
     * @param {string} culture 
     * @param {DeleteDataCommand} [deleteDataCommand] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DataApi
     */
    public apiCultureDataDelete(culture: string, deleteDataCommand?: DeleteDataCommand, options?: any) {
        return DataApiFp(this.configuration).apiCultureDataDelete(culture, deleteDataCommand, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} culture 
     * @param {string} [data] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DataApi
     */
    public apiCultureDataPost(culture: string, data?: string, options?: any) {
        return DataApiFp(this.configuration).apiCultureDataPost(culture, data, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} culture 
     * @param {string} [data] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DataApi
     */
    public apiCultureDataPut(culture: string, data?: string, options?: any) {
        return DataApiFp(this.configuration).apiCultureDataPut(culture, data, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * EnvironmentDataApi - axios parameter creator
 * @export
 */
export const EnvironmentDataApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} culture 
         * @param {DeleteEnvironmentDataCommand} [deleteEnvironmentDataCommand] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCultureEnvironmentDataDelete: async (culture: string, deleteEnvironmentDataCommand?: DeleteEnvironmentDataCommand, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'culture' is not null or undefined
            assertParamExists('apiCultureEnvironmentDataDelete', 'culture', culture)
            const localVarPath = `/api/{culture}/EnvironmentData`
                .replace(`{${"culture"}}`, encodeURIComponent(String(culture)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(deleteEnvironmentDataCommand, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} culture 
         * @param {CreateEnvironmentDataCommand} [createEnvironmentDataCommand] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCultureEnvironmentDataPost: async (culture: string, createEnvironmentDataCommand?: CreateEnvironmentDataCommand, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'culture' is not null or undefined
            assertParamExists('apiCultureEnvironmentDataPost', 'culture', culture)
            const localVarPath = `/api/{culture}/EnvironmentData`
                .replace(`{${"culture"}}`, encodeURIComponent(String(culture)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createEnvironmentDataCommand, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} culture 
         * @param {UpdateEnvironmentDataCommand} [updateEnvironmentDataCommand] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCultureEnvironmentDataPut: async (culture: string, updateEnvironmentDataCommand?: UpdateEnvironmentDataCommand, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'culture' is not null or undefined
            assertParamExists('apiCultureEnvironmentDataPut', 'culture', culture)
            const localVarPath = `/api/{culture}/EnvironmentData`
                .replace(`{${"culture"}}`, encodeURIComponent(String(culture)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateEnvironmentDataCommand, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * EnvironmentDataApi - functional programming interface
 * @export
 */
export const EnvironmentDataApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = EnvironmentDataApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {string} culture 
         * @param {DeleteEnvironmentDataCommand} [deleteEnvironmentDataCommand] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiCultureEnvironmentDataDelete(culture: string, deleteEnvironmentDataCommand?: DeleteEnvironmentDataCommand, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeleteDataCommand>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiCultureEnvironmentDataDelete(culture, deleteEnvironmentDataCommand, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} culture 
         * @param {CreateEnvironmentDataCommand} [createEnvironmentDataCommand] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiCultureEnvironmentDataPost(culture: string, createEnvironmentDataCommand?: CreateEnvironmentDataCommand, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateBatchCommand>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiCultureEnvironmentDataPost(culture, createEnvironmentDataCommand, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} culture 
         * @param {UpdateEnvironmentDataCommand} [updateEnvironmentDataCommand] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiCultureEnvironmentDataPut(culture: string, updateEnvironmentDataCommand?: UpdateEnvironmentDataCommand, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateBatchCommand>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiCultureEnvironmentDataPut(culture, updateEnvironmentDataCommand, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * EnvironmentDataApi - factory interface
 * @export
 */
export const EnvironmentDataApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = EnvironmentDataApiFp(configuration)
    return {
        /**
         * 
         * @param {string} culture 
         * @param {DeleteEnvironmentDataCommand} [deleteEnvironmentDataCommand] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCultureEnvironmentDataDelete(culture: string, deleteEnvironmentDataCommand?: DeleteEnvironmentDataCommand, options?: any): AxiosPromise<DeleteDataCommand> {
            return localVarFp.apiCultureEnvironmentDataDelete(culture, deleteEnvironmentDataCommand, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} culture 
         * @param {CreateEnvironmentDataCommand} [createEnvironmentDataCommand] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCultureEnvironmentDataPost(culture: string, createEnvironmentDataCommand?: CreateEnvironmentDataCommand, options?: any): AxiosPromise<CreateBatchCommand> {
            return localVarFp.apiCultureEnvironmentDataPost(culture, createEnvironmentDataCommand, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} culture 
         * @param {UpdateEnvironmentDataCommand} [updateEnvironmentDataCommand] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCultureEnvironmentDataPut(culture: string, updateEnvironmentDataCommand?: UpdateEnvironmentDataCommand, options?: any): AxiosPromise<CreateBatchCommand> {
            return localVarFp.apiCultureEnvironmentDataPut(culture, updateEnvironmentDataCommand, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * EnvironmentDataApi - object-oriented interface
 * @export
 * @class EnvironmentDataApi
 * @extends {BaseAPI}
 */
export class EnvironmentDataApi extends BaseAPI {
    /**
     * 
     * @param {string} culture 
     * @param {DeleteEnvironmentDataCommand} [deleteEnvironmentDataCommand] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EnvironmentDataApi
     */
    public apiCultureEnvironmentDataDelete(culture: string, deleteEnvironmentDataCommand?: DeleteEnvironmentDataCommand, options?: any) {
        return EnvironmentDataApiFp(this.configuration).apiCultureEnvironmentDataDelete(culture, deleteEnvironmentDataCommand, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} culture 
     * @param {CreateEnvironmentDataCommand} [createEnvironmentDataCommand] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EnvironmentDataApi
     */
    public apiCultureEnvironmentDataPost(culture: string, createEnvironmentDataCommand?: CreateEnvironmentDataCommand, options?: any) {
        return EnvironmentDataApiFp(this.configuration).apiCultureEnvironmentDataPost(culture, createEnvironmentDataCommand, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} culture 
     * @param {UpdateEnvironmentDataCommand} [updateEnvironmentDataCommand] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EnvironmentDataApi
     */
    public apiCultureEnvironmentDataPut(culture: string, updateEnvironmentDataCommand?: UpdateEnvironmentDataCommand, options?: any) {
        return EnvironmentDataApiFp(this.configuration).apiCultureEnvironmentDataPut(culture, updateEnvironmentDataCommand, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * HealthCheckApi - axios parameter creator
 * @export
 */
export const HealthCheckApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiHealthCheckGet: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/HealthCheck`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * HealthCheckApi - functional programming interface
 * @export
 */
export const HealthCheckApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = HealthCheckApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiHealthCheckGet(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiHealthCheckGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * HealthCheckApi - factory interface
 * @export
 */
export const HealthCheckApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = HealthCheckApiFp(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiHealthCheckGet(options?: any): AxiosPromise<void> {
            return localVarFp.apiHealthCheckGet(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * HealthCheckApi - object-oriented interface
 * @export
 * @class HealthCheckApi
 * @extends {BaseAPI}
 */
export class HealthCheckApi extends BaseAPI {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HealthCheckApi
     */
    public apiHealthCheckGet(options?: any) {
        return HealthCheckApiFp(this.configuration).apiHealthCheckGet(options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * MenuApi - axios parameter creator
 * @export
 */
export const MenuApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} culture 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCultureMenuGet: async (culture: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'culture' is not null or undefined
            assertParamExists('apiCultureMenuGet', 'culture', culture)
            const localVarPath = `/api/{culture}/Menu`
                .replace(`{${"culture"}}`, encodeURIComponent(String(culture)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} culture 
         * @param {MenuItem} [menuItem] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCultureMenuPost: async (culture: string, menuItem?: MenuItem, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'culture' is not null or undefined
            assertParamExists('apiCultureMenuPost', 'culture', culture)
            const localVarPath = `/api/{culture}/Menu`
                .replace(`{${"culture"}}`, encodeURIComponent(String(culture)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(menuItem, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} culture 
         * @param {string} [uid] 
         * @param {MenuItem} [menuItem] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCultureMenuPut: async (culture: string, uid?: string, menuItem?: MenuItem, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'culture' is not null or undefined
            assertParamExists('apiCultureMenuPut', 'culture', culture)
            const localVarPath = `/api/{culture}/Menu`
                .replace(`{${"culture"}}`, encodeURIComponent(String(culture)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (uid !== undefined) {
                localVarQueryParameter['uid'] = uid;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(menuItem, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} uid 
         * @param {string} culture 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCultureMenuUidGet: async (uid: string, culture: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'uid' is not null or undefined
            assertParamExists('apiCultureMenuUidGet', 'uid', uid)
            // verify required parameter 'culture' is not null or undefined
            assertParamExists('apiCultureMenuUidGet', 'culture', culture)
            const localVarPath = `/api/{culture}/Menu/{uid}`
                .replace(`{${"uid"}}`, encodeURIComponent(String(uid)))
                .replace(`{${"culture"}}`, encodeURIComponent(String(culture)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * MenuApi - functional programming interface
 * @export
 */
export const MenuApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = MenuApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {string} culture 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiCultureMenuGet(culture: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiCultureMenuGet(culture, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} culture 
         * @param {MenuItem} [menuItem] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiCultureMenuPost(culture: string, menuItem?: MenuItem, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiCultureMenuPost(culture, menuItem, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} culture 
         * @param {string} [uid] 
         * @param {MenuItem} [menuItem] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiCultureMenuPut(culture: string, uid?: string, menuItem?: MenuItem, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiCultureMenuPut(culture, uid, menuItem, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} uid 
         * @param {string} culture 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiCultureMenuUidGet(uid: string, culture: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiCultureMenuUidGet(uid, culture, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * MenuApi - factory interface
 * @export
 */
export const MenuApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = MenuApiFp(configuration)
    return {
        /**
         * 
         * @param {string} culture 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCultureMenuGet(culture: string, options?: any): AxiosPromise<void> {
            return localVarFp.apiCultureMenuGet(culture, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} culture 
         * @param {MenuItem} [menuItem] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCultureMenuPost(culture: string, menuItem?: MenuItem, options?: any): AxiosPromise<void> {
            return localVarFp.apiCultureMenuPost(culture, menuItem, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} culture 
         * @param {string} [uid] 
         * @param {MenuItem} [menuItem] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCultureMenuPut(culture: string, uid?: string, menuItem?: MenuItem, options?: any): AxiosPromise<void> {
            return localVarFp.apiCultureMenuPut(culture, uid, menuItem, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} uid 
         * @param {string} culture 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCultureMenuUidGet(uid: string, culture: string, options?: any): AxiosPromise<void> {
            return localVarFp.apiCultureMenuUidGet(uid, culture, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * MenuApi - object-oriented interface
 * @export
 * @class MenuApi
 * @extends {BaseAPI}
 */
export class MenuApi extends BaseAPI {
    /**
     * 
     * @param {string} culture 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MenuApi
     */
    public apiCultureMenuGet(culture: string, options?: any) {
        return MenuApiFp(this.configuration).apiCultureMenuGet(culture, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} culture 
     * @param {MenuItem} [menuItem] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MenuApi
     */
    public apiCultureMenuPost(culture: string, menuItem?: MenuItem, options?: any) {
        return MenuApiFp(this.configuration).apiCultureMenuPost(culture, menuItem, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} culture 
     * @param {string} [uid] 
     * @param {MenuItem} [menuItem] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MenuApi
     */
    public apiCultureMenuPut(culture: string, uid?: string, menuItem?: MenuItem, options?: any) {
        return MenuApiFp(this.configuration).apiCultureMenuPut(culture, uid, menuItem, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} uid 
     * @param {string} culture 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MenuApi
     */
    public apiCultureMenuUidGet(uid: string, culture: string, options?: any) {
        return MenuApiFp(this.configuration).apiCultureMenuUidGet(uid, culture, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * ProductApi - axios parameter creator
 * @export
 */
export const ProductApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} culture 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCultureProductGet: async (culture: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'culture' is not null or undefined
            assertParamExists('apiCultureProductGet', 'culture', culture)
            const localVarPath = `/api/{culture}/Product`
                .replace(`{${"culture"}}`, encodeURIComponent(String(culture)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} supplierUid 
         * @param {string} culture 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCultureProductSupplierUidGet: async (supplierUid: string, culture: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'supplierUid' is not null or undefined
            assertParamExists('apiCultureProductSupplierUidGet', 'supplierUid', supplierUid)
            // verify required parameter 'culture' is not null or undefined
            assertParamExists('apiCultureProductSupplierUidGet', 'culture', culture)
            const localVarPath = `/api/{culture}/Product/{supplierUid}`
                .replace(`{${"supplierUid"}}`, encodeURIComponent(String(supplierUid)))
                .replace(`{${"culture"}}`, encodeURIComponent(String(culture)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ProductApi - functional programming interface
 * @export
 */
export const ProductApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ProductApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {string} culture 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiCultureProductGet(culture: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Product>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiCultureProductGet(culture, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} supplierUid 
         * @param {string} culture 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiCultureProductSupplierUidGet(supplierUid: string, culture: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Product>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiCultureProductSupplierUidGet(supplierUid, culture, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ProductApi - factory interface
 * @export
 */
export const ProductApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ProductApiFp(configuration)
    return {
        /**
         * 
         * @param {string} culture 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCultureProductGet(culture: string, options?: any): AxiosPromise<Array<Product>> {
            return localVarFp.apiCultureProductGet(culture, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} supplierUid 
         * @param {string} culture 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCultureProductSupplierUidGet(supplierUid: string, culture: string, options?: any): AxiosPromise<Array<Product>> {
            return localVarFp.apiCultureProductSupplierUidGet(supplierUid, culture, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ProductApi - object-oriented interface
 * @export
 * @class ProductApi
 * @extends {BaseAPI}
 */
export class ProductApi extends BaseAPI {
    /**
     * 
     * @param {string} culture 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductApi
     */
    public apiCultureProductGet(culture: string, options?: any) {
        return ProductApiFp(this.configuration).apiCultureProductGet(culture, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} supplierUid 
     * @param {string} culture 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductApi
     */
    public apiCultureProductSupplierUidGet(supplierUid: string, culture: string, options?: any) {
        return ProductApiFp(this.configuration).apiCultureProductSupplierUidGet(supplierUid, culture, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * ProductionApi - axios parameter creator
 * @export
 */
export const ProductionApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} companyUid 
         * @param {string} productionUid 
         * @param {string} culture 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCultureProductionCompanyUidProductionProductionUidGet: async (companyUid: string, productionUid: string, culture: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyUid' is not null or undefined
            assertParamExists('apiCultureProductionCompanyUidProductionProductionUidGet', 'companyUid', companyUid)
            // verify required parameter 'productionUid' is not null or undefined
            assertParamExists('apiCultureProductionCompanyUidProductionProductionUidGet', 'productionUid', productionUid)
            // verify required parameter 'culture' is not null or undefined
            assertParamExists('apiCultureProductionCompanyUidProductionProductionUidGet', 'culture', culture)
            const localVarPath = `/api/{culture}/Production/{companyUid}/production/{productionUid}`
                .replace(`{${"companyUid"}}`, encodeURIComponent(String(companyUid)))
                .replace(`{${"productionUid"}}`, encodeURIComponent(String(productionUid)))
                .replace(`{${"culture"}}`, encodeURIComponent(String(culture)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} companyUid 
         * @param {string} supplierUid 
         * @param {string} culture 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCultureProductionCompanyUidSupplierUidGet: async (companyUid: string, supplierUid: string, culture: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyUid' is not null or undefined
            assertParamExists('apiCultureProductionCompanyUidSupplierUidGet', 'companyUid', companyUid)
            // verify required parameter 'supplierUid' is not null or undefined
            assertParamExists('apiCultureProductionCompanyUidSupplierUidGet', 'supplierUid', supplierUid)
            // verify required parameter 'culture' is not null or undefined
            assertParamExists('apiCultureProductionCompanyUidSupplierUidGet', 'culture', culture)
            const localVarPath = `/api/{culture}/Production/{companyUid}/{supplierUid}`
                .replace(`{${"companyUid"}}`, encodeURIComponent(String(companyUid)))
                .replace(`{${"supplierUid"}}`, encodeURIComponent(String(supplierUid)))
                .replace(`{${"culture"}}`, encodeURIComponent(String(culture)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} culture 
         * @param {DeleteProductionCommand} [deleteProductionCommand] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCultureProductionDelete: async (culture: string, deleteProductionCommand?: DeleteProductionCommand, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'culture' is not null or undefined
            assertParamExists('apiCultureProductionDelete', 'culture', culture)
            const localVarPath = `/api/{culture}/Production`
                .replace(`{${"culture"}}`, encodeURIComponent(String(culture)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(deleteProductionCommand, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} culture 
         * @param {CreateProductionCommand} [createProductionCommand] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCultureProductionPost: async (culture: string, createProductionCommand?: CreateProductionCommand, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'culture' is not null or undefined
            assertParamExists('apiCultureProductionPost', 'culture', culture)
            const localVarPath = `/api/{culture}/Production`
                .replace(`{${"culture"}}`, encodeURIComponent(String(culture)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createProductionCommand, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} culture 
         * @param {UpdateProductionCommand} [updateProductionCommand] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCultureProductionPut: async (culture: string, updateProductionCommand?: UpdateProductionCommand, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'culture' is not null or undefined
            assertParamExists('apiCultureProductionPut', 'culture', culture)
            const localVarPath = `/api/{culture}/Production`
                .replace(`{${"culture"}}`, encodeURIComponent(String(culture)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateProductionCommand, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} supplierUid 
         * @param {string} productionUid 
         * @param {string} culture 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCultureProductionSupplierUidProductionUidBatchesGet: async (supplierUid: string, productionUid: string, culture: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'supplierUid' is not null or undefined
            assertParamExists('apiCultureProductionSupplierUidProductionUidBatchesGet', 'supplierUid', supplierUid)
            // verify required parameter 'productionUid' is not null or undefined
            assertParamExists('apiCultureProductionSupplierUidProductionUidBatchesGet', 'productionUid', productionUid)
            // verify required parameter 'culture' is not null or undefined
            assertParamExists('apiCultureProductionSupplierUidProductionUidBatchesGet', 'culture', culture)
            const localVarPath = `/api/{culture}/Production/{supplierUid}/{productionUid}/batches`
                .replace(`{${"supplierUid"}}`, encodeURIComponent(String(supplierUid)))
                .replace(`{${"productionUid"}}`, encodeURIComponent(String(productionUid)))
                .replace(`{${"culture"}}`, encodeURIComponent(String(culture)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} uid 
         * @param {string} culture 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCultureProductionUidQrcodeGet: async (uid: string, culture: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'uid' is not null or undefined
            assertParamExists('apiCultureProductionUidQrcodeGet', 'uid', uid)
            // verify required parameter 'culture' is not null or undefined
            assertParamExists('apiCultureProductionUidQrcodeGet', 'culture', culture)
            const localVarPath = `/api/{culture}/Production/{uid}/qrcode`
                .replace(`{${"uid"}}`, encodeURIComponent(String(uid)))
                .replace(`{${"culture"}}`, encodeURIComponent(String(culture)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ProductionApi - functional programming interface
 * @export
 */
export const ProductionApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ProductionApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {string} companyUid 
         * @param {string} productionUid 
         * @param {string} culture 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiCultureProductionCompanyUidProductionProductionUidGet(companyUid: string, productionUid: string, culture: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiCultureProductionCompanyUidProductionProductionUidGet(companyUid, productionUid, culture, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} companyUid 
         * @param {string} supplierUid 
         * @param {string} culture 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiCultureProductionCompanyUidSupplierUidGet(companyUid: string, supplierUid: string, culture: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiCultureProductionCompanyUidSupplierUidGet(companyUid, supplierUid, culture, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} culture 
         * @param {DeleteProductionCommand} [deleteProductionCommand] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiCultureProductionDelete(culture: string, deleteProductionCommand?: DeleteProductionCommand, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeleteProductionCommand>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiCultureProductionDelete(culture, deleteProductionCommand, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} culture 
         * @param {CreateProductionCommand} [createProductionCommand] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiCultureProductionPost(culture: string, createProductionCommand?: CreateProductionCommand, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateProductionCommand>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiCultureProductionPost(culture, createProductionCommand, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} culture 
         * @param {UpdateProductionCommand} [updateProductionCommand] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiCultureProductionPut(culture: string, updateProductionCommand?: UpdateProductionCommand, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UpdateProductionCommand>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiCultureProductionPut(culture, updateProductionCommand, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} supplierUid 
         * @param {string} productionUid 
         * @param {string} culture 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiCultureProductionSupplierUidProductionUidBatchesGet(supplierUid: string, productionUid: string, culture: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiCultureProductionSupplierUidProductionUidBatchesGet(supplierUid, productionUid, culture, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} uid 
         * @param {string} culture 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiCultureProductionUidQrcodeGet(uid: string, culture: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiCultureProductionUidQrcodeGet(uid, culture, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ProductionApi - factory interface
 * @export
 */
export const ProductionApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ProductionApiFp(configuration)
    return {
        /**
         * 
         * @param {string} companyUid 
         * @param {string} productionUid 
         * @param {string} culture 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCultureProductionCompanyUidProductionProductionUidGet(companyUid: string, productionUid: string, culture: string, options?: any): AxiosPromise<void> {
            return localVarFp.apiCultureProductionCompanyUidProductionProductionUidGet(companyUid, productionUid, culture, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} companyUid 
         * @param {string} supplierUid 
         * @param {string} culture 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCultureProductionCompanyUidSupplierUidGet(companyUid: string, supplierUid: string, culture: string, options?: any): AxiosPromise<void> {
            return localVarFp.apiCultureProductionCompanyUidSupplierUidGet(companyUid, supplierUid, culture, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} culture 
         * @param {DeleteProductionCommand} [deleteProductionCommand] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCultureProductionDelete(culture: string, deleteProductionCommand?: DeleteProductionCommand, options?: any): AxiosPromise<DeleteProductionCommand> {
            return localVarFp.apiCultureProductionDelete(culture, deleteProductionCommand, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} culture 
         * @param {CreateProductionCommand} [createProductionCommand] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCultureProductionPost(culture: string, createProductionCommand?: CreateProductionCommand, options?: any): AxiosPromise<CreateProductionCommand> {
            return localVarFp.apiCultureProductionPost(culture, createProductionCommand, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} culture 
         * @param {UpdateProductionCommand} [updateProductionCommand] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCultureProductionPut(culture: string, updateProductionCommand?: UpdateProductionCommand, options?: any): AxiosPromise<UpdateProductionCommand> {
            return localVarFp.apiCultureProductionPut(culture, updateProductionCommand, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} supplierUid 
         * @param {string} productionUid 
         * @param {string} culture 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCultureProductionSupplierUidProductionUidBatchesGet(supplierUid: string, productionUid: string, culture: string, options?: any): AxiosPromise<void> {
            return localVarFp.apiCultureProductionSupplierUidProductionUidBatchesGet(supplierUid, productionUid, culture, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} uid 
         * @param {string} culture 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCultureProductionUidQrcodeGet(uid: string, culture: string, options?: any): AxiosPromise<void> {
            return localVarFp.apiCultureProductionUidQrcodeGet(uid, culture, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ProductionApi - object-oriented interface
 * @export
 * @class ProductionApi
 * @extends {BaseAPI}
 */
export class ProductionApi extends BaseAPI {
    /**
     * 
     * @param {string} companyUid 
     * @param {string} productionUid 
     * @param {string} culture 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductionApi
     */
    public apiCultureProductionCompanyUidProductionProductionUidGet(companyUid: string, productionUid: string, culture: string, options?: any) {
        return ProductionApiFp(this.configuration).apiCultureProductionCompanyUidProductionProductionUidGet(companyUid, productionUid, culture, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} companyUid 
     * @param {string} supplierUid 
     * @param {string} culture 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductionApi
     */
    public apiCultureProductionCompanyUidSupplierUidGet(companyUid: string, supplierUid: string, culture: string, options?: any) {
        return ProductionApiFp(this.configuration).apiCultureProductionCompanyUidSupplierUidGet(companyUid, supplierUid, culture, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} culture 
     * @param {DeleteProductionCommand} [deleteProductionCommand] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductionApi
     */
    public apiCultureProductionDelete(culture: string, deleteProductionCommand?: DeleteProductionCommand, options?: any) {
        return ProductionApiFp(this.configuration).apiCultureProductionDelete(culture, deleteProductionCommand, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} culture 
     * @param {CreateProductionCommand} [createProductionCommand] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductionApi
     */
    public apiCultureProductionPost(culture: string, createProductionCommand?: CreateProductionCommand, options?: any) {
        return ProductionApiFp(this.configuration).apiCultureProductionPost(culture, createProductionCommand, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} culture 
     * @param {UpdateProductionCommand} [updateProductionCommand] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductionApi
     */
    public apiCultureProductionPut(culture: string, updateProductionCommand?: UpdateProductionCommand, options?: any) {
        return ProductionApiFp(this.configuration).apiCultureProductionPut(culture, updateProductionCommand, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} supplierUid 
     * @param {string} productionUid 
     * @param {string} culture 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductionApi
     */
    public apiCultureProductionSupplierUidProductionUidBatchesGet(supplierUid: string, productionUid: string, culture: string, options?: any) {
        return ProductionApiFp(this.configuration).apiCultureProductionSupplierUidProductionUidBatchesGet(supplierUid, productionUid, culture, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} uid 
     * @param {string} culture 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductionApi
     */
    public apiCultureProductionUidQrcodeGet(uid: string, culture: string, options?: any) {
        return ProductionApiFp(this.configuration).apiCultureProductionUidQrcodeGet(uid, culture, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * QuickQrcodeApi - axios parameter creator
 * @export
 */
export const QuickQrcodeApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} companyUid 
         * @param {string} culture 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCultureQuickQrcodeCompanyUidGet: async (companyUid: string, culture: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyUid' is not null or undefined
            assertParamExists('apiCultureQuickQrcodeCompanyUidGet', 'companyUid', companyUid)
            // verify required parameter 'culture' is not null or undefined
            assertParamExists('apiCultureQuickQrcodeCompanyUidGet', 'culture', culture)
            const localVarPath = `/api/{culture}/QuickQrcode/{companyUid}`
                .replace(`{${"companyUid"}}`, encodeURIComponent(String(companyUid)))
                .replace(`{${"culture"}}`, encodeURIComponent(String(culture)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} companyUid 
         * @param {string} culture 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCultureQuickQrcodeCompanyUidQrcodeGet: async (companyUid: string, culture: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyUid' is not null or undefined
            assertParamExists('apiCultureQuickQrcodeCompanyUidQrcodeGet', 'companyUid', companyUid)
            // verify required parameter 'culture' is not null or undefined
            assertParamExists('apiCultureQuickQrcodeCompanyUidQrcodeGet', 'culture', culture)
            const localVarPath = `/api/{culture}/QuickQrcode/{companyUid}/qrcode`
                .replace(`{${"companyUid"}}`, encodeURIComponent(String(companyUid)))
                .replace(`{${"culture"}}`, encodeURIComponent(String(culture)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} culture 
         * @param {SaveQuickCodeFeedbackCommand} [saveQuickCodeFeedbackCommand] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCultureQuickQrcodeFeedbackPost: async (culture: string, saveQuickCodeFeedbackCommand?: SaveQuickCodeFeedbackCommand, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'culture' is not null or undefined
            assertParamExists('apiCultureQuickQrcodeFeedbackPost', 'culture', culture)
            const localVarPath = `/api/{culture}/QuickQrcode/feedback`
                .replace(`{${"culture"}}`, encodeURIComponent(String(culture)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(saveQuickCodeFeedbackCommand, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} culture 
         * @param {string} [data] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCultureQuickQrcodePost: async (culture: string, data?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'culture' is not null or undefined
            assertParamExists('apiCultureQuickQrcodePost', 'culture', culture)
            const localVarPath = `/api/{culture}/QuickQrcode`
                .replace(`{${"culture"}}`, encodeURIComponent(String(culture)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


            if (data !== undefined) { 
                localVarFormParams.append('data', data as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * QuickQrcodeApi - functional programming interface
 * @export
 */
export const QuickQrcodeApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = QuickQrcodeApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {string} companyUid 
         * @param {string} culture 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiCultureQuickQrcodeCompanyUidGet(companyUid: string, culture: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<QuickQrcodeModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiCultureQuickQrcodeCompanyUidGet(companyUid, culture, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} companyUid 
         * @param {string} culture 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiCultureQuickQrcodeCompanyUidQrcodeGet(companyUid: string, culture: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiCultureQuickQrcodeCompanyUidQrcodeGet(companyUid, culture, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} culture 
         * @param {SaveQuickCodeFeedbackCommand} [saveQuickCodeFeedbackCommand] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiCultureQuickQrcodeFeedbackPost(culture: string, saveQuickCodeFeedbackCommand?: SaveQuickCodeFeedbackCommand, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SaveQuickCodeFeedbackCommand>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiCultureQuickQrcodeFeedbackPost(culture, saveQuickCodeFeedbackCommand, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} culture 
         * @param {string} [data] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiCultureQuickQrcodePost(culture: string, data?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateCustomDataCommand>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiCultureQuickQrcodePost(culture, data, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * QuickQrcodeApi - factory interface
 * @export
 */
export const QuickQrcodeApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = QuickQrcodeApiFp(configuration)
    return {
        /**
         * 
         * @param {string} companyUid 
         * @param {string} culture 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCultureQuickQrcodeCompanyUidGet(companyUid: string, culture: string, options?: any): AxiosPromise<QuickQrcodeModel> {
            return localVarFp.apiCultureQuickQrcodeCompanyUidGet(companyUid, culture, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} companyUid 
         * @param {string} culture 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCultureQuickQrcodeCompanyUidQrcodeGet(companyUid: string, culture: string, options?: any): AxiosPromise<void> {
            return localVarFp.apiCultureQuickQrcodeCompanyUidQrcodeGet(companyUid, culture, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} culture 
         * @param {SaveQuickCodeFeedbackCommand} [saveQuickCodeFeedbackCommand] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCultureQuickQrcodeFeedbackPost(culture: string, saveQuickCodeFeedbackCommand?: SaveQuickCodeFeedbackCommand, options?: any): AxiosPromise<SaveQuickCodeFeedbackCommand> {
            return localVarFp.apiCultureQuickQrcodeFeedbackPost(culture, saveQuickCodeFeedbackCommand, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} culture 
         * @param {string} [data] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCultureQuickQrcodePost(culture: string, data?: string, options?: any): AxiosPromise<CreateCustomDataCommand> {
            return localVarFp.apiCultureQuickQrcodePost(culture, data, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * QuickQrcodeApi - object-oriented interface
 * @export
 * @class QuickQrcodeApi
 * @extends {BaseAPI}
 */
export class QuickQrcodeApi extends BaseAPI {
    /**
     * 
     * @param {string} companyUid 
     * @param {string} culture 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QuickQrcodeApi
     */
    public apiCultureQuickQrcodeCompanyUidGet(companyUid: string, culture: string, options?: any) {
        return QuickQrcodeApiFp(this.configuration).apiCultureQuickQrcodeCompanyUidGet(companyUid, culture, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} companyUid 
     * @param {string} culture 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QuickQrcodeApi
     */
    public apiCultureQuickQrcodeCompanyUidQrcodeGet(companyUid: string, culture: string, options?: any) {
        return QuickQrcodeApiFp(this.configuration).apiCultureQuickQrcodeCompanyUidQrcodeGet(companyUid, culture, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} culture 
     * @param {SaveQuickCodeFeedbackCommand} [saveQuickCodeFeedbackCommand] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QuickQrcodeApi
     */
    public apiCultureQuickQrcodeFeedbackPost(culture: string, saveQuickCodeFeedbackCommand?: SaveQuickCodeFeedbackCommand, options?: any) {
        return QuickQrcodeApiFp(this.configuration).apiCultureQuickQrcodeFeedbackPost(culture, saveQuickCodeFeedbackCommand, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} culture 
     * @param {string} [data] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QuickQrcodeApi
     */
    public apiCultureQuickQrcodePost(culture: string, data?: string, options?: any) {
        return QuickQrcodeApiFp(this.configuration).apiCultureQuickQrcodePost(culture, data, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * StripeWebHookApi - axios parameter creator
 * @export
 */
export const StripeWebHookApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} culture 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCultureStripeWebHookPost: async (culture: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'culture' is not null or undefined
            assertParamExists('apiCultureStripeWebHookPost', 'culture', culture)
            const localVarPath = `/api/{culture}/StripeWebHook`
                .replace(`{${"culture"}}`, encodeURIComponent(String(culture)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * StripeWebHookApi - functional programming interface
 * @export
 */
export const StripeWebHookApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = StripeWebHookApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {string} culture 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiCultureStripeWebHookPost(culture: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiCultureStripeWebHookPost(culture, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * StripeWebHookApi - factory interface
 * @export
 */
export const StripeWebHookApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = StripeWebHookApiFp(configuration)
    return {
        /**
         * 
         * @param {string} culture 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCultureStripeWebHookPost(culture: string, options?: any): AxiosPromise<void> {
            return localVarFp.apiCultureStripeWebHookPost(culture, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * StripeWebHookApi - object-oriented interface
 * @export
 * @class StripeWebHookApi
 * @extends {BaseAPI}
 */
export class StripeWebHookApi extends BaseAPI {
    /**
     * 
     * @param {string} culture 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StripeWebHookApi
     */
    public apiCultureStripeWebHookPost(culture: string, options?: any) {
        return StripeWebHookApiFp(this.configuration).apiCultureStripeWebHookPost(culture, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * TaskSchedulerApi - axios parameter creator
 * @export
 */
export const TaskSchedulerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {SendEmailCommand} [sendEmailCommand] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        taskSchedulerPost: async (sendEmailCommand?: SendEmailCommand, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/TaskScheduler`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(sendEmailCommand, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * TaskSchedulerApi - functional programming interface
 * @export
 */
export const TaskSchedulerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = TaskSchedulerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {SendEmailCommand} [sendEmailCommand] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async taskSchedulerPost(sendEmailCommand?: SendEmailCommand, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.taskSchedulerPost(sendEmailCommand, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * TaskSchedulerApi - factory interface
 * @export
 */
export const TaskSchedulerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = TaskSchedulerApiFp(configuration)
    return {
        /**
         * 
         * @param {SendEmailCommand} [sendEmailCommand] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        taskSchedulerPost(sendEmailCommand?: SendEmailCommand, options?: any): AxiosPromise<void> {
            return localVarFp.taskSchedulerPost(sendEmailCommand, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * TaskSchedulerApi - object-oriented interface
 * @export
 * @class TaskSchedulerApi
 * @extends {BaseAPI}
 */
export class TaskSchedulerApi extends BaseAPI {
    /**
     * 
     * @param {SendEmailCommand} [sendEmailCommand] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TaskSchedulerApi
     */
    public taskSchedulerPost(sendEmailCommand?: SendEmailCommand, options?: any) {
        return TaskSchedulerApiFp(this.configuration).taskSchedulerPost(sendEmailCommand, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * UserApi - axios parameter creator
 * @export
 */
export const UserApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} culture 
         * @param {ChangePasswordCommand} [changePasswordCommand] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCultureUserChangePasswordPost: async (culture: string, changePasswordCommand?: ChangePasswordCommand, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'culture' is not null or undefined
            assertParamExists('apiCultureUserChangePasswordPost', 'culture', culture)
            const localVarPath = `/api/{culture}/User/ChangePassword`
                .replace(`{${"culture"}}`, encodeURIComponent(String(culture)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(changePasswordCommand, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} culture 
         * @param {DeleteUserCommand} [deleteUserCommand] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCultureUserDelete: async (culture: string, deleteUserCommand?: DeleteUserCommand, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'culture' is not null or undefined
            assertParamExists('apiCultureUserDelete', 'culture', culture)
            const localVarPath = `/api/{culture}/User`
                .replace(`{${"culture"}}`, encodeURIComponent(String(culture)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(deleteUserCommand, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} culture 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCultureUserDummyDataGet: async (culture: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'culture' is not null or undefined
            assertParamExists('apiCultureUserDummyDataGet', 'culture', culture)
            const localVarPath = `/api/{culture}/User/DummyData`
                .replace(`{${"culture"}}`, encodeURIComponent(String(culture)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} culture 
         * @param {ForgotPasswordCommand} [forgotPasswordCommand] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCultureUserForgotPasswordPost: async (culture: string, forgotPasswordCommand?: ForgotPasswordCommand, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'culture' is not null or undefined
            assertParamExists('apiCultureUserForgotPasswordPost', 'culture', culture)
            const localVarPath = `/api/{culture}/User/ForgotPassword`
                .replace(`{${"culture"}}`, encodeURIComponent(String(culture)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(forgotPasswordCommand, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} culture 
         * @param {CreateUserCommand} [createUserCommand] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCultureUserPost: async (culture: string, createUserCommand?: CreateUserCommand, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'culture' is not null or undefined
            assertParamExists('apiCultureUserPost', 'culture', culture)
            const localVarPath = `/api/{culture}/User`
                .replace(`{${"culture"}}`, encodeURIComponent(String(culture)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createUserCommand, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} culture 
         * @param {string} [data] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCultureUserPut: async (culture: string, data?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'culture' is not null or undefined
            assertParamExists('apiCultureUserPut', 'culture', culture)
            const localVarPath = `/api/{culture}/User`
                .replace(`{${"culture"}}`, encodeURIComponent(String(culture)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


            if (data !== undefined) { 
                localVarFormParams.append('data', data as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} culture 
         * @param {ResetPasswordCommand} [resetPasswordCommand] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCultureUserResetPasswordPost: async (culture: string, resetPasswordCommand?: ResetPasswordCommand, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'culture' is not null or undefined
            assertParamExists('apiCultureUserResetPasswordPost', 'culture', culture)
            const localVarPath = `/api/{culture}/User/ResetPassword`
                .replace(`{${"culture"}}`, encodeURIComponent(String(culture)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(resetPasswordCommand, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} uid 
         * @param {string} culture 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCultureUserUidGet: async (uid: string, culture: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'uid' is not null or undefined
            assertParamExists('apiCultureUserUidGet', 'uid', uid)
            // verify required parameter 'culture' is not null or undefined
            assertParamExists('apiCultureUserUidGet', 'culture', culture)
            const localVarPath = `/api/{culture}/User/{uid}`
                .replace(`{${"uid"}}`, encodeURIComponent(String(uid)))
                .replace(`{${"culture"}}`, encodeURIComponent(String(culture)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} token 
         * @param {string} culture 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCultureUserValidateTokenTokenGet: async (token: string, culture: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'token' is not null or undefined
            assertParamExists('apiCultureUserValidateTokenTokenGet', 'token', token)
            // verify required parameter 'culture' is not null or undefined
            assertParamExists('apiCultureUserValidateTokenTokenGet', 'culture', culture)
            const localVarPath = `/api/{culture}/User/ValidateToken/{token}`
                .replace(`{${"token"}}`, encodeURIComponent(String(token)))
                .replace(`{${"culture"}}`, encodeURIComponent(String(culture)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UserApi - functional programming interface
 * @export
 */
export const UserApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = UserApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {string} culture 
         * @param {ChangePasswordCommand} [changePasswordCommand] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiCultureUserChangePasswordPost(culture: string, changePasswordCommand?: ChangePasswordCommand, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateUserCommand>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiCultureUserChangePasswordPost(culture, changePasswordCommand, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} culture 
         * @param {DeleteUserCommand} [deleteUserCommand] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiCultureUserDelete(culture: string, deleteUserCommand?: DeleteUserCommand, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeleteUserCommand>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiCultureUserDelete(culture, deleteUserCommand, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} culture 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiCultureUserDummyDataGet(culture: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiCultureUserDummyDataGet(culture, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} culture 
         * @param {ForgotPasswordCommand} [forgotPasswordCommand] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiCultureUserForgotPasswordPost(culture: string, forgotPasswordCommand?: ForgotPasswordCommand, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateUserCommand>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiCultureUserForgotPasswordPost(culture, forgotPasswordCommand, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} culture 
         * @param {CreateUserCommand} [createUserCommand] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiCultureUserPost(culture: string, createUserCommand?: CreateUserCommand, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateUserCommand>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiCultureUserPost(culture, createUserCommand, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} culture 
         * @param {string} [data] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiCultureUserPut(culture: string, data?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UpdateUserCommand>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiCultureUserPut(culture, data, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} culture 
         * @param {ResetPasswordCommand} [resetPasswordCommand] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiCultureUserResetPasswordPost(culture: string, resetPasswordCommand?: ResetPasswordCommand, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateUserCommand>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiCultureUserResetPasswordPost(culture, resetPasswordCommand, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} uid 
         * @param {string} culture 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiCultureUserUidGet(uid: string, culture: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiCultureUserUidGet(uid, culture, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} token 
         * @param {string} culture 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiCultureUserValidateTokenTokenGet(token: string, culture: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiCultureUserValidateTokenTokenGet(token, culture, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * UserApi - factory interface
 * @export
 */
export const UserApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = UserApiFp(configuration)
    return {
        /**
         * 
         * @param {string} culture 
         * @param {ChangePasswordCommand} [changePasswordCommand] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCultureUserChangePasswordPost(culture: string, changePasswordCommand?: ChangePasswordCommand, options?: any): AxiosPromise<CreateUserCommand> {
            return localVarFp.apiCultureUserChangePasswordPost(culture, changePasswordCommand, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} culture 
         * @param {DeleteUserCommand} [deleteUserCommand] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCultureUserDelete(culture: string, deleteUserCommand?: DeleteUserCommand, options?: any): AxiosPromise<DeleteUserCommand> {
            return localVarFp.apiCultureUserDelete(culture, deleteUserCommand, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} culture 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCultureUserDummyDataGet(culture: string, options?: any): AxiosPromise<UserModel> {
            return localVarFp.apiCultureUserDummyDataGet(culture, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} culture 
         * @param {ForgotPasswordCommand} [forgotPasswordCommand] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCultureUserForgotPasswordPost(culture: string, forgotPasswordCommand?: ForgotPasswordCommand, options?: any): AxiosPromise<CreateUserCommand> {
            return localVarFp.apiCultureUserForgotPasswordPost(culture, forgotPasswordCommand, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} culture 
         * @param {CreateUserCommand} [createUserCommand] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCultureUserPost(culture: string, createUserCommand?: CreateUserCommand, options?: any): AxiosPromise<CreateUserCommand> {
            return localVarFp.apiCultureUserPost(culture, createUserCommand, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} culture 
         * @param {string} [data] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCultureUserPut(culture: string, data?: string, options?: any): AxiosPromise<UpdateUserCommand> {
            return localVarFp.apiCultureUserPut(culture, data, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} culture 
         * @param {ResetPasswordCommand} [resetPasswordCommand] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCultureUserResetPasswordPost(culture: string, resetPasswordCommand?: ResetPasswordCommand, options?: any): AxiosPromise<CreateUserCommand> {
            return localVarFp.apiCultureUserResetPasswordPost(culture, resetPasswordCommand, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} uid 
         * @param {string} culture 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCultureUserUidGet(uid: string, culture: string, options?: any): AxiosPromise<UserModel> {
            return localVarFp.apiCultureUserUidGet(uid, culture, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} token 
         * @param {string} culture 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCultureUserValidateTokenTokenGet(token: string, culture: string, options?: any): AxiosPromise<boolean> {
            return localVarFp.apiCultureUserValidateTokenTokenGet(token, culture, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * UserApi - object-oriented interface
 * @export
 * @class UserApi
 * @extends {BaseAPI}
 */
export class UserApi extends BaseAPI {
    /**
     * 
     * @param {string} culture 
     * @param {ChangePasswordCommand} [changePasswordCommand] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public apiCultureUserChangePasswordPost(culture: string, changePasswordCommand?: ChangePasswordCommand, options?: any) {
        return UserApiFp(this.configuration).apiCultureUserChangePasswordPost(culture, changePasswordCommand, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} culture 
     * @param {DeleteUserCommand} [deleteUserCommand] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public apiCultureUserDelete(culture: string, deleteUserCommand?: DeleteUserCommand, options?: any) {
        return UserApiFp(this.configuration).apiCultureUserDelete(culture, deleteUserCommand, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} culture 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public apiCultureUserDummyDataGet(culture: string, options?: any) {
        return UserApiFp(this.configuration).apiCultureUserDummyDataGet(culture, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} culture 
     * @param {ForgotPasswordCommand} [forgotPasswordCommand] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public apiCultureUserForgotPasswordPost(culture: string, forgotPasswordCommand?: ForgotPasswordCommand, options?: any) {
        return UserApiFp(this.configuration).apiCultureUserForgotPasswordPost(culture, forgotPasswordCommand, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} culture 
     * @param {CreateUserCommand} [createUserCommand] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public apiCultureUserPost(culture: string, createUserCommand?: CreateUserCommand, options?: any) {
        return UserApiFp(this.configuration).apiCultureUserPost(culture, createUserCommand, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} culture 
     * @param {string} [data] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public apiCultureUserPut(culture: string, data?: string, options?: any) {
        return UserApiFp(this.configuration).apiCultureUserPut(culture, data, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} culture 
     * @param {ResetPasswordCommand} [resetPasswordCommand] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public apiCultureUserResetPasswordPost(culture: string, resetPasswordCommand?: ResetPasswordCommand, options?: any) {
        return UserApiFp(this.configuration).apiCultureUserResetPasswordPost(culture, resetPasswordCommand, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} uid 
     * @param {string} culture 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public apiCultureUserUidGet(uid: string, culture: string, options?: any) {
        return UserApiFp(this.configuration).apiCultureUserUidGet(uid, culture, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} token 
     * @param {string} culture 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public apiCultureUserValidateTokenTokenGet(token: string, culture: string, options?: any) {
        return UserApiFp(this.configuration).apiCultureUserValidateTokenTokenGet(token, culture, options).then((request) => request(this.axios, this.basePath));
    }
}


