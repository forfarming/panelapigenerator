"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Api
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
exports.__esModule = true;
exports.CompanyApi = exports.CompanyApiFactory = exports.CompanyApiFp = exports.CompanyApiAxiosParamCreator = void 0;
var axios_1 = require("axios");
// Some imports not used depending on template conditions
// @ts-ignore
var common_1 = require("../common");
// @ts-ignore
var base_1 = require("../base");
/**
 * CompanyApi - axios parameter creator
 * @export
 */
exports.CompanyApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         *
         * @param {string} culture
         * @param {DeleteCompanyCertificateCommand} [deleteCompanyCertificateCommand]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCultureCompanyCertificatesDelete: function (culture, deleteCompanyCertificateCommand, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'culture' is not null or undefined
                            common_1.assertParamExists('apiCultureCompanyCertificatesDelete', 'culture', culture);
                            localVarPath = "/api/{culture}/Company/certificates"
                                .replace("{" + "culture" + "}", encodeURIComponent(String(culture)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'DELETE' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication Bearer required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)];
                        case 1:
                            // authentication Bearer required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = common_1.serializeDataIfNeeded(deleteCompanyCertificateCommand, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions
                                }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} culture
         * @param {string} [data]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCultureCompanyCertificatesPost: function (culture, data, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarFormParams, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'culture' is not null or undefined
                            common_1.assertParamExists('apiCultureCompanyCertificatesPost', 'culture', culture);
                            localVarPath = "/api/{culture}/Company/certificates"
                                .replace("{" + "culture" + "}", encodeURIComponent(String(culture)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();
                            // authentication Bearer required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)];
                        case 1:
                            // authentication Bearer required
                            _a.sent();
                            if (data !== undefined) {
                                localVarFormParams.append('data', data);
                            }
                            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = localVarFormParams;
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions
                                }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} companyUid
         * @param {string} culture
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCultureCompanyCompanyUidCertificatesGet: function (companyUid, culture, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'companyUid' is not null or undefined
                            common_1.assertParamExists('apiCultureCompanyCompanyUidCertificatesGet', 'companyUid', companyUid);
                            // verify required parameter 'culture' is not null or undefined
                            common_1.assertParamExists('apiCultureCompanyCompanyUidCertificatesGet', 'culture', culture);
                            localVarPath = "/api/{culture}/Company/{companyUid}/certificates"
                                .replace("{" + "companyUid" + "}", encodeURIComponent(String(companyUid)))
                                .replace("{" + "culture" + "}", encodeURIComponent(String(culture)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication Bearer required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)];
                        case 1:
                            // authentication Bearer required
                            _a.sent();
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions
                                }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} companyUid
         * @param {string} culture
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCultureCompanyCompanyUidContactsGet: function (companyUid, culture, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'companyUid' is not null or undefined
                            common_1.assertParamExists('apiCultureCompanyCompanyUidContactsGet', 'companyUid', companyUid);
                            // verify required parameter 'culture' is not null or undefined
                            common_1.assertParamExists('apiCultureCompanyCompanyUidContactsGet', 'culture', culture);
                            localVarPath = "/api/{culture}/Company/{companyUid}/contacts"
                                .replace("{" + "companyUid" + "}", encodeURIComponent(String(companyUid)))
                                .replace("{" + "culture" + "}", encodeURIComponent(String(culture)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication Bearer required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)];
                        case 1:
                            // authentication Bearer required
                            _a.sent();
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions
                                }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} companyUid
         * @param {string} culture
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCultureCompanyCompanyUidFacilityPhotosGet: function (companyUid, culture, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'companyUid' is not null or undefined
                            common_1.assertParamExists('apiCultureCompanyCompanyUidFacilityPhotosGet', 'companyUid', companyUid);
                            // verify required parameter 'culture' is not null or undefined
                            common_1.assertParamExists('apiCultureCompanyCompanyUidFacilityPhotosGet', 'culture', culture);
                            localVarPath = "/api/{culture}/Company/{companyUid}/facilityPhotos"
                                .replace("{" + "companyUid" + "}", encodeURIComponent(String(companyUid)))
                                .replace("{" + "culture" + "}", encodeURIComponent(String(culture)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication Bearer required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)];
                        case 1:
                            // authentication Bearer required
                            _a.sent();
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions
                                }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} companyUid
         * @param {string} culture
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCultureCompanyCompanyUidGet: function (companyUid, culture, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'companyUid' is not null or undefined
                            common_1.assertParamExists('apiCultureCompanyCompanyUidGet', 'companyUid', companyUid);
                            // verify required parameter 'culture' is not null or undefined
                            common_1.assertParamExists('apiCultureCompanyCompanyUidGet', 'culture', culture);
                            localVarPath = "/api/{culture}/Company/{companyUid}"
                                .replace("{" + "companyUid" + "}", encodeURIComponent(String(companyUid)))
                                .replace("{" + "culture" + "}", encodeURIComponent(String(culture)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication Bearer required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)];
                        case 1:
                            // authentication Bearer required
                            _a.sent();
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions
                                }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} companyUid
         * @param {string} culture
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCultureCompanyCompanyUidProductsGet: function (companyUid, culture, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'companyUid' is not null or undefined
                            common_1.assertParamExists('apiCultureCompanyCompanyUidProductsGet', 'companyUid', companyUid);
                            // verify required parameter 'culture' is not null or undefined
                            common_1.assertParamExists('apiCultureCompanyCompanyUidProductsGet', 'culture', culture);
                            localVarPath = "/api/{culture}/Company/{companyUid}/products"
                                .replace("{" + "companyUid" + "}", encodeURIComponent(String(companyUid)))
                                .replace("{" + "culture" + "}", encodeURIComponent(String(culture)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication Bearer required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)];
                        case 1:
                            // authentication Bearer required
                            _a.sent();
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions
                                }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} companyuid
         * @param {string} culture
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCultureCompanyCompanyuidCustomersGet: function (companyuid, culture, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'companyuid' is not null or undefined
                            common_1.assertParamExists('apiCultureCompanyCompanyuidCustomersGet', 'companyuid', companyuid);
                            // verify required parameter 'culture' is not null or undefined
                            common_1.assertParamExists('apiCultureCompanyCompanyuidCustomersGet', 'culture', culture);
                            localVarPath = "/api/{culture}/Company/{companyuid}/customers"
                                .replace("{" + "companyuid" + "}", encodeURIComponent(String(companyuid)))
                                .replace("{" + "culture" + "}", encodeURIComponent(String(culture)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication Bearer required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)];
                        case 1:
                            // authentication Bearer required
                            _a.sent();
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions
                                }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} companyuid
         * @param {string} culture
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCultureCompanyCompanyuidSuppliersGet: function (companyuid, culture, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'companyuid' is not null or undefined
                            common_1.assertParamExists('apiCultureCompanyCompanyuidSuppliersGet', 'companyuid', companyuid);
                            // verify required parameter 'culture' is not null or undefined
                            common_1.assertParamExists('apiCultureCompanyCompanyuidSuppliersGet', 'culture', culture);
                            localVarPath = "/api/{culture}/Company/{companyuid}/suppliers"
                                .replace("{" + "companyuid" + "}", encodeURIComponent(String(companyuid)))
                                .replace("{" + "culture" + "}", encodeURIComponent(String(culture)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication Bearer required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)];
                        case 1:
                            // authentication Bearer required
                            _a.sent();
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions
                                }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} companyuid
         * @param {string} culture
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCultureCompanyCompanyuidTemplatesGet: function (companyuid, culture, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'companyuid' is not null or undefined
                            common_1.assertParamExists('apiCultureCompanyCompanyuidTemplatesGet', 'companyuid', companyuid);
                            // verify required parameter 'culture' is not null or undefined
                            common_1.assertParamExists('apiCultureCompanyCompanyuidTemplatesGet', 'culture', culture);
                            localVarPath = "/api/{culture}/Company/{companyuid}/templates"
                                .replace("{" + "companyuid" + "}", encodeURIComponent(String(companyuid)))
                                .replace("{" + "culture" + "}", encodeURIComponent(String(culture)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication Bearer required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)];
                        case 1:
                            // authentication Bearer required
                            _a.sent();
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions
                                }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} culture
         * @param {DeleteCompanyContactCommand} [deleteCompanyContactCommand]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCultureCompanyContactsDelete: function (culture, deleteCompanyContactCommand, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'culture' is not null or undefined
                            common_1.assertParamExists('apiCultureCompanyContactsDelete', 'culture', culture);
                            localVarPath = "/api/{culture}/Company/contacts"
                                .replace("{" + "culture" + "}", encodeURIComponent(String(culture)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'DELETE' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication Bearer required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)];
                        case 1:
                            // authentication Bearer required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = common_1.serializeDataIfNeeded(deleteCompanyContactCommand, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions
                                }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} culture
         * @param {string} [data]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCultureCompanyContactsPost: function (culture, data, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarFormParams, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'culture' is not null or undefined
                            common_1.assertParamExists('apiCultureCompanyContactsPost', 'culture', culture);
                            localVarPath = "/api/{culture}/Company/contacts"
                                .replace("{" + "culture" + "}", encodeURIComponent(String(culture)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();
                            // authentication Bearer required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)];
                        case 1:
                            // authentication Bearer required
                            _a.sent();
                            if (data !== undefined) {
                                localVarFormParams.append('data', data);
                            }
                            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = localVarFormParams;
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions
                                }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} culture
         * @param {string} [data]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCultureCompanyContactsPut: function (culture, data, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarFormParams, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'culture' is not null or undefined
                            common_1.assertParamExists('apiCultureCompanyContactsPut', 'culture', culture);
                            localVarPath = "/api/{culture}/Company/contacts"
                                .replace("{" + "culture" + "}", encodeURIComponent(String(culture)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'PUT' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();
                            // authentication Bearer required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)];
                        case 1:
                            // authentication Bearer required
                            _a.sent();
                            if (data !== undefined) {
                                localVarFormParams.append('data', data);
                            }
                            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = localVarFormParams;
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions
                                }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} culture
         * @param {DeleteCompanyCommand} [deleteCompanyCommand]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCultureCompanyDelete: function (culture, deleteCompanyCommand, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'culture' is not null or undefined
                            common_1.assertParamExists('apiCultureCompanyDelete', 'culture', culture);
                            localVarPath = "/api/{culture}/Company"
                                .replace("{" + "culture" + "}", encodeURIComponent(String(culture)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'DELETE' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication Bearer required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)];
                        case 1:
                            // authentication Bearer required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = common_1.serializeDataIfNeeded(deleteCompanyCommand, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions
                                }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} culture
         * @param {DeleteCompanyFacilityPhotoCommand} [deleteCompanyFacilityPhotoCommand]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCultureCompanyFacilityPhotosDelete: function (culture, deleteCompanyFacilityPhotoCommand, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'culture' is not null or undefined
                            common_1.assertParamExists('apiCultureCompanyFacilityPhotosDelete', 'culture', culture);
                            localVarPath = "/api/{culture}/Company/facilityPhotos"
                                .replace("{" + "culture" + "}", encodeURIComponent(String(culture)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'DELETE' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication Bearer required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)];
                        case 1:
                            // authentication Bearer required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = common_1.serializeDataIfNeeded(deleteCompanyFacilityPhotoCommand, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions
                                }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} culture
         * @param {string} [data]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCultureCompanyFacilityPhotosPost: function (culture, data, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarFormParams, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'culture' is not null or undefined
                            common_1.assertParamExists('apiCultureCompanyFacilityPhotosPost', 'culture', culture);
                            localVarPath = "/api/{culture}/Company/facilityPhotos"
                                .replace("{" + "culture" + "}", encodeURIComponent(String(culture)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();
                            // authentication Bearer required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)];
                        case 1:
                            // authentication Bearer required
                            _a.sent();
                            if (data !== undefined) {
                                localVarFormParams.append('data', data);
                            }
                            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = localVarFormParams;
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions
                                }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} culture
         * @param {string} [data]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCultureCompanyPost: function (culture, data, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarFormParams, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'culture' is not null or undefined
                            common_1.assertParamExists('apiCultureCompanyPost', 'culture', culture);
                            localVarPath = "/api/{culture}/Company"
                                .replace("{" + "culture" + "}", encodeURIComponent(String(culture)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();
                            // authentication Bearer required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)];
                        case 1:
                            // authentication Bearer required
                            _a.sent();
                            if (data !== undefined) {
                                localVarFormParams.append('data', data);
                            }
                            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = localVarFormParams;
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions
                                }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} culture
         * @param {DeleteCompanyProductCommand} [deleteCompanyProductCommand]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCultureCompanyProductsDelete: function (culture, deleteCompanyProductCommand, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'culture' is not null or undefined
                            common_1.assertParamExists('apiCultureCompanyProductsDelete', 'culture', culture);
                            localVarPath = "/api/{culture}/Company/products"
                                .replace("{" + "culture" + "}", encodeURIComponent(String(culture)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'DELETE' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication Bearer required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)];
                        case 1:
                            // authentication Bearer required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = common_1.serializeDataIfNeeded(deleteCompanyProductCommand, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions
                                }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} culture
         * @param {CreateCompanyProductCommand} [createCompanyProductCommand]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCultureCompanyProductsPost: function (culture, createCompanyProductCommand, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'culture' is not null or undefined
                            common_1.assertParamExists('apiCultureCompanyProductsPost', 'culture', culture);
                            localVarPath = "/api/{culture}/Company/products"
                                .replace("{" + "culture" + "}", encodeURIComponent(String(culture)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication Bearer required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)];
                        case 1:
                            // authentication Bearer required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = common_1.serializeDataIfNeeded(createCompanyProductCommand, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions
                                }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} culture
         * @param {UpdateCompanyProductCommand} [updateCompanyProductCommand]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCultureCompanyProductsPut: function (culture, updateCompanyProductCommand, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'culture' is not null or undefined
                            common_1.assertParamExists('apiCultureCompanyProductsPut', 'culture', culture);
                            localVarPath = "/api/{culture}/Company/products"
                                .replace("{" + "culture" + "}", encodeURIComponent(String(culture)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'PUT' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication Bearer required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)];
                        case 1:
                            // authentication Bearer required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = common_1.serializeDataIfNeeded(updateCompanyProductCommand, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions
                                }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} culture
         * @param {string} [data]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCultureCompanyPut: function (culture, data, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarFormParams, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'culture' is not null or undefined
                            common_1.assertParamExists('apiCultureCompanyPut', 'culture', culture);
                            localVarPath = "/api/{culture}/Company"
                                .replace("{" + "culture" + "}", encodeURIComponent(String(culture)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'PUT' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();
                            // authentication Bearer required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)];
                        case 1:
                            // authentication Bearer required
                            _a.sent();
                            if (data !== undefined) {
                                localVarFormParams.append('data', data);
                            }
                            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = localVarFormParams;
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions
                                }];
                    }
                });
            });
        }
    };
};
/**
 * CompanyApi - functional programming interface
 * @export
 */
exports.CompanyApiFp = function (configuration) {
    var localVarAxiosParamCreator = exports.CompanyApiAxiosParamCreator(configuration);
    return {
        /**
         *
         * @param {string} culture
         * @param {DeleteCompanyCertificateCommand} [deleteCompanyCertificateCommand]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCultureCompanyCertificatesDelete: function (culture, deleteCompanyCertificateCommand, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.apiCultureCompanyCertificatesDelete(culture, deleteCompanyCertificateCommand, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1["default"], base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @param {string} culture
         * @param {string} [data]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCultureCompanyCertificatesPost: function (culture, data, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.apiCultureCompanyCertificatesPost(culture, data, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1["default"], base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @param {string} companyUid
         * @param {string} culture
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCultureCompanyCompanyUidCertificatesGet: function (companyUid, culture, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.apiCultureCompanyCompanyUidCertificatesGet(companyUid, culture, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1["default"], base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @param {string} companyUid
         * @param {string} culture
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCultureCompanyCompanyUidContactsGet: function (companyUid, culture, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.apiCultureCompanyCompanyUidContactsGet(companyUid, culture, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1["default"], base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @param {string} companyUid
         * @param {string} culture
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCultureCompanyCompanyUidFacilityPhotosGet: function (companyUid, culture, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.apiCultureCompanyCompanyUidFacilityPhotosGet(companyUid, culture, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1["default"], base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @param {string} companyUid
         * @param {string} culture
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCultureCompanyCompanyUidGet: function (companyUid, culture, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.apiCultureCompanyCompanyUidGet(companyUid, culture, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1["default"], base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @param {string} companyUid
         * @param {string} culture
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCultureCompanyCompanyUidProductsGet: function (companyUid, culture, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.apiCultureCompanyCompanyUidProductsGet(companyUid, culture, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1["default"], base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @param {string} companyuid
         * @param {string} culture
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCultureCompanyCompanyuidCustomersGet: function (companyuid, culture, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.apiCultureCompanyCompanyuidCustomersGet(companyuid, culture, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1["default"], base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @param {string} companyuid
         * @param {string} culture
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCultureCompanyCompanyuidSuppliersGet: function (companyuid, culture, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.apiCultureCompanyCompanyuidSuppliersGet(companyuid, culture, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1["default"], base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @param {string} companyuid
         * @param {string} culture
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCultureCompanyCompanyuidTemplatesGet: function (companyuid, culture, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.apiCultureCompanyCompanyuidTemplatesGet(companyuid, culture, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1["default"], base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @param {string} culture
         * @param {DeleteCompanyContactCommand} [deleteCompanyContactCommand]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCultureCompanyContactsDelete: function (culture, deleteCompanyContactCommand, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.apiCultureCompanyContactsDelete(culture, deleteCompanyContactCommand, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1["default"], base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @param {string} culture
         * @param {string} [data]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCultureCompanyContactsPost: function (culture, data, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.apiCultureCompanyContactsPost(culture, data, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1["default"], base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @param {string} culture
         * @param {string} [data]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCultureCompanyContactsPut: function (culture, data, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.apiCultureCompanyContactsPut(culture, data, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1["default"], base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @param {string} culture
         * @param {DeleteCompanyCommand} [deleteCompanyCommand]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCultureCompanyDelete: function (culture, deleteCompanyCommand, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.apiCultureCompanyDelete(culture, deleteCompanyCommand, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1["default"], base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @param {string} culture
         * @param {DeleteCompanyFacilityPhotoCommand} [deleteCompanyFacilityPhotoCommand]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCultureCompanyFacilityPhotosDelete: function (culture, deleteCompanyFacilityPhotoCommand, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.apiCultureCompanyFacilityPhotosDelete(culture, deleteCompanyFacilityPhotoCommand, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1["default"], base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @param {string} culture
         * @param {string} [data]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCultureCompanyFacilityPhotosPost: function (culture, data, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.apiCultureCompanyFacilityPhotosPost(culture, data, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1["default"], base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @param {string} culture
         * @param {string} [data]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCultureCompanyPost: function (culture, data, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.apiCultureCompanyPost(culture, data, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1["default"], base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @param {string} culture
         * @param {DeleteCompanyProductCommand} [deleteCompanyProductCommand]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCultureCompanyProductsDelete: function (culture, deleteCompanyProductCommand, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.apiCultureCompanyProductsDelete(culture, deleteCompanyProductCommand, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1["default"], base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @param {string} culture
         * @param {CreateCompanyProductCommand} [createCompanyProductCommand]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCultureCompanyProductsPost: function (culture, createCompanyProductCommand, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.apiCultureCompanyProductsPost(culture, createCompanyProductCommand, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1["default"], base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @param {string} culture
         * @param {UpdateCompanyProductCommand} [updateCompanyProductCommand]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCultureCompanyProductsPut: function (culture, updateCompanyProductCommand, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.apiCultureCompanyProductsPut(culture, updateCompanyProductCommand, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1["default"], base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @param {string} culture
         * @param {string} [data]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCultureCompanyPut: function (culture, data, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.apiCultureCompanyPut(culture, data, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1["default"], base_1.BASE_PATH, configuration)];
                    }
                });
            });
        }
    };
};
/**
 * CompanyApi - factory interface
 * @export
 */
exports.CompanyApiFactory = function (configuration, basePath, axios) {
    var localVarFp = exports.CompanyApiFp(configuration);
    return {
        /**
         *
         * @param {string} culture
         * @param {DeleteCompanyCertificateCommand} [deleteCompanyCertificateCommand]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCultureCompanyCertificatesDelete: function (culture, deleteCompanyCertificateCommand, options) {
            return localVarFp.apiCultureCompanyCertificatesDelete(culture, deleteCompanyCertificateCommand, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {string} culture
         * @param {string} [data]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCultureCompanyCertificatesPost: function (culture, data, options) {
            return localVarFp.apiCultureCompanyCertificatesPost(culture, data, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {string} companyUid
         * @param {string} culture
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCultureCompanyCompanyUidCertificatesGet: function (companyUid, culture, options) {
            return localVarFp.apiCultureCompanyCompanyUidCertificatesGet(companyUid, culture, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {string} companyUid
         * @param {string} culture
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCultureCompanyCompanyUidContactsGet: function (companyUid, culture, options) {
            return localVarFp.apiCultureCompanyCompanyUidContactsGet(companyUid, culture, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {string} companyUid
         * @param {string} culture
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCultureCompanyCompanyUidFacilityPhotosGet: function (companyUid, culture, options) {
            return localVarFp.apiCultureCompanyCompanyUidFacilityPhotosGet(companyUid, culture, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {string} companyUid
         * @param {string} culture
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCultureCompanyCompanyUidGet: function (companyUid, culture, options) {
            return localVarFp.apiCultureCompanyCompanyUidGet(companyUid, culture, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {string} companyUid
         * @param {string} culture
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCultureCompanyCompanyUidProductsGet: function (companyUid, culture, options) {
            return localVarFp.apiCultureCompanyCompanyUidProductsGet(companyUid, culture, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {string} companyuid
         * @param {string} culture
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCultureCompanyCompanyuidCustomersGet: function (companyuid, culture, options) {
            return localVarFp.apiCultureCompanyCompanyuidCustomersGet(companyuid, culture, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {string} companyuid
         * @param {string} culture
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCultureCompanyCompanyuidSuppliersGet: function (companyuid, culture, options) {
            return localVarFp.apiCultureCompanyCompanyuidSuppliersGet(companyuid, culture, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {string} companyuid
         * @param {string} culture
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCultureCompanyCompanyuidTemplatesGet: function (companyuid, culture, options) {
            return localVarFp.apiCultureCompanyCompanyuidTemplatesGet(companyuid, culture, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {string} culture
         * @param {DeleteCompanyContactCommand} [deleteCompanyContactCommand]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCultureCompanyContactsDelete: function (culture, deleteCompanyContactCommand, options) {
            return localVarFp.apiCultureCompanyContactsDelete(culture, deleteCompanyContactCommand, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {string} culture
         * @param {string} [data]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCultureCompanyContactsPost: function (culture, data, options) {
            return localVarFp.apiCultureCompanyContactsPost(culture, data, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {string} culture
         * @param {string} [data]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCultureCompanyContactsPut: function (culture, data, options) {
            return localVarFp.apiCultureCompanyContactsPut(culture, data, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {string} culture
         * @param {DeleteCompanyCommand} [deleteCompanyCommand]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCultureCompanyDelete: function (culture, deleteCompanyCommand, options) {
            return localVarFp.apiCultureCompanyDelete(culture, deleteCompanyCommand, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {string} culture
         * @param {DeleteCompanyFacilityPhotoCommand} [deleteCompanyFacilityPhotoCommand]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCultureCompanyFacilityPhotosDelete: function (culture, deleteCompanyFacilityPhotoCommand, options) {
            return localVarFp.apiCultureCompanyFacilityPhotosDelete(culture, deleteCompanyFacilityPhotoCommand, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {string} culture
         * @param {string} [data]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCultureCompanyFacilityPhotosPost: function (culture, data, options) {
            return localVarFp.apiCultureCompanyFacilityPhotosPost(culture, data, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {string} culture
         * @param {string} [data]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCultureCompanyPost: function (culture, data, options) {
            return localVarFp.apiCultureCompanyPost(culture, data, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {string} culture
         * @param {DeleteCompanyProductCommand} [deleteCompanyProductCommand]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCultureCompanyProductsDelete: function (culture, deleteCompanyProductCommand, options) {
            return localVarFp.apiCultureCompanyProductsDelete(culture, deleteCompanyProductCommand, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {string} culture
         * @param {CreateCompanyProductCommand} [createCompanyProductCommand]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCultureCompanyProductsPost: function (culture, createCompanyProductCommand, options) {
            return localVarFp.apiCultureCompanyProductsPost(culture, createCompanyProductCommand, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {string} culture
         * @param {UpdateCompanyProductCommand} [updateCompanyProductCommand]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCultureCompanyProductsPut: function (culture, updateCompanyProductCommand, options) {
            return localVarFp.apiCultureCompanyProductsPut(culture, updateCompanyProductCommand, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {string} culture
         * @param {string} [data]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCultureCompanyPut: function (culture, data, options) {
            return localVarFp.apiCultureCompanyPut(culture, data, options).then(function (request) { return request(axios, basePath); });
        }
    };
};
/**
 * CompanyApi - object-oriented interface
 * @export
 * @class CompanyApi
 * @extends {BaseAPI}
 */
var CompanyApi = /** @class */ (function (_super) {
    __extends(CompanyApi, _super);
    function CompanyApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     *
     * @param {string} culture
     * @param {DeleteCompanyCertificateCommand} [deleteCompanyCertificateCommand]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CompanyApi
     */
    CompanyApi.prototype.apiCultureCompanyCertificatesDelete = function (culture, deleteCompanyCertificateCommand, options) {
        var _this = this;
        return exports.CompanyApiFp(this.configuration).apiCultureCompanyCertificatesDelete(culture, deleteCompanyCertificateCommand, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {string} culture
     * @param {string} [data]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CompanyApi
     */
    CompanyApi.prototype.apiCultureCompanyCertificatesPost = function (culture, data, options) {
        var _this = this;
        return exports.CompanyApiFp(this.configuration).apiCultureCompanyCertificatesPost(culture, data, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {string} companyUid
     * @param {string} culture
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CompanyApi
     */
    CompanyApi.prototype.apiCultureCompanyCompanyUidCertificatesGet = function (companyUid, culture, options) {
        var _this = this;
        return exports.CompanyApiFp(this.configuration).apiCultureCompanyCompanyUidCertificatesGet(companyUid, culture, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {string} companyUid
     * @param {string} culture
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CompanyApi
     */
    CompanyApi.prototype.apiCultureCompanyCompanyUidContactsGet = function (companyUid, culture, options) {
        var _this = this;
        return exports.CompanyApiFp(this.configuration).apiCultureCompanyCompanyUidContactsGet(companyUid, culture, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {string} companyUid
     * @param {string} culture
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CompanyApi
     */
    CompanyApi.prototype.apiCultureCompanyCompanyUidFacilityPhotosGet = function (companyUid, culture, options) {
        var _this = this;
        return exports.CompanyApiFp(this.configuration).apiCultureCompanyCompanyUidFacilityPhotosGet(companyUid, culture, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {string} companyUid
     * @param {string} culture
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CompanyApi
     */
    CompanyApi.prototype.apiCultureCompanyCompanyUidGet = function (companyUid, culture, options) {
        var _this = this;
        return exports.CompanyApiFp(this.configuration).apiCultureCompanyCompanyUidGet(companyUid, culture, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {string} companyUid
     * @param {string} culture
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CompanyApi
     */
    CompanyApi.prototype.apiCultureCompanyCompanyUidProductsGet = function (companyUid, culture, options) {
        var _this = this;
        return exports.CompanyApiFp(this.configuration).apiCultureCompanyCompanyUidProductsGet(companyUid, culture, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {string} companyuid
     * @param {string} culture
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CompanyApi
     */
    CompanyApi.prototype.apiCultureCompanyCompanyuidCustomersGet = function (companyuid, culture, options) {
        var _this = this;
        return exports.CompanyApiFp(this.configuration).apiCultureCompanyCompanyuidCustomersGet(companyuid, culture, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {string} companyuid
     * @param {string} culture
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CompanyApi
     */
    CompanyApi.prototype.apiCultureCompanyCompanyuidSuppliersGet = function (companyuid, culture, options) {
        var _this = this;
        return exports.CompanyApiFp(this.configuration).apiCultureCompanyCompanyuidSuppliersGet(companyuid, culture, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {string} companyuid
     * @param {string} culture
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CompanyApi
     */
    CompanyApi.prototype.apiCultureCompanyCompanyuidTemplatesGet = function (companyuid, culture, options) {
        var _this = this;
        return exports.CompanyApiFp(this.configuration).apiCultureCompanyCompanyuidTemplatesGet(companyuid, culture, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {string} culture
     * @param {DeleteCompanyContactCommand} [deleteCompanyContactCommand]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CompanyApi
     */
    CompanyApi.prototype.apiCultureCompanyContactsDelete = function (culture, deleteCompanyContactCommand, options) {
        var _this = this;
        return exports.CompanyApiFp(this.configuration).apiCultureCompanyContactsDelete(culture, deleteCompanyContactCommand, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {string} culture
     * @param {string} [data]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CompanyApi
     */
    CompanyApi.prototype.apiCultureCompanyContactsPost = function (culture, data, options) {
        var _this = this;
        return exports.CompanyApiFp(this.configuration).apiCultureCompanyContactsPost(culture, data, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {string} culture
     * @param {string} [data]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CompanyApi
     */
    CompanyApi.prototype.apiCultureCompanyContactsPut = function (culture, data, options) {
        var _this = this;
        return exports.CompanyApiFp(this.configuration).apiCultureCompanyContactsPut(culture, data, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {string} culture
     * @param {DeleteCompanyCommand} [deleteCompanyCommand]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CompanyApi
     */
    CompanyApi.prototype.apiCultureCompanyDelete = function (culture, deleteCompanyCommand, options) {
        var _this = this;
        return exports.CompanyApiFp(this.configuration).apiCultureCompanyDelete(culture, deleteCompanyCommand, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {string} culture
     * @param {DeleteCompanyFacilityPhotoCommand} [deleteCompanyFacilityPhotoCommand]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CompanyApi
     */
    CompanyApi.prototype.apiCultureCompanyFacilityPhotosDelete = function (culture, deleteCompanyFacilityPhotoCommand, options) {
        var _this = this;
        return exports.CompanyApiFp(this.configuration).apiCultureCompanyFacilityPhotosDelete(culture, deleteCompanyFacilityPhotoCommand, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {string} culture
     * @param {string} [data]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CompanyApi
     */
    CompanyApi.prototype.apiCultureCompanyFacilityPhotosPost = function (culture, data, options) {
        var _this = this;
        return exports.CompanyApiFp(this.configuration).apiCultureCompanyFacilityPhotosPost(culture, data, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {string} culture
     * @param {string} [data]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CompanyApi
     */
    CompanyApi.prototype.apiCultureCompanyPost = function (culture, data, options) {
        var _this = this;
        return exports.CompanyApiFp(this.configuration).apiCultureCompanyPost(culture, data, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {string} culture
     * @param {DeleteCompanyProductCommand} [deleteCompanyProductCommand]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CompanyApi
     */
    CompanyApi.prototype.apiCultureCompanyProductsDelete = function (culture, deleteCompanyProductCommand, options) {
        var _this = this;
        return exports.CompanyApiFp(this.configuration).apiCultureCompanyProductsDelete(culture, deleteCompanyProductCommand, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {string} culture
     * @param {CreateCompanyProductCommand} [createCompanyProductCommand]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CompanyApi
     */
    CompanyApi.prototype.apiCultureCompanyProductsPost = function (culture, createCompanyProductCommand, options) {
        var _this = this;
        return exports.CompanyApiFp(this.configuration).apiCultureCompanyProductsPost(culture, createCompanyProductCommand, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {string} culture
     * @param {UpdateCompanyProductCommand} [updateCompanyProductCommand]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CompanyApi
     */
    CompanyApi.prototype.apiCultureCompanyProductsPut = function (culture, updateCompanyProductCommand, options) {
        var _this = this;
        return exports.CompanyApiFp(this.configuration).apiCultureCompanyProductsPut(culture, updateCompanyProductCommand, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {string} culture
     * @param {string} [data]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CompanyApi
     */
    CompanyApi.prototype.apiCultureCompanyPut = function (culture, data, options) {
        var _this = this;
        return exports.CompanyApiFp(this.configuration).apiCultureCompanyPut(culture, data, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return CompanyApi;
}(base_1.BaseAPI));
exports.CompanyApi = CompanyApi;
