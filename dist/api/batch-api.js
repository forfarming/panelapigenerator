"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Api
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
exports.__esModule = true;
exports.BatchApi = exports.BatchApiFactory = exports.BatchApiFp = exports.BatchApiAxiosParamCreator = void 0;
var axios_1 = require("axios");
// Some imports not used depending on template conditions
// @ts-ignore
var common_1 = require("../common");
// @ts-ignore
var base_1 = require("../base");
/**
 * BatchApi - axios parameter creator
 * @export
 */
exports.BatchApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         *
         * @param {string} companyUid
         * @param {string} batchUid
         * @param {string} culture
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCultureBatchCompanyUidBatchUidGet: function (companyUid, batchUid, culture, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'companyUid' is not null or undefined
                            common_1.assertParamExists('apiCultureBatchCompanyUidBatchUidGet', 'companyUid', companyUid);
                            // verify required parameter 'batchUid' is not null or undefined
                            common_1.assertParamExists('apiCultureBatchCompanyUidBatchUidGet', 'batchUid', batchUid);
                            // verify required parameter 'culture' is not null or undefined
                            common_1.assertParamExists('apiCultureBatchCompanyUidBatchUidGet', 'culture', culture);
                            localVarPath = "/api/{culture}/Batch/{companyUid}/{batchUid}"
                                .replace("{" + "companyUid" + "}", encodeURIComponent(String(companyUid)))
                                .replace("{" + "batchUid" + "}", encodeURIComponent(String(batchUid)))
                                .replace("{" + "culture" + "}", encodeURIComponent(String(culture)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication Bearer required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)];
                        case 1:
                            // authentication Bearer required
                            _a.sent();
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions
                                }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} companyUid
         * @param {string} culture
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCultureBatchCompanyUidDistributedGet: function (companyUid, culture, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'companyUid' is not null or undefined
                            common_1.assertParamExists('apiCultureBatchCompanyUidDistributedGet', 'companyUid', companyUid);
                            // verify required parameter 'culture' is not null or undefined
                            common_1.assertParamExists('apiCultureBatchCompanyUidDistributedGet', 'culture', culture);
                            localVarPath = "/api/{culture}/Batch/{companyUid}/distributed"
                                .replace("{" + "companyUid" + "}", encodeURIComponent(String(companyUid)))
                                .replace("{" + "culture" + "}", encodeURIComponent(String(culture)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication Bearer required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)];
                        case 1:
                            // authentication Bearer required
                            _a.sent();
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions
                                }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} companyUid
         * @param {string} culture
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCultureBatchCompanyUidHarvestedGet: function (companyUid, culture, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'companyUid' is not null or undefined
                            common_1.assertParamExists('apiCultureBatchCompanyUidHarvestedGet', 'companyUid', companyUid);
                            // verify required parameter 'culture' is not null or undefined
                            common_1.assertParamExists('apiCultureBatchCompanyUidHarvestedGet', 'culture', culture);
                            localVarPath = "/api/{culture}/Batch/{companyUid}/harvested"
                                .replace("{" + "companyUid" + "}", encodeURIComponent(String(companyUid)))
                                .replace("{" + "culture" + "}", encodeURIComponent(String(culture)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication Bearer required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)];
                        case 1:
                            // authentication Bearer required
                            _a.sent();
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions
                                }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} companyUid
         * @param {string} culture
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCultureBatchCompanyUidLatestGet: function (companyUid, culture, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'companyUid' is not null or undefined
                            common_1.assertParamExists('apiCultureBatchCompanyUidLatestGet', 'companyUid', companyUid);
                            // verify required parameter 'culture' is not null or undefined
                            common_1.assertParamExists('apiCultureBatchCompanyUidLatestGet', 'culture', culture);
                            localVarPath = "/api/{culture}/Batch/{companyUid}/latest"
                                .replace("{" + "companyUid" + "}", encodeURIComponent(String(companyUid)))
                                .replace("{" + "culture" + "}", encodeURIComponent(String(culture)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication Bearer required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)];
                        case 1:
                            // authentication Bearer required
                            _a.sent();
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions
                                }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} companyUid
         * @param {string} supplierUid
         * @param {string} culture
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCultureBatchCompanyUidSupplierSupplierUidGet: function (companyUid, supplierUid, culture, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'companyUid' is not null or undefined
                            common_1.assertParamExists('apiCultureBatchCompanyUidSupplierSupplierUidGet', 'companyUid', companyUid);
                            // verify required parameter 'supplierUid' is not null or undefined
                            common_1.assertParamExists('apiCultureBatchCompanyUidSupplierSupplierUidGet', 'supplierUid', supplierUid);
                            // verify required parameter 'culture' is not null or undefined
                            common_1.assertParamExists('apiCultureBatchCompanyUidSupplierSupplierUidGet', 'culture', culture);
                            localVarPath = "/api/{culture}/Batch/{companyUid}/supplier/{supplierUid}"
                                .replace("{" + "companyUid" + "}", encodeURIComponent(String(companyUid)))
                                .replace("{" + "supplierUid" + "}", encodeURIComponent(String(supplierUid)))
                                .replace("{" + "culture" + "}", encodeURIComponent(String(culture)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication Bearer required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)];
                        case 1:
                            // authentication Bearer required
                            _a.sent();
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions
                                }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} culture
         * @param {DeleteBatchCommand} [deleteBatchCommand]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCultureBatchDelete: function (culture, deleteBatchCommand, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'culture' is not null or undefined
                            common_1.assertParamExists('apiCultureBatchDelete', 'culture', culture);
                            localVarPath = "/api/{culture}/Batch"
                                .replace("{" + "culture" + "}", encodeURIComponent(String(culture)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'DELETE' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication Bearer required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)];
                        case 1:
                            // authentication Bearer required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = common_1.serializeDataIfNeeded(deleteBatchCommand, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions
                                }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} culture
         * @param {CreateBatchCommand} [createBatchCommand]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCultureBatchPost: function (culture, createBatchCommand, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'culture' is not null or undefined
                            common_1.assertParamExists('apiCultureBatchPost', 'culture', culture);
                            localVarPath = "/api/{culture}/Batch"
                                .replace("{" + "culture" + "}", encodeURIComponent(String(culture)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication Bearer required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)];
                        case 1:
                            // authentication Bearer required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = common_1.serializeDataIfNeeded(createBatchCommand, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions
                                }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} culture
         * @param {UpdateBatchCommand} [updateBatchCommand]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCultureBatchPut: function (culture, updateBatchCommand, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'culture' is not null or undefined
                            common_1.assertParamExists('apiCultureBatchPut', 'culture', culture);
                            localVarPath = "/api/{culture}/Batch"
                                .replace("{" + "culture" + "}", encodeURIComponent(String(culture)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'PUT' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication Bearer required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)];
                        case 1:
                            // authentication Bearer required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = common_1.serializeDataIfNeeded(updateBatchCommand, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions
                                }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} uid
         * @param {string} culture
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCultureBatchUidQrcodeGet: function (uid, culture, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'uid' is not null or undefined
                            common_1.assertParamExists('apiCultureBatchUidQrcodeGet', 'uid', uid);
                            // verify required parameter 'culture' is not null or undefined
                            common_1.assertParamExists('apiCultureBatchUidQrcodeGet', 'culture', culture);
                            localVarPath = "/api/{culture}/Batch/{uid}/qrcode"
                                .replace("{" + "uid" + "}", encodeURIComponent(String(uid)))
                                .replace("{" + "culture" + "}", encodeURIComponent(String(culture)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication Bearer required
                            return [4 /*yield*/, common_1.setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)];
                        case 1:
                            // authentication Bearer required
                            _a.sent();
                            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: common_1.toPathString(localVarUrlObj),
                                    options: localVarRequestOptions
                                }];
                    }
                });
            });
        }
    };
};
/**
 * BatchApi - functional programming interface
 * @export
 */
exports.BatchApiFp = function (configuration) {
    var localVarAxiosParamCreator = exports.BatchApiAxiosParamCreator(configuration);
    return {
        /**
         *
         * @param {string} companyUid
         * @param {string} batchUid
         * @param {string} culture
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCultureBatchCompanyUidBatchUidGet: function (companyUid, batchUid, culture, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.apiCultureBatchCompanyUidBatchUidGet(companyUid, batchUid, culture, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1["default"], base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @param {string} companyUid
         * @param {string} culture
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCultureBatchCompanyUidDistributedGet: function (companyUid, culture, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.apiCultureBatchCompanyUidDistributedGet(companyUid, culture, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1["default"], base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @param {string} companyUid
         * @param {string} culture
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCultureBatchCompanyUidHarvestedGet: function (companyUid, culture, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.apiCultureBatchCompanyUidHarvestedGet(companyUid, culture, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1["default"], base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @param {string} companyUid
         * @param {string} culture
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCultureBatchCompanyUidLatestGet: function (companyUid, culture, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.apiCultureBatchCompanyUidLatestGet(companyUid, culture, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1["default"], base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @param {string} companyUid
         * @param {string} supplierUid
         * @param {string} culture
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCultureBatchCompanyUidSupplierSupplierUidGet: function (companyUid, supplierUid, culture, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.apiCultureBatchCompanyUidSupplierSupplierUidGet(companyUid, supplierUid, culture, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1["default"], base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @param {string} culture
         * @param {DeleteBatchCommand} [deleteBatchCommand]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCultureBatchDelete: function (culture, deleteBatchCommand, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.apiCultureBatchDelete(culture, deleteBatchCommand, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1["default"], base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @param {string} culture
         * @param {CreateBatchCommand} [createBatchCommand]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCultureBatchPost: function (culture, createBatchCommand, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.apiCultureBatchPost(culture, createBatchCommand, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1["default"], base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @param {string} culture
         * @param {UpdateBatchCommand} [updateBatchCommand]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCultureBatchPut: function (culture, updateBatchCommand, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.apiCultureBatchPut(culture, updateBatchCommand, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1["default"], base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @param {string} uid
         * @param {string} culture
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCultureBatchUidQrcodeGet: function (uid, culture, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.apiCultureBatchUidQrcodeGet(uid, culture, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, common_1.createRequestFunction(localVarAxiosArgs, axios_1["default"], base_1.BASE_PATH, configuration)];
                    }
                });
            });
        }
    };
};
/**
 * BatchApi - factory interface
 * @export
 */
exports.BatchApiFactory = function (configuration, basePath, axios) {
    var localVarFp = exports.BatchApiFp(configuration);
    return {
        /**
         *
         * @param {string} companyUid
         * @param {string} batchUid
         * @param {string} culture
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCultureBatchCompanyUidBatchUidGet: function (companyUid, batchUid, culture, options) {
            return localVarFp.apiCultureBatchCompanyUidBatchUidGet(companyUid, batchUid, culture, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {string} companyUid
         * @param {string} culture
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCultureBatchCompanyUidDistributedGet: function (companyUid, culture, options) {
            return localVarFp.apiCultureBatchCompanyUidDistributedGet(companyUid, culture, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {string} companyUid
         * @param {string} culture
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCultureBatchCompanyUidHarvestedGet: function (companyUid, culture, options) {
            return localVarFp.apiCultureBatchCompanyUidHarvestedGet(companyUid, culture, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {string} companyUid
         * @param {string} culture
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCultureBatchCompanyUidLatestGet: function (companyUid, culture, options) {
            return localVarFp.apiCultureBatchCompanyUidLatestGet(companyUid, culture, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {string} companyUid
         * @param {string} supplierUid
         * @param {string} culture
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCultureBatchCompanyUidSupplierSupplierUidGet: function (companyUid, supplierUid, culture, options) {
            return localVarFp.apiCultureBatchCompanyUidSupplierSupplierUidGet(companyUid, supplierUid, culture, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {string} culture
         * @param {DeleteBatchCommand} [deleteBatchCommand]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCultureBatchDelete: function (culture, deleteBatchCommand, options) {
            return localVarFp.apiCultureBatchDelete(culture, deleteBatchCommand, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {string} culture
         * @param {CreateBatchCommand} [createBatchCommand]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCultureBatchPost: function (culture, createBatchCommand, options) {
            return localVarFp.apiCultureBatchPost(culture, createBatchCommand, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {string} culture
         * @param {UpdateBatchCommand} [updateBatchCommand]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCultureBatchPut: function (culture, updateBatchCommand, options) {
            return localVarFp.apiCultureBatchPut(culture, updateBatchCommand, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {string} uid
         * @param {string} culture
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCultureBatchUidQrcodeGet: function (uid, culture, options) {
            return localVarFp.apiCultureBatchUidQrcodeGet(uid, culture, options).then(function (request) { return request(axios, basePath); });
        }
    };
};
/**
 * BatchApi - object-oriented interface
 * @export
 * @class BatchApi
 * @extends {BaseAPI}
 */
var BatchApi = /** @class */ (function (_super) {
    __extends(BatchApi, _super);
    function BatchApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     *
     * @param {string} companyUid
     * @param {string} batchUid
     * @param {string} culture
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BatchApi
     */
    BatchApi.prototype.apiCultureBatchCompanyUidBatchUidGet = function (companyUid, batchUid, culture, options) {
        var _this = this;
        return exports.BatchApiFp(this.configuration).apiCultureBatchCompanyUidBatchUidGet(companyUid, batchUid, culture, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {string} companyUid
     * @param {string} culture
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BatchApi
     */
    BatchApi.prototype.apiCultureBatchCompanyUidDistributedGet = function (companyUid, culture, options) {
        var _this = this;
        return exports.BatchApiFp(this.configuration).apiCultureBatchCompanyUidDistributedGet(companyUid, culture, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {string} companyUid
     * @param {string} culture
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BatchApi
     */
    BatchApi.prototype.apiCultureBatchCompanyUidHarvestedGet = function (companyUid, culture, options) {
        var _this = this;
        return exports.BatchApiFp(this.configuration).apiCultureBatchCompanyUidHarvestedGet(companyUid, culture, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {string} companyUid
     * @param {string} culture
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BatchApi
     */
    BatchApi.prototype.apiCultureBatchCompanyUidLatestGet = function (companyUid, culture, options) {
        var _this = this;
        return exports.BatchApiFp(this.configuration).apiCultureBatchCompanyUidLatestGet(companyUid, culture, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {string} companyUid
     * @param {string} supplierUid
     * @param {string} culture
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BatchApi
     */
    BatchApi.prototype.apiCultureBatchCompanyUidSupplierSupplierUidGet = function (companyUid, supplierUid, culture, options) {
        var _this = this;
        return exports.BatchApiFp(this.configuration).apiCultureBatchCompanyUidSupplierSupplierUidGet(companyUid, supplierUid, culture, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {string} culture
     * @param {DeleteBatchCommand} [deleteBatchCommand]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BatchApi
     */
    BatchApi.prototype.apiCultureBatchDelete = function (culture, deleteBatchCommand, options) {
        var _this = this;
        return exports.BatchApiFp(this.configuration).apiCultureBatchDelete(culture, deleteBatchCommand, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {string} culture
     * @param {CreateBatchCommand} [createBatchCommand]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BatchApi
     */
    BatchApi.prototype.apiCultureBatchPost = function (culture, createBatchCommand, options) {
        var _this = this;
        return exports.BatchApiFp(this.configuration).apiCultureBatchPost(culture, createBatchCommand, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {string} culture
     * @param {UpdateBatchCommand} [updateBatchCommand]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BatchApi
     */
    BatchApi.prototype.apiCultureBatchPut = function (culture, updateBatchCommand, options) {
        var _this = this;
        return exports.BatchApiFp(this.configuration).apiCultureBatchPut(culture, updateBatchCommand, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {string} uid
     * @param {string} culture
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BatchApi
     */
    BatchApi.prototype.apiCultureBatchUidQrcodeGet = function (uid, culture, options) {
        var _this = this;
        return exports.BatchApiFp(this.configuration).apiCultureBatchUidQrcodeGet(uid, culture, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return BatchApi;
}(base_1.BaseAPI));
exports.BatchApi = BatchApi;
