/* tslint:disable */
/* eslint-disable */
/**
 * Api
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { CreateProductionCommand } from '../model';
// @ts-ignore
import { DeleteProductionCommand } from '../model';
// @ts-ignore
import { ProblemDetails } from '../model';
// @ts-ignore
import { UpdateProductionCommand } from '../model';
/**
 * ProductionApi - axios parameter creator
 * @export
 */
export const ProductionApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} companyUid 
         * @param {string} productionUid 
         * @param {string} culture 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCultureProductionCompanyUidProductionProductionUidGet: async (companyUid: string, productionUid: string, culture: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyUid' is not null or undefined
            assertParamExists('apiCultureProductionCompanyUidProductionProductionUidGet', 'companyUid', companyUid)
            // verify required parameter 'productionUid' is not null or undefined
            assertParamExists('apiCultureProductionCompanyUidProductionProductionUidGet', 'productionUid', productionUid)
            // verify required parameter 'culture' is not null or undefined
            assertParamExists('apiCultureProductionCompanyUidProductionProductionUidGet', 'culture', culture)
            const localVarPath = `/api/{culture}/Production/{companyUid}/production/{productionUid}`
                .replace(`{${"companyUid"}}`, encodeURIComponent(String(companyUid)))
                .replace(`{${"productionUid"}}`, encodeURIComponent(String(productionUid)))
                .replace(`{${"culture"}}`, encodeURIComponent(String(culture)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} companyUid 
         * @param {string} supplierUid 
         * @param {string} culture 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCultureProductionCompanyUidSupplierUidGet: async (companyUid: string, supplierUid: string, culture: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyUid' is not null or undefined
            assertParamExists('apiCultureProductionCompanyUidSupplierUidGet', 'companyUid', companyUid)
            // verify required parameter 'supplierUid' is not null or undefined
            assertParamExists('apiCultureProductionCompanyUidSupplierUidGet', 'supplierUid', supplierUid)
            // verify required parameter 'culture' is not null or undefined
            assertParamExists('apiCultureProductionCompanyUidSupplierUidGet', 'culture', culture)
            const localVarPath = `/api/{culture}/Production/{companyUid}/{supplierUid}`
                .replace(`{${"companyUid"}}`, encodeURIComponent(String(companyUid)))
                .replace(`{${"supplierUid"}}`, encodeURIComponent(String(supplierUid)))
                .replace(`{${"culture"}}`, encodeURIComponent(String(culture)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} culture 
         * @param {DeleteProductionCommand} [deleteProductionCommand] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCultureProductionDelete: async (culture: string, deleteProductionCommand?: DeleteProductionCommand, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'culture' is not null or undefined
            assertParamExists('apiCultureProductionDelete', 'culture', culture)
            const localVarPath = `/api/{culture}/Production`
                .replace(`{${"culture"}}`, encodeURIComponent(String(culture)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(deleteProductionCommand, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} culture 
         * @param {CreateProductionCommand} [createProductionCommand] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCultureProductionPost: async (culture: string, createProductionCommand?: CreateProductionCommand, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'culture' is not null or undefined
            assertParamExists('apiCultureProductionPost', 'culture', culture)
            const localVarPath = `/api/{culture}/Production`
                .replace(`{${"culture"}}`, encodeURIComponent(String(culture)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createProductionCommand, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} culture 
         * @param {UpdateProductionCommand} [updateProductionCommand] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCultureProductionPut: async (culture: string, updateProductionCommand?: UpdateProductionCommand, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'culture' is not null or undefined
            assertParamExists('apiCultureProductionPut', 'culture', culture)
            const localVarPath = `/api/{culture}/Production`
                .replace(`{${"culture"}}`, encodeURIComponent(String(culture)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateProductionCommand, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} supplierUid 
         * @param {string} productionUid 
         * @param {string} culture 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCultureProductionSupplierUidProductionUidBatchesGet: async (supplierUid: string, productionUid: string, culture: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'supplierUid' is not null or undefined
            assertParamExists('apiCultureProductionSupplierUidProductionUidBatchesGet', 'supplierUid', supplierUid)
            // verify required parameter 'productionUid' is not null or undefined
            assertParamExists('apiCultureProductionSupplierUidProductionUidBatchesGet', 'productionUid', productionUid)
            // verify required parameter 'culture' is not null or undefined
            assertParamExists('apiCultureProductionSupplierUidProductionUidBatchesGet', 'culture', culture)
            const localVarPath = `/api/{culture}/Production/{supplierUid}/{productionUid}/batches`
                .replace(`{${"supplierUid"}}`, encodeURIComponent(String(supplierUid)))
                .replace(`{${"productionUid"}}`, encodeURIComponent(String(productionUid)))
                .replace(`{${"culture"}}`, encodeURIComponent(String(culture)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} uid 
         * @param {string} culture 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCultureProductionUidQrcodeGet: async (uid: string, culture: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'uid' is not null or undefined
            assertParamExists('apiCultureProductionUidQrcodeGet', 'uid', uid)
            // verify required parameter 'culture' is not null or undefined
            assertParamExists('apiCultureProductionUidQrcodeGet', 'culture', culture)
            const localVarPath = `/api/{culture}/Production/{uid}/qrcode`
                .replace(`{${"uid"}}`, encodeURIComponent(String(uid)))
                .replace(`{${"culture"}}`, encodeURIComponent(String(culture)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ProductionApi - functional programming interface
 * @export
 */
export const ProductionApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ProductionApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {string} companyUid 
         * @param {string} productionUid 
         * @param {string} culture 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiCultureProductionCompanyUidProductionProductionUidGet(companyUid: string, productionUid: string, culture: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiCultureProductionCompanyUidProductionProductionUidGet(companyUid, productionUid, culture, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} companyUid 
         * @param {string} supplierUid 
         * @param {string} culture 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiCultureProductionCompanyUidSupplierUidGet(companyUid: string, supplierUid: string, culture: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiCultureProductionCompanyUidSupplierUidGet(companyUid, supplierUid, culture, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} culture 
         * @param {DeleteProductionCommand} [deleteProductionCommand] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiCultureProductionDelete(culture: string, deleteProductionCommand?: DeleteProductionCommand, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeleteProductionCommand>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiCultureProductionDelete(culture, deleteProductionCommand, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} culture 
         * @param {CreateProductionCommand} [createProductionCommand] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiCultureProductionPost(culture: string, createProductionCommand?: CreateProductionCommand, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateProductionCommand>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiCultureProductionPost(culture, createProductionCommand, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} culture 
         * @param {UpdateProductionCommand} [updateProductionCommand] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiCultureProductionPut(culture: string, updateProductionCommand?: UpdateProductionCommand, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UpdateProductionCommand>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiCultureProductionPut(culture, updateProductionCommand, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} supplierUid 
         * @param {string} productionUid 
         * @param {string} culture 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiCultureProductionSupplierUidProductionUidBatchesGet(supplierUid: string, productionUid: string, culture: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiCultureProductionSupplierUidProductionUidBatchesGet(supplierUid, productionUid, culture, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} uid 
         * @param {string} culture 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiCultureProductionUidQrcodeGet(uid: string, culture: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiCultureProductionUidQrcodeGet(uid, culture, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ProductionApi - factory interface
 * @export
 */
export const ProductionApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ProductionApiFp(configuration)
    return {
        /**
         * 
         * @param {string} companyUid 
         * @param {string} productionUid 
         * @param {string} culture 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCultureProductionCompanyUidProductionProductionUidGet(companyUid: string, productionUid: string, culture: string, options?: any): AxiosPromise<void> {
            return localVarFp.apiCultureProductionCompanyUidProductionProductionUidGet(companyUid, productionUid, culture, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} companyUid 
         * @param {string} supplierUid 
         * @param {string} culture 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCultureProductionCompanyUidSupplierUidGet(companyUid: string, supplierUid: string, culture: string, options?: any): AxiosPromise<void> {
            return localVarFp.apiCultureProductionCompanyUidSupplierUidGet(companyUid, supplierUid, culture, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} culture 
         * @param {DeleteProductionCommand} [deleteProductionCommand] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCultureProductionDelete(culture: string, deleteProductionCommand?: DeleteProductionCommand, options?: any): AxiosPromise<DeleteProductionCommand> {
            return localVarFp.apiCultureProductionDelete(culture, deleteProductionCommand, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} culture 
         * @param {CreateProductionCommand} [createProductionCommand] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCultureProductionPost(culture: string, createProductionCommand?: CreateProductionCommand, options?: any): AxiosPromise<CreateProductionCommand> {
            return localVarFp.apiCultureProductionPost(culture, createProductionCommand, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} culture 
         * @param {UpdateProductionCommand} [updateProductionCommand] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCultureProductionPut(culture: string, updateProductionCommand?: UpdateProductionCommand, options?: any): AxiosPromise<UpdateProductionCommand> {
            return localVarFp.apiCultureProductionPut(culture, updateProductionCommand, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} supplierUid 
         * @param {string} productionUid 
         * @param {string} culture 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCultureProductionSupplierUidProductionUidBatchesGet(supplierUid: string, productionUid: string, culture: string, options?: any): AxiosPromise<void> {
            return localVarFp.apiCultureProductionSupplierUidProductionUidBatchesGet(supplierUid, productionUid, culture, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} uid 
         * @param {string} culture 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCultureProductionUidQrcodeGet(uid: string, culture: string, options?: any): AxiosPromise<void> {
            return localVarFp.apiCultureProductionUidQrcodeGet(uid, culture, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ProductionApi - interface
 * @export
 * @interface ProductionApi
 */
export interface ProductionApiInterface {
    /**
     * 
     * @param {string} companyUid 
     * @param {string} productionUid 
     * @param {string} culture 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductionApiInterface
     */
    apiCultureProductionCompanyUidProductionProductionUidGet(companyUid: string, productionUid: string, culture: string, options?: any): AxiosPromise<void>;

    /**
     * 
     * @param {string} companyUid 
     * @param {string} supplierUid 
     * @param {string} culture 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductionApiInterface
     */
    apiCultureProductionCompanyUidSupplierUidGet(companyUid: string, supplierUid: string, culture: string, options?: any): AxiosPromise<void>;

    /**
     * 
     * @param {string} culture 
     * @param {DeleteProductionCommand} [deleteProductionCommand] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductionApiInterface
     */
    apiCultureProductionDelete(culture: string, deleteProductionCommand?: DeleteProductionCommand, options?: any): AxiosPromise<DeleteProductionCommand>;

    /**
     * 
     * @param {string} culture 
     * @param {CreateProductionCommand} [createProductionCommand] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductionApiInterface
     */
    apiCultureProductionPost(culture: string, createProductionCommand?: CreateProductionCommand, options?: any): AxiosPromise<CreateProductionCommand>;

    /**
     * 
     * @param {string} culture 
     * @param {UpdateProductionCommand} [updateProductionCommand] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductionApiInterface
     */
    apiCultureProductionPut(culture: string, updateProductionCommand?: UpdateProductionCommand, options?: any): AxiosPromise<UpdateProductionCommand>;

    /**
     * 
     * @param {string} supplierUid 
     * @param {string} productionUid 
     * @param {string} culture 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductionApiInterface
     */
    apiCultureProductionSupplierUidProductionUidBatchesGet(supplierUid: string, productionUid: string, culture: string, options?: any): AxiosPromise<void>;

    /**
     * 
     * @param {string} uid 
     * @param {string} culture 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductionApiInterface
     */
    apiCultureProductionUidQrcodeGet(uid: string, culture: string, options?: any): AxiosPromise<void>;

}

/**
 * ProductionApi - object-oriented interface
 * @export
 * @class ProductionApi
 * @extends {BaseAPI}
 */
export class ProductionApi extends BaseAPI implements ProductionApiInterface {
    /**
     * 
     * @param {string} companyUid 
     * @param {string} productionUid 
     * @param {string} culture 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductionApi
     */
    public apiCultureProductionCompanyUidProductionProductionUidGet(companyUid: string, productionUid: string, culture: string, options?: any) {
        return ProductionApiFp(this.configuration).apiCultureProductionCompanyUidProductionProductionUidGet(companyUid, productionUid, culture, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} companyUid 
     * @param {string} supplierUid 
     * @param {string} culture 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductionApi
     */
    public apiCultureProductionCompanyUidSupplierUidGet(companyUid: string, supplierUid: string, culture: string, options?: any) {
        return ProductionApiFp(this.configuration).apiCultureProductionCompanyUidSupplierUidGet(companyUid, supplierUid, culture, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} culture 
     * @param {DeleteProductionCommand} [deleteProductionCommand] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductionApi
     */
    public apiCultureProductionDelete(culture: string, deleteProductionCommand?: DeleteProductionCommand, options?: any) {
        return ProductionApiFp(this.configuration).apiCultureProductionDelete(culture, deleteProductionCommand, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} culture 
     * @param {CreateProductionCommand} [createProductionCommand] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductionApi
     */
    public apiCultureProductionPost(culture: string, createProductionCommand?: CreateProductionCommand, options?: any) {
        return ProductionApiFp(this.configuration).apiCultureProductionPost(culture, createProductionCommand, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} culture 
     * @param {UpdateProductionCommand} [updateProductionCommand] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductionApi
     */
    public apiCultureProductionPut(culture: string, updateProductionCommand?: UpdateProductionCommand, options?: any) {
        return ProductionApiFp(this.configuration).apiCultureProductionPut(culture, updateProductionCommand, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} supplierUid 
     * @param {string} productionUid 
     * @param {string} culture 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductionApi
     */
    public apiCultureProductionSupplierUidProductionUidBatchesGet(supplierUid: string, productionUid: string, culture: string, options?: any) {
        return ProductionApiFp(this.configuration).apiCultureProductionSupplierUidProductionUidBatchesGet(supplierUid, productionUid, culture, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} uid 
     * @param {string} culture 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductionApi
     */
    public apiCultureProductionUidQrcodeGet(uid: string, culture: string, options?: any) {
        return ProductionApiFp(this.configuration).apiCultureProductionUidQrcodeGet(uid, culture, options).then((request) => request(this.axios, this.basePath));
    }
}
