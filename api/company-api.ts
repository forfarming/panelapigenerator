/* tslint:disable */
/* eslint-disable */
/**
 * Api
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { Company } from '../model';
// @ts-ignore
import { CreateCompanyProductCommand } from '../model';
// @ts-ignore
import { DeleteCompanyCertificateCommand } from '../model';
// @ts-ignore
import { DeleteCompanyCommand } from '../model';
// @ts-ignore
import { DeleteCompanyContactCommand } from '../model';
// @ts-ignore
import { DeleteCompanyFacilityPhotoCommand } from '../model';
// @ts-ignore
import { DeleteCompanyProductCommand } from '../model';
// @ts-ignore
import { ProblemDetails } from '../model';
// @ts-ignore
import { Template } from '../model';
// @ts-ignore
import { UpdateCompanyProductCommand } from '../model';
/**
 * CompanyApi - axios parameter creator
 * @export
 */
export const CompanyApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} culture 
         * @param {DeleteCompanyCertificateCommand} [deleteCompanyCertificateCommand] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCultureCompanyCertificatesDelete: async (culture: string, deleteCompanyCertificateCommand?: DeleteCompanyCertificateCommand, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'culture' is not null or undefined
            assertParamExists('apiCultureCompanyCertificatesDelete', 'culture', culture)
            const localVarPath = `/api/{culture}/Company/certificates`
                .replace(`{${"culture"}}`, encodeURIComponent(String(culture)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(deleteCompanyCertificateCommand, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} culture 
         * @param {string} [data] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCultureCompanyCertificatesPost: async (culture: string, data?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'culture' is not null or undefined
            assertParamExists('apiCultureCompanyCertificatesPost', 'culture', culture)
            const localVarPath = `/api/{culture}/Company/certificates`
                .replace(`{${"culture"}}`, encodeURIComponent(String(culture)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


            if (data !== undefined) { 
                localVarFormParams.append('data', data as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} companyUid 
         * @param {string} culture 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCultureCompanyCompanyUidCertificatesGet: async (companyUid: string, culture: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyUid' is not null or undefined
            assertParamExists('apiCultureCompanyCompanyUidCertificatesGet', 'companyUid', companyUid)
            // verify required parameter 'culture' is not null or undefined
            assertParamExists('apiCultureCompanyCompanyUidCertificatesGet', 'culture', culture)
            const localVarPath = `/api/{culture}/Company/{companyUid}/certificates`
                .replace(`{${"companyUid"}}`, encodeURIComponent(String(companyUid)))
                .replace(`{${"culture"}}`, encodeURIComponent(String(culture)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} companyUid 
         * @param {string} culture 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCultureCompanyCompanyUidContactsGet: async (companyUid: string, culture: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyUid' is not null or undefined
            assertParamExists('apiCultureCompanyCompanyUidContactsGet', 'companyUid', companyUid)
            // verify required parameter 'culture' is not null or undefined
            assertParamExists('apiCultureCompanyCompanyUidContactsGet', 'culture', culture)
            const localVarPath = `/api/{culture}/Company/{companyUid}/contacts`
                .replace(`{${"companyUid"}}`, encodeURIComponent(String(companyUid)))
                .replace(`{${"culture"}}`, encodeURIComponent(String(culture)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} companyUid 
         * @param {string} culture 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCultureCompanyCompanyUidFacilityPhotosGet: async (companyUid: string, culture: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyUid' is not null or undefined
            assertParamExists('apiCultureCompanyCompanyUidFacilityPhotosGet', 'companyUid', companyUid)
            // verify required parameter 'culture' is not null or undefined
            assertParamExists('apiCultureCompanyCompanyUidFacilityPhotosGet', 'culture', culture)
            const localVarPath = `/api/{culture}/Company/{companyUid}/facilityPhotos`
                .replace(`{${"companyUid"}}`, encodeURIComponent(String(companyUid)))
                .replace(`{${"culture"}}`, encodeURIComponent(String(culture)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} companyUid 
         * @param {string} culture 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCultureCompanyCompanyUidGet: async (companyUid: string, culture: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyUid' is not null or undefined
            assertParamExists('apiCultureCompanyCompanyUidGet', 'companyUid', companyUid)
            // verify required parameter 'culture' is not null or undefined
            assertParamExists('apiCultureCompanyCompanyUidGet', 'culture', culture)
            const localVarPath = `/api/{culture}/Company/{companyUid}`
                .replace(`{${"companyUid"}}`, encodeURIComponent(String(companyUid)))
                .replace(`{${"culture"}}`, encodeURIComponent(String(culture)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} companyUid 
         * @param {string} culture 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCultureCompanyCompanyUidProductsGet: async (companyUid: string, culture: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyUid' is not null or undefined
            assertParamExists('apiCultureCompanyCompanyUidProductsGet', 'companyUid', companyUid)
            // verify required parameter 'culture' is not null or undefined
            assertParamExists('apiCultureCompanyCompanyUidProductsGet', 'culture', culture)
            const localVarPath = `/api/{culture}/Company/{companyUid}/products`
                .replace(`{${"companyUid"}}`, encodeURIComponent(String(companyUid)))
                .replace(`{${"culture"}}`, encodeURIComponent(String(culture)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} companyuid 
         * @param {string} culture 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCultureCompanyCompanyuidCustomersGet: async (companyuid: string, culture: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyuid' is not null or undefined
            assertParamExists('apiCultureCompanyCompanyuidCustomersGet', 'companyuid', companyuid)
            // verify required parameter 'culture' is not null or undefined
            assertParamExists('apiCultureCompanyCompanyuidCustomersGet', 'culture', culture)
            const localVarPath = `/api/{culture}/Company/{companyuid}/customers`
                .replace(`{${"companyuid"}}`, encodeURIComponent(String(companyuid)))
                .replace(`{${"culture"}}`, encodeURIComponent(String(culture)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} companyuid 
         * @param {string} culture 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCultureCompanyCompanyuidSuppliersGet: async (companyuid: string, culture: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyuid' is not null or undefined
            assertParamExists('apiCultureCompanyCompanyuidSuppliersGet', 'companyuid', companyuid)
            // verify required parameter 'culture' is not null or undefined
            assertParamExists('apiCultureCompanyCompanyuidSuppliersGet', 'culture', culture)
            const localVarPath = `/api/{culture}/Company/{companyuid}/suppliers`
                .replace(`{${"companyuid"}}`, encodeURIComponent(String(companyuid)))
                .replace(`{${"culture"}}`, encodeURIComponent(String(culture)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} companyuid 
         * @param {string} culture 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCultureCompanyCompanyuidTemplatesGet: async (companyuid: string, culture: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyuid' is not null or undefined
            assertParamExists('apiCultureCompanyCompanyuidTemplatesGet', 'companyuid', companyuid)
            // verify required parameter 'culture' is not null or undefined
            assertParamExists('apiCultureCompanyCompanyuidTemplatesGet', 'culture', culture)
            const localVarPath = `/api/{culture}/Company/{companyuid}/templates`
                .replace(`{${"companyuid"}}`, encodeURIComponent(String(companyuid)))
                .replace(`{${"culture"}}`, encodeURIComponent(String(culture)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} culture 
         * @param {DeleteCompanyContactCommand} [deleteCompanyContactCommand] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCultureCompanyContactsDelete: async (culture: string, deleteCompanyContactCommand?: DeleteCompanyContactCommand, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'culture' is not null or undefined
            assertParamExists('apiCultureCompanyContactsDelete', 'culture', culture)
            const localVarPath = `/api/{culture}/Company/contacts`
                .replace(`{${"culture"}}`, encodeURIComponent(String(culture)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(deleteCompanyContactCommand, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} culture 
         * @param {string} [data] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCultureCompanyContactsPost: async (culture: string, data?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'culture' is not null or undefined
            assertParamExists('apiCultureCompanyContactsPost', 'culture', culture)
            const localVarPath = `/api/{culture}/Company/contacts`
                .replace(`{${"culture"}}`, encodeURIComponent(String(culture)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


            if (data !== undefined) { 
                localVarFormParams.append('data', data as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} culture 
         * @param {string} [data] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCultureCompanyContactsPut: async (culture: string, data?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'culture' is not null or undefined
            assertParamExists('apiCultureCompanyContactsPut', 'culture', culture)
            const localVarPath = `/api/{culture}/Company/contacts`
                .replace(`{${"culture"}}`, encodeURIComponent(String(culture)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


            if (data !== undefined) { 
                localVarFormParams.append('data', data as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} culture 
         * @param {DeleteCompanyCommand} [deleteCompanyCommand] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCultureCompanyDelete: async (culture: string, deleteCompanyCommand?: DeleteCompanyCommand, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'culture' is not null or undefined
            assertParamExists('apiCultureCompanyDelete', 'culture', culture)
            const localVarPath = `/api/{culture}/Company`
                .replace(`{${"culture"}}`, encodeURIComponent(String(culture)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(deleteCompanyCommand, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} culture 
         * @param {DeleteCompanyFacilityPhotoCommand} [deleteCompanyFacilityPhotoCommand] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCultureCompanyFacilityPhotosDelete: async (culture: string, deleteCompanyFacilityPhotoCommand?: DeleteCompanyFacilityPhotoCommand, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'culture' is not null or undefined
            assertParamExists('apiCultureCompanyFacilityPhotosDelete', 'culture', culture)
            const localVarPath = `/api/{culture}/Company/facilityPhotos`
                .replace(`{${"culture"}}`, encodeURIComponent(String(culture)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(deleteCompanyFacilityPhotoCommand, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} culture 
         * @param {string} [data] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCultureCompanyFacilityPhotosPost: async (culture: string, data?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'culture' is not null or undefined
            assertParamExists('apiCultureCompanyFacilityPhotosPost', 'culture', culture)
            const localVarPath = `/api/{culture}/Company/facilityPhotos`
                .replace(`{${"culture"}}`, encodeURIComponent(String(culture)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


            if (data !== undefined) { 
                localVarFormParams.append('data', data as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} culture 
         * @param {string} [data] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCultureCompanyPost: async (culture: string, data?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'culture' is not null or undefined
            assertParamExists('apiCultureCompanyPost', 'culture', culture)
            const localVarPath = `/api/{culture}/Company`
                .replace(`{${"culture"}}`, encodeURIComponent(String(culture)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


            if (data !== undefined) { 
                localVarFormParams.append('data', data as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} culture 
         * @param {DeleteCompanyProductCommand} [deleteCompanyProductCommand] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCultureCompanyProductsDelete: async (culture: string, deleteCompanyProductCommand?: DeleteCompanyProductCommand, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'culture' is not null or undefined
            assertParamExists('apiCultureCompanyProductsDelete', 'culture', culture)
            const localVarPath = `/api/{culture}/Company/products`
                .replace(`{${"culture"}}`, encodeURIComponent(String(culture)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(deleteCompanyProductCommand, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} culture 
         * @param {CreateCompanyProductCommand} [createCompanyProductCommand] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCultureCompanyProductsPost: async (culture: string, createCompanyProductCommand?: CreateCompanyProductCommand, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'culture' is not null or undefined
            assertParamExists('apiCultureCompanyProductsPost', 'culture', culture)
            const localVarPath = `/api/{culture}/Company/products`
                .replace(`{${"culture"}}`, encodeURIComponent(String(culture)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createCompanyProductCommand, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} culture 
         * @param {UpdateCompanyProductCommand} [updateCompanyProductCommand] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCultureCompanyProductsPut: async (culture: string, updateCompanyProductCommand?: UpdateCompanyProductCommand, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'culture' is not null or undefined
            assertParamExists('apiCultureCompanyProductsPut', 'culture', culture)
            const localVarPath = `/api/{culture}/Company/products`
                .replace(`{${"culture"}}`, encodeURIComponent(String(culture)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateCompanyProductCommand, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} culture 
         * @param {string} [data] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCultureCompanyPut: async (culture: string, data?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'culture' is not null or undefined
            assertParamExists('apiCultureCompanyPut', 'culture', culture)
            const localVarPath = `/api/{culture}/Company`
                .replace(`{${"culture"}}`, encodeURIComponent(String(culture)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


            if (data !== undefined) { 
                localVarFormParams.append('data', data as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CompanyApi - functional programming interface
 * @export
 */
export const CompanyApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CompanyApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {string} culture 
         * @param {DeleteCompanyCertificateCommand} [deleteCompanyCertificateCommand] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiCultureCompanyCertificatesDelete(culture: string, deleteCompanyCertificateCommand?: DeleteCompanyCertificateCommand, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Company>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiCultureCompanyCertificatesDelete(culture, deleteCompanyCertificateCommand, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} culture 
         * @param {string} [data] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiCultureCompanyCertificatesPost(culture: string, data?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Company>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiCultureCompanyCertificatesPost(culture, data, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} companyUid 
         * @param {string} culture 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiCultureCompanyCompanyUidCertificatesGet(companyUid: string, culture: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiCultureCompanyCompanyUidCertificatesGet(companyUid, culture, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} companyUid 
         * @param {string} culture 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiCultureCompanyCompanyUidContactsGet(companyUid: string, culture: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiCultureCompanyCompanyUidContactsGet(companyUid, culture, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} companyUid 
         * @param {string} culture 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiCultureCompanyCompanyUidFacilityPhotosGet(companyUid: string, culture: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiCultureCompanyCompanyUidFacilityPhotosGet(companyUid, culture, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} companyUid 
         * @param {string} culture 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiCultureCompanyCompanyUidGet(companyUid: string, culture: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiCultureCompanyCompanyUidGet(companyUid, culture, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} companyUid 
         * @param {string} culture 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiCultureCompanyCompanyUidProductsGet(companyUid: string, culture: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiCultureCompanyCompanyUidProductsGet(companyUid, culture, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} companyuid 
         * @param {string} culture 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiCultureCompanyCompanyuidCustomersGet(companyuid: string, culture: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Company>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiCultureCompanyCompanyuidCustomersGet(companyuid, culture, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} companyuid 
         * @param {string} culture 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiCultureCompanyCompanyuidSuppliersGet(companyuid: string, culture: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Company>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiCultureCompanyCompanyuidSuppliersGet(companyuid, culture, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} companyuid 
         * @param {string} culture 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiCultureCompanyCompanyuidTemplatesGet(companyuid: string, culture: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Template>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiCultureCompanyCompanyuidTemplatesGet(companyuid, culture, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} culture 
         * @param {DeleteCompanyContactCommand} [deleteCompanyContactCommand] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiCultureCompanyContactsDelete(culture: string, deleteCompanyContactCommand?: DeleteCompanyContactCommand, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Company>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiCultureCompanyContactsDelete(culture, deleteCompanyContactCommand, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} culture 
         * @param {string} [data] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiCultureCompanyContactsPost(culture: string, data?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Company>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiCultureCompanyContactsPost(culture, data, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} culture 
         * @param {string} [data] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiCultureCompanyContactsPut(culture: string, data?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Company>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiCultureCompanyContactsPut(culture, data, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} culture 
         * @param {DeleteCompanyCommand} [deleteCompanyCommand] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiCultureCompanyDelete(culture: string, deleteCompanyCommand?: DeleteCompanyCommand, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Company>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiCultureCompanyDelete(culture, deleteCompanyCommand, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} culture 
         * @param {DeleteCompanyFacilityPhotoCommand} [deleteCompanyFacilityPhotoCommand] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiCultureCompanyFacilityPhotosDelete(culture: string, deleteCompanyFacilityPhotoCommand?: DeleteCompanyFacilityPhotoCommand, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Company>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiCultureCompanyFacilityPhotosDelete(culture, deleteCompanyFacilityPhotoCommand, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} culture 
         * @param {string} [data] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiCultureCompanyFacilityPhotosPost(culture: string, data?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Company>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiCultureCompanyFacilityPhotosPost(culture, data, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} culture 
         * @param {string} [data] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiCultureCompanyPost(culture: string, data?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Company>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiCultureCompanyPost(culture, data, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} culture 
         * @param {DeleteCompanyProductCommand} [deleteCompanyProductCommand] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiCultureCompanyProductsDelete(culture: string, deleteCompanyProductCommand?: DeleteCompanyProductCommand, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Company>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiCultureCompanyProductsDelete(culture, deleteCompanyProductCommand, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} culture 
         * @param {CreateCompanyProductCommand} [createCompanyProductCommand] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiCultureCompanyProductsPost(culture: string, createCompanyProductCommand?: CreateCompanyProductCommand, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Company>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiCultureCompanyProductsPost(culture, createCompanyProductCommand, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} culture 
         * @param {UpdateCompanyProductCommand} [updateCompanyProductCommand] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiCultureCompanyProductsPut(culture: string, updateCompanyProductCommand?: UpdateCompanyProductCommand, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Company>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiCultureCompanyProductsPut(culture, updateCompanyProductCommand, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} culture 
         * @param {string} [data] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiCultureCompanyPut(culture: string, data?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Company>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiCultureCompanyPut(culture, data, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * CompanyApi - factory interface
 * @export
 */
export const CompanyApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CompanyApiFp(configuration)
    return {
        /**
         * 
         * @param {string} culture 
         * @param {DeleteCompanyCertificateCommand} [deleteCompanyCertificateCommand] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCultureCompanyCertificatesDelete(culture: string, deleteCompanyCertificateCommand?: DeleteCompanyCertificateCommand, options?: any): AxiosPromise<Array<Company>> {
            return localVarFp.apiCultureCompanyCertificatesDelete(culture, deleteCompanyCertificateCommand, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} culture 
         * @param {string} [data] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCultureCompanyCertificatesPost(culture: string, data?: string, options?: any): AxiosPromise<Array<Company>> {
            return localVarFp.apiCultureCompanyCertificatesPost(culture, data, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} companyUid 
         * @param {string} culture 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCultureCompanyCompanyUidCertificatesGet(companyUid: string, culture: string, options?: any): AxiosPromise<void> {
            return localVarFp.apiCultureCompanyCompanyUidCertificatesGet(companyUid, culture, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} companyUid 
         * @param {string} culture 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCultureCompanyCompanyUidContactsGet(companyUid: string, culture: string, options?: any): AxiosPromise<void> {
            return localVarFp.apiCultureCompanyCompanyUidContactsGet(companyUid, culture, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} companyUid 
         * @param {string} culture 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCultureCompanyCompanyUidFacilityPhotosGet(companyUid: string, culture: string, options?: any): AxiosPromise<void> {
            return localVarFp.apiCultureCompanyCompanyUidFacilityPhotosGet(companyUid, culture, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} companyUid 
         * @param {string} culture 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCultureCompanyCompanyUidGet(companyUid: string, culture: string, options?: any): AxiosPromise<void> {
            return localVarFp.apiCultureCompanyCompanyUidGet(companyUid, culture, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} companyUid 
         * @param {string} culture 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCultureCompanyCompanyUidProductsGet(companyUid: string, culture: string, options?: any): AxiosPromise<void> {
            return localVarFp.apiCultureCompanyCompanyUidProductsGet(companyUid, culture, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} companyuid 
         * @param {string} culture 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCultureCompanyCompanyuidCustomersGet(companyuid: string, culture: string, options?: any): AxiosPromise<Array<Company>> {
            return localVarFp.apiCultureCompanyCompanyuidCustomersGet(companyuid, culture, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} companyuid 
         * @param {string} culture 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCultureCompanyCompanyuidSuppliersGet(companyuid: string, culture: string, options?: any): AxiosPromise<Array<Company>> {
            return localVarFp.apiCultureCompanyCompanyuidSuppliersGet(companyuid, culture, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} companyuid 
         * @param {string} culture 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCultureCompanyCompanyuidTemplatesGet(companyuid: string, culture: string, options?: any): AxiosPromise<Array<Template>> {
            return localVarFp.apiCultureCompanyCompanyuidTemplatesGet(companyuid, culture, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} culture 
         * @param {DeleteCompanyContactCommand} [deleteCompanyContactCommand] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCultureCompanyContactsDelete(culture: string, deleteCompanyContactCommand?: DeleteCompanyContactCommand, options?: any): AxiosPromise<Array<Company>> {
            return localVarFp.apiCultureCompanyContactsDelete(culture, deleteCompanyContactCommand, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} culture 
         * @param {string} [data] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCultureCompanyContactsPost(culture: string, data?: string, options?: any): AxiosPromise<Array<Company>> {
            return localVarFp.apiCultureCompanyContactsPost(culture, data, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} culture 
         * @param {string} [data] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCultureCompanyContactsPut(culture: string, data?: string, options?: any): AxiosPromise<Array<Company>> {
            return localVarFp.apiCultureCompanyContactsPut(culture, data, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} culture 
         * @param {DeleteCompanyCommand} [deleteCompanyCommand] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCultureCompanyDelete(culture: string, deleteCompanyCommand?: DeleteCompanyCommand, options?: any): AxiosPromise<Array<Company>> {
            return localVarFp.apiCultureCompanyDelete(culture, deleteCompanyCommand, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} culture 
         * @param {DeleteCompanyFacilityPhotoCommand} [deleteCompanyFacilityPhotoCommand] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCultureCompanyFacilityPhotosDelete(culture: string, deleteCompanyFacilityPhotoCommand?: DeleteCompanyFacilityPhotoCommand, options?: any): AxiosPromise<Array<Company>> {
            return localVarFp.apiCultureCompanyFacilityPhotosDelete(culture, deleteCompanyFacilityPhotoCommand, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} culture 
         * @param {string} [data] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCultureCompanyFacilityPhotosPost(culture: string, data?: string, options?: any): AxiosPromise<Array<Company>> {
            return localVarFp.apiCultureCompanyFacilityPhotosPost(culture, data, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} culture 
         * @param {string} [data] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCultureCompanyPost(culture: string, data?: string, options?: any): AxiosPromise<Array<Company>> {
            return localVarFp.apiCultureCompanyPost(culture, data, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} culture 
         * @param {DeleteCompanyProductCommand} [deleteCompanyProductCommand] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCultureCompanyProductsDelete(culture: string, deleteCompanyProductCommand?: DeleteCompanyProductCommand, options?: any): AxiosPromise<Array<Company>> {
            return localVarFp.apiCultureCompanyProductsDelete(culture, deleteCompanyProductCommand, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} culture 
         * @param {CreateCompanyProductCommand} [createCompanyProductCommand] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCultureCompanyProductsPost(culture: string, createCompanyProductCommand?: CreateCompanyProductCommand, options?: any): AxiosPromise<Array<Company>> {
            return localVarFp.apiCultureCompanyProductsPost(culture, createCompanyProductCommand, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} culture 
         * @param {UpdateCompanyProductCommand} [updateCompanyProductCommand] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCultureCompanyProductsPut(culture: string, updateCompanyProductCommand?: UpdateCompanyProductCommand, options?: any): AxiosPromise<Array<Company>> {
            return localVarFp.apiCultureCompanyProductsPut(culture, updateCompanyProductCommand, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} culture 
         * @param {string} [data] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCultureCompanyPut(culture: string, data?: string, options?: any): AxiosPromise<Array<Company>> {
            return localVarFp.apiCultureCompanyPut(culture, data, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * CompanyApi - interface
 * @export
 * @interface CompanyApi
 */
export interface CompanyApiInterface {
    /**
     * 
     * @param {string} culture 
     * @param {DeleteCompanyCertificateCommand} [deleteCompanyCertificateCommand] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CompanyApiInterface
     */
    apiCultureCompanyCertificatesDelete(culture: string, deleteCompanyCertificateCommand?: DeleteCompanyCertificateCommand, options?: any): AxiosPromise<Array<Company>>;

    /**
     * 
     * @param {string} culture 
     * @param {string} [data] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CompanyApiInterface
     */
    apiCultureCompanyCertificatesPost(culture: string, data?: string, options?: any): AxiosPromise<Array<Company>>;

    /**
     * 
     * @param {string} companyUid 
     * @param {string} culture 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CompanyApiInterface
     */
    apiCultureCompanyCompanyUidCertificatesGet(companyUid: string, culture: string, options?: any): AxiosPromise<void>;

    /**
     * 
     * @param {string} companyUid 
     * @param {string} culture 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CompanyApiInterface
     */
    apiCultureCompanyCompanyUidContactsGet(companyUid: string, culture: string, options?: any): AxiosPromise<void>;

    /**
     * 
     * @param {string} companyUid 
     * @param {string} culture 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CompanyApiInterface
     */
    apiCultureCompanyCompanyUidFacilityPhotosGet(companyUid: string, culture: string, options?: any): AxiosPromise<void>;

    /**
     * 
     * @param {string} companyUid 
     * @param {string} culture 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CompanyApiInterface
     */
    apiCultureCompanyCompanyUidGet(companyUid: string, culture: string, options?: any): AxiosPromise<void>;

    /**
     * 
     * @param {string} companyUid 
     * @param {string} culture 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CompanyApiInterface
     */
    apiCultureCompanyCompanyUidProductsGet(companyUid: string, culture: string, options?: any): AxiosPromise<void>;

    /**
     * 
     * @param {string} companyuid 
     * @param {string} culture 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CompanyApiInterface
     */
    apiCultureCompanyCompanyuidCustomersGet(companyuid: string, culture: string, options?: any): AxiosPromise<Array<Company>>;

    /**
     * 
     * @param {string} companyuid 
     * @param {string} culture 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CompanyApiInterface
     */
    apiCultureCompanyCompanyuidSuppliersGet(companyuid: string, culture: string, options?: any): AxiosPromise<Array<Company>>;

    /**
     * 
     * @param {string} companyuid 
     * @param {string} culture 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CompanyApiInterface
     */
    apiCultureCompanyCompanyuidTemplatesGet(companyuid: string, culture: string, options?: any): AxiosPromise<Array<Template>>;

    /**
     * 
     * @param {string} culture 
     * @param {DeleteCompanyContactCommand} [deleteCompanyContactCommand] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CompanyApiInterface
     */
    apiCultureCompanyContactsDelete(culture: string, deleteCompanyContactCommand?: DeleteCompanyContactCommand, options?: any): AxiosPromise<Array<Company>>;

    /**
     * 
     * @param {string} culture 
     * @param {string} [data] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CompanyApiInterface
     */
    apiCultureCompanyContactsPost(culture: string, data?: string, options?: any): AxiosPromise<Array<Company>>;

    /**
     * 
     * @param {string} culture 
     * @param {string} [data] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CompanyApiInterface
     */
    apiCultureCompanyContactsPut(culture: string, data?: string, options?: any): AxiosPromise<Array<Company>>;

    /**
     * 
     * @param {string} culture 
     * @param {DeleteCompanyCommand} [deleteCompanyCommand] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CompanyApiInterface
     */
    apiCultureCompanyDelete(culture: string, deleteCompanyCommand?: DeleteCompanyCommand, options?: any): AxiosPromise<Array<Company>>;

    /**
     * 
     * @param {string} culture 
     * @param {DeleteCompanyFacilityPhotoCommand} [deleteCompanyFacilityPhotoCommand] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CompanyApiInterface
     */
    apiCultureCompanyFacilityPhotosDelete(culture: string, deleteCompanyFacilityPhotoCommand?: DeleteCompanyFacilityPhotoCommand, options?: any): AxiosPromise<Array<Company>>;

    /**
     * 
     * @param {string} culture 
     * @param {string} [data] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CompanyApiInterface
     */
    apiCultureCompanyFacilityPhotosPost(culture: string, data?: string, options?: any): AxiosPromise<Array<Company>>;

    /**
     * 
     * @param {string} culture 
     * @param {string} [data] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CompanyApiInterface
     */
    apiCultureCompanyPost(culture: string, data?: string, options?: any): AxiosPromise<Array<Company>>;

    /**
     * 
     * @param {string} culture 
     * @param {DeleteCompanyProductCommand} [deleteCompanyProductCommand] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CompanyApiInterface
     */
    apiCultureCompanyProductsDelete(culture: string, deleteCompanyProductCommand?: DeleteCompanyProductCommand, options?: any): AxiosPromise<Array<Company>>;

    /**
     * 
     * @param {string} culture 
     * @param {CreateCompanyProductCommand} [createCompanyProductCommand] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CompanyApiInterface
     */
    apiCultureCompanyProductsPost(culture: string, createCompanyProductCommand?: CreateCompanyProductCommand, options?: any): AxiosPromise<Array<Company>>;

    /**
     * 
     * @param {string} culture 
     * @param {UpdateCompanyProductCommand} [updateCompanyProductCommand] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CompanyApiInterface
     */
    apiCultureCompanyProductsPut(culture: string, updateCompanyProductCommand?: UpdateCompanyProductCommand, options?: any): AxiosPromise<Array<Company>>;

    /**
     * 
     * @param {string} culture 
     * @param {string} [data] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CompanyApiInterface
     */
    apiCultureCompanyPut(culture: string, data?: string, options?: any): AxiosPromise<Array<Company>>;

}

/**
 * CompanyApi - object-oriented interface
 * @export
 * @class CompanyApi
 * @extends {BaseAPI}
 */
export class CompanyApi extends BaseAPI implements CompanyApiInterface {
    /**
     * 
     * @param {string} culture 
     * @param {DeleteCompanyCertificateCommand} [deleteCompanyCertificateCommand] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CompanyApi
     */
    public apiCultureCompanyCertificatesDelete(culture: string, deleteCompanyCertificateCommand?: DeleteCompanyCertificateCommand, options?: any) {
        return CompanyApiFp(this.configuration).apiCultureCompanyCertificatesDelete(culture, deleteCompanyCertificateCommand, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} culture 
     * @param {string} [data] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CompanyApi
     */
    public apiCultureCompanyCertificatesPost(culture: string, data?: string, options?: any) {
        return CompanyApiFp(this.configuration).apiCultureCompanyCertificatesPost(culture, data, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} companyUid 
     * @param {string} culture 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CompanyApi
     */
    public apiCultureCompanyCompanyUidCertificatesGet(companyUid: string, culture: string, options?: any) {
        return CompanyApiFp(this.configuration).apiCultureCompanyCompanyUidCertificatesGet(companyUid, culture, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} companyUid 
     * @param {string} culture 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CompanyApi
     */
    public apiCultureCompanyCompanyUidContactsGet(companyUid: string, culture: string, options?: any) {
        return CompanyApiFp(this.configuration).apiCultureCompanyCompanyUidContactsGet(companyUid, culture, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} companyUid 
     * @param {string} culture 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CompanyApi
     */
    public apiCultureCompanyCompanyUidFacilityPhotosGet(companyUid: string, culture: string, options?: any) {
        return CompanyApiFp(this.configuration).apiCultureCompanyCompanyUidFacilityPhotosGet(companyUid, culture, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} companyUid 
     * @param {string} culture 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CompanyApi
     */
    public apiCultureCompanyCompanyUidGet(companyUid: string, culture: string, options?: any) {
        return CompanyApiFp(this.configuration).apiCultureCompanyCompanyUidGet(companyUid, culture, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} companyUid 
     * @param {string} culture 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CompanyApi
     */
    public apiCultureCompanyCompanyUidProductsGet(companyUid: string, culture: string, options?: any) {
        return CompanyApiFp(this.configuration).apiCultureCompanyCompanyUidProductsGet(companyUid, culture, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} companyuid 
     * @param {string} culture 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CompanyApi
     */
    public apiCultureCompanyCompanyuidCustomersGet(companyuid: string, culture: string, options?: any) {
        return CompanyApiFp(this.configuration).apiCultureCompanyCompanyuidCustomersGet(companyuid, culture, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} companyuid 
     * @param {string} culture 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CompanyApi
     */
    public apiCultureCompanyCompanyuidSuppliersGet(companyuid: string, culture: string, options?: any) {
        return CompanyApiFp(this.configuration).apiCultureCompanyCompanyuidSuppliersGet(companyuid, culture, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} companyuid 
     * @param {string} culture 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CompanyApi
     */
    public apiCultureCompanyCompanyuidTemplatesGet(companyuid: string, culture: string, options?: any) {
        return CompanyApiFp(this.configuration).apiCultureCompanyCompanyuidTemplatesGet(companyuid, culture, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} culture 
     * @param {DeleteCompanyContactCommand} [deleteCompanyContactCommand] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CompanyApi
     */
    public apiCultureCompanyContactsDelete(culture: string, deleteCompanyContactCommand?: DeleteCompanyContactCommand, options?: any) {
        return CompanyApiFp(this.configuration).apiCultureCompanyContactsDelete(culture, deleteCompanyContactCommand, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} culture 
     * @param {string} [data] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CompanyApi
     */
    public apiCultureCompanyContactsPost(culture: string, data?: string, options?: any) {
        return CompanyApiFp(this.configuration).apiCultureCompanyContactsPost(culture, data, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} culture 
     * @param {string} [data] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CompanyApi
     */
    public apiCultureCompanyContactsPut(culture: string, data?: string, options?: any) {
        return CompanyApiFp(this.configuration).apiCultureCompanyContactsPut(culture, data, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} culture 
     * @param {DeleteCompanyCommand} [deleteCompanyCommand] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CompanyApi
     */
    public apiCultureCompanyDelete(culture: string, deleteCompanyCommand?: DeleteCompanyCommand, options?: any) {
        return CompanyApiFp(this.configuration).apiCultureCompanyDelete(culture, deleteCompanyCommand, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} culture 
     * @param {DeleteCompanyFacilityPhotoCommand} [deleteCompanyFacilityPhotoCommand] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CompanyApi
     */
    public apiCultureCompanyFacilityPhotosDelete(culture: string, deleteCompanyFacilityPhotoCommand?: DeleteCompanyFacilityPhotoCommand, options?: any) {
        return CompanyApiFp(this.configuration).apiCultureCompanyFacilityPhotosDelete(culture, deleteCompanyFacilityPhotoCommand, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} culture 
     * @param {string} [data] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CompanyApi
     */
    public apiCultureCompanyFacilityPhotosPost(culture: string, data?: string, options?: any) {
        return CompanyApiFp(this.configuration).apiCultureCompanyFacilityPhotosPost(culture, data, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} culture 
     * @param {string} [data] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CompanyApi
     */
    public apiCultureCompanyPost(culture: string, data?: string, options?: any) {
        return CompanyApiFp(this.configuration).apiCultureCompanyPost(culture, data, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} culture 
     * @param {DeleteCompanyProductCommand} [deleteCompanyProductCommand] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CompanyApi
     */
    public apiCultureCompanyProductsDelete(culture: string, deleteCompanyProductCommand?: DeleteCompanyProductCommand, options?: any) {
        return CompanyApiFp(this.configuration).apiCultureCompanyProductsDelete(culture, deleteCompanyProductCommand, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} culture 
     * @param {CreateCompanyProductCommand} [createCompanyProductCommand] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CompanyApi
     */
    public apiCultureCompanyProductsPost(culture: string, createCompanyProductCommand?: CreateCompanyProductCommand, options?: any) {
        return CompanyApiFp(this.configuration).apiCultureCompanyProductsPost(culture, createCompanyProductCommand, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} culture 
     * @param {UpdateCompanyProductCommand} [updateCompanyProductCommand] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CompanyApi
     */
    public apiCultureCompanyProductsPut(culture: string, updateCompanyProductCommand?: UpdateCompanyProductCommand, options?: any) {
        return CompanyApiFp(this.configuration).apiCultureCompanyProductsPut(culture, updateCompanyProductCommand, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} culture 
     * @param {string} [data] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CompanyApi
     */
    public apiCultureCompanyPut(culture: string, data?: string, options?: any) {
        return CompanyApiFp(this.configuration).apiCultureCompanyPut(culture, data, options).then((request) => request(this.axios, this.basePath));
    }
}
