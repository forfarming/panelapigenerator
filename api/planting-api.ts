/* tslint:disable */
/* eslint-disable */
/**
 * Api
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { ProblemDetails } from '../model';
/**
 * PlantingApi - axios parameter creator
 * @export
 */
export const PlantingApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} companyuid 
         * @param {string} culture 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCulturePlantingCompanyuidGet: async (companyuid: string, culture: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyuid' is not null or undefined
            assertParamExists('apiCulturePlantingCompanyuidGet', 'companyuid', companyuid)
            // verify required parameter 'culture' is not null or undefined
            assertParamExists('apiCulturePlantingCompanyuidGet', 'culture', culture)
            const localVarPath = `/api/{culture}/Planting/{companyuid}`
                .replace(`{${"companyuid"}}`, encodeURIComponent(String(companyuid)))
                .replace(`{${"culture"}}`, encodeURIComponent(String(culture)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} companyuid 
         * @param {string} plantinguid 
         * @param {string} culture 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCulturePlantingCompanyuidPlantinguidBatchesGet: async (companyuid: string, plantinguid: string, culture: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyuid' is not null or undefined
            assertParamExists('apiCulturePlantingCompanyuidPlantinguidBatchesGet', 'companyuid', companyuid)
            // verify required parameter 'plantinguid' is not null or undefined
            assertParamExists('apiCulturePlantingCompanyuidPlantinguidBatchesGet', 'plantinguid', plantinguid)
            // verify required parameter 'culture' is not null or undefined
            assertParamExists('apiCulturePlantingCompanyuidPlantinguidBatchesGet', 'culture', culture)
            const localVarPath = `/api/{culture}/Planting/{companyuid}/{plantinguid}/batches`
                .replace(`{${"companyuid"}}`, encodeURIComponent(String(companyuid)))
                .replace(`{${"plantinguid"}}`, encodeURIComponent(String(plantinguid)))
                .replace(`{${"culture"}}`, encodeURIComponent(String(culture)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PlantingApi - functional programming interface
 * @export
 */
export const PlantingApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = PlantingApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {string} companyuid 
         * @param {string} culture 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiCulturePlantingCompanyuidGet(companyuid: string, culture: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiCulturePlantingCompanyuidGet(companyuid, culture, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} companyuid 
         * @param {string} plantinguid 
         * @param {string} culture 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiCulturePlantingCompanyuidPlantinguidBatchesGet(companyuid: string, plantinguid: string, culture: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiCulturePlantingCompanyuidPlantinguidBatchesGet(companyuid, plantinguid, culture, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * PlantingApi - factory interface
 * @export
 */
export const PlantingApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = PlantingApiFp(configuration)
    return {
        /**
         * 
         * @param {string} companyuid 
         * @param {string} culture 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCulturePlantingCompanyuidGet(companyuid: string, culture: string, options?: any): AxiosPromise<void> {
            return localVarFp.apiCulturePlantingCompanyuidGet(companyuid, culture, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} companyuid 
         * @param {string} plantinguid 
         * @param {string} culture 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCulturePlantingCompanyuidPlantinguidBatchesGet(companyuid: string, plantinguid: string, culture: string, options?: any): AxiosPromise<void> {
            return localVarFp.apiCulturePlantingCompanyuidPlantinguidBatchesGet(companyuid, plantinguid, culture, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * PlantingApi - object-oriented interface
 * @export
 * @class PlantingApi
 * @extends {BaseAPI}
 */
export class PlantingApi extends BaseAPI {
    /**
     * 
     * @param {string} companyuid 
     * @param {string} culture 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlantingApi
     */
    public apiCulturePlantingCompanyuidGet(companyuid: string, culture: string, options?: any) {
        return PlantingApiFp(this.configuration).apiCulturePlantingCompanyuidGet(companyuid, culture, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} companyuid 
     * @param {string} plantinguid 
     * @param {string} culture 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlantingApi
     */
    public apiCulturePlantingCompanyuidPlantinguidBatchesGet(companyuid: string, plantinguid: string, culture: string, options?: any) {
        return PlantingApiFp(this.configuration).apiCulturePlantingCompanyuidPlantinguidBatchesGet(companyuid, plantinguid, culture, options).then((request) => request(this.axios, this.basePath));
    }
}
