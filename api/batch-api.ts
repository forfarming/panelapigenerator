/* tslint:disable */
/* eslint-disable */
/**
 * Api
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { BatchModel } from '../model';
// @ts-ignore
import { CreateBatchCommand } from '../model';
// @ts-ignore
import { DeleteBatchCommand } from '../model';
// @ts-ignore
import { ProblemDetails } from '../model';
// @ts-ignore
import { UpdateBatchCommand } from '../model';
/**
 * BatchApi - axios parameter creator
 * @export
 */
export const BatchApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} companyUid 
         * @param {string} batchUid 
         * @param {string} culture 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCultureBatchCompanyUidBatchUidGet: async (companyUid: string, batchUid: string, culture: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyUid' is not null or undefined
            assertParamExists('apiCultureBatchCompanyUidBatchUidGet', 'companyUid', companyUid)
            // verify required parameter 'batchUid' is not null or undefined
            assertParamExists('apiCultureBatchCompanyUidBatchUidGet', 'batchUid', batchUid)
            // verify required parameter 'culture' is not null or undefined
            assertParamExists('apiCultureBatchCompanyUidBatchUidGet', 'culture', culture)
            const localVarPath = `/api/{culture}/Batch/{companyUid}/{batchUid}`
                .replace(`{${"companyUid"}}`, encodeURIComponent(String(companyUid)))
                .replace(`{${"batchUid"}}`, encodeURIComponent(String(batchUid)))
                .replace(`{${"culture"}}`, encodeURIComponent(String(culture)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} companyUid 
         * @param {string} culture 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCultureBatchCompanyUidDistributedGet: async (companyUid: string, culture: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyUid' is not null or undefined
            assertParamExists('apiCultureBatchCompanyUidDistributedGet', 'companyUid', companyUid)
            // verify required parameter 'culture' is not null or undefined
            assertParamExists('apiCultureBatchCompanyUidDistributedGet', 'culture', culture)
            const localVarPath = `/api/{culture}/Batch/{companyUid}/distributed`
                .replace(`{${"companyUid"}}`, encodeURIComponent(String(companyUid)))
                .replace(`{${"culture"}}`, encodeURIComponent(String(culture)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} companyUid 
         * @param {string} culture 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCultureBatchCompanyUidHarvestedGet: async (companyUid: string, culture: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyUid' is not null or undefined
            assertParamExists('apiCultureBatchCompanyUidHarvestedGet', 'companyUid', companyUid)
            // verify required parameter 'culture' is not null or undefined
            assertParamExists('apiCultureBatchCompanyUidHarvestedGet', 'culture', culture)
            const localVarPath = `/api/{culture}/Batch/{companyUid}/harvested`
                .replace(`{${"companyUid"}}`, encodeURIComponent(String(companyUid)))
                .replace(`{${"culture"}}`, encodeURIComponent(String(culture)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} companyUid 
         * @param {string} culture 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCultureBatchCompanyUidLatestGet: async (companyUid: string, culture: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyUid' is not null or undefined
            assertParamExists('apiCultureBatchCompanyUidLatestGet', 'companyUid', companyUid)
            // verify required parameter 'culture' is not null or undefined
            assertParamExists('apiCultureBatchCompanyUidLatestGet', 'culture', culture)
            const localVarPath = `/api/{culture}/Batch/{companyUid}/latest`
                .replace(`{${"companyUid"}}`, encodeURIComponent(String(companyUid)))
                .replace(`{${"culture"}}`, encodeURIComponent(String(culture)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} companyUid 
         * @param {string} supplierUid 
         * @param {string} culture 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCultureBatchCompanyUidSupplierSupplierUidGet: async (companyUid: string, supplierUid: string, culture: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyUid' is not null or undefined
            assertParamExists('apiCultureBatchCompanyUidSupplierSupplierUidGet', 'companyUid', companyUid)
            // verify required parameter 'supplierUid' is not null or undefined
            assertParamExists('apiCultureBatchCompanyUidSupplierSupplierUidGet', 'supplierUid', supplierUid)
            // verify required parameter 'culture' is not null or undefined
            assertParamExists('apiCultureBatchCompanyUidSupplierSupplierUidGet', 'culture', culture)
            const localVarPath = `/api/{culture}/Batch/{companyUid}/supplier/{supplierUid}`
                .replace(`{${"companyUid"}}`, encodeURIComponent(String(companyUid)))
                .replace(`{${"supplierUid"}}`, encodeURIComponent(String(supplierUid)))
                .replace(`{${"culture"}}`, encodeURIComponent(String(culture)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} culture 
         * @param {DeleteBatchCommand} [deleteBatchCommand] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCultureBatchDelete: async (culture: string, deleteBatchCommand?: DeleteBatchCommand, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'culture' is not null or undefined
            assertParamExists('apiCultureBatchDelete', 'culture', culture)
            const localVarPath = `/api/{culture}/Batch`
                .replace(`{${"culture"}}`, encodeURIComponent(String(culture)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(deleteBatchCommand, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} culture 
         * @param {CreateBatchCommand} [createBatchCommand] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCultureBatchPost: async (culture: string, createBatchCommand?: CreateBatchCommand, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'culture' is not null or undefined
            assertParamExists('apiCultureBatchPost', 'culture', culture)
            const localVarPath = `/api/{culture}/Batch`
                .replace(`{${"culture"}}`, encodeURIComponent(String(culture)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createBatchCommand, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} culture 
         * @param {UpdateBatchCommand} [updateBatchCommand] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCultureBatchPut: async (culture: string, updateBatchCommand?: UpdateBatchCommand, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'culture' is not null or undefined
            assertParamExists('apiCultureBatchPut', 'culture', culture)
            const localVarPath = `/api/{culture}/Batch`
                .replace(`{${"culture"}}`, encodeURIComponent(String(culture)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateBatchCommand, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} uid 
         * @param {string} culture 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCultureBatchUidQrcodeGet: async (uid: string, culture: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'uid' is not null or undefined
            assertParamExists('apiCultureBatchUidQrcodeGet', 'uid', uid)
            // verify required parameter 'culture' is not null or undefined
            assertParamExists('apiCultureBatchUidQrcodeGet', 'culture', culture)
            const localVarPath = `/api/{culture}/Batch/{uid}/qrcode`
                .replace(`{${"uid"}}`, encodeURIComponent(String(uid)))
                .replace(`{${"culture"}}`, encodeURIComponent(String(culture)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * BatchApi - functional programming interface
 * @export
 */
export const BatchApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = BatchApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {string} companyUid 
         * @param {string} batchUid 
         * @param {string} culture 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiCultureBatchCompanyUidBatchUidGet(companyUid: string, batchUid: string, culture: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiCultureBatchCompanyUidBatchUidGet(companyUid, batchUid, culture, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} companyUid 
         * @param {string} culture 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiCultureBatchCompanyUidDistributedGet(companyUid: string, culture: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<BatchModel>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiCultureBatchCompanyUidDistributedGet(companyUid, culture, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} companyUid 
         * @param {string} culture 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiCultureBatchCompanyUidHarvestedGet(companyUid: string, culture: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<BatchModel>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiCultureBatchCompanyUidHarvestedGet(companyUid, culture, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} companyUid 
         * @param {string} culture 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiCultureBatchCompanyUidLatestGet(companyUid: string, culture: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<BatchModel>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiCultureBatchCompanyUidLatestGet(companyUid, culture, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} companyUid 
         * @param {string} supplierUid 
         * @param {string} culture 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiCultureBatchCompanyUidSupplierSupplierUidGet(companyUid: string, supplierUid: string, culture: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<BatchModel>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiCultureBatchCompanyUidSupplierSupplierUidGet(companyUid, supplierUid, culture, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} culture 
         * @param {DeleteBatchCommand} [deleteBatchCommand] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiCultureBatchDelete(culture: string, deleteBatchCommand?: DeleteBatchCommand, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeleteBatchCommand>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiCultureBatchDelete(culture, deleteBatchCommand, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} culture 
         * @param {CreateBatchCommand} [createBatchCommand] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiCultureBatchPost(culture: string, createBatchCommand?: CreateBatchCommand, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateBatchCommand>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiCultureBatchPost(culture, createBatchCommand, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} culture 
         * @param {UpdateBatchCommand} [updateBatchCommand] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiCultureBatchPut(culture: string, updateBatchCommand?: UpdateBatchCommand, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UpdateBatchCommand>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiCultureBatchPut(culture, updateBatchCommand, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} uid 
         * @param {string} culture 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiCultureBatchUidQrcodeGet(uid: string, culture: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiCultureBatchUidQrcodeGet(uid, culture, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * BatchApi - factory interface
 * @export
 */
export const BatchApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = BatchApiFp(configuration)
    return {
        /**
         * 
         * @param {string} companyUid 
         * @param {string} batchUid 
         * @param {string} culture 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCultureBatchCompanyUidBatchUidGet(companyUid: string, batchUid: string, culture: string, options?: any): AxiosPromise<void> {
            return localVarFp.apiCultureBatchCompanyUidBatchUidGet(companyUid, batchUid, culture, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} companyUid 
         * @param {string} culture 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCultureBatchCompanyUidDistributedGet(companyUid: string, culture: string, options?: any): AxiosPromise<Array<BatchModel>> {
            return localVarFp.apiCultureBatchCompanyUidDistributedGet(companyUid, culture, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} companyUid 
         * @param {string} culture 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCultureBatchCompanyUidHarvestedGet(companyUid: string, culture: string, options?: any): AxiosPromise<Array<BatchModel>> {
            return localVarFp.apiCultureBatchCompanyUidHarvestedGet(companyUid, culture, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} companyUid 
         * @param {string} culture 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCultureBatchCompanyUidLatestGet(companyUid: string, culture: string, options?: any): AxiosPromise<Array<BatchModel>> {
            return localVarFp.apiCultureBatchCompanyUidLatestGet(companyUid, culture, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} companyUid 
         * @param {string} supplierUid 
         * @param {string} culture 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCultureBatchCompanyUidSupplierSupplierUidGet(companyUid: string, supplierUid: string, culture: string, options?: any): AxiosPromise<Array<BatchModel>> {
            return localVarFp.apiCultureBatchCompanyUidSupplierSupplierUidGet(companyUid, supplierUid, culture, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} culture 
         * @param {DeleteBatchCommand} [deleteBatchCommand] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCultureBatchDelete(culture: string, deleteBatchCommand?: DeleteBatchCommand, options?: any): AxiosPromise<DeleteBatchCommand> {
            return localVarFp.apiCultureBatchDelete(culture, deleteBatchCommand, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} culture 
         * @param {CreateBatchCommand} [createBatchCommand] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCultureBatchPost(culture: string, createBatchCommand?: CreateBatchCommand, options?: any): AxiosPromise<CreateBatchCommand> {
            return localVarFp.apiCultureBatchPost(culture, createBatchCommand, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} culture 
         * @param {UpdateBatchCommand} [updateBatchCommand] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCultureBatchPut(culture: string, updateBatchCommand?: UpdateBatchCommand, options?: any): AxiosPromise<UpdateBatchCommand> {
            return localVarFp.apiCultureBatchPut(culture, updateBatchCommand, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} uid 
         * @param {string} culture 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCultureBatchUidQrcodeGet(uid: string, culture: string, options?: any): AxiosPromise<void> {
            return localVarFp.apiCultureBatchUidQrcodeGet(uid, culture, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * BatchApi - interface
 * @export
 * @interface BatchApi
 */
export interface BatchApiInterface {
    /**
     * 
     * @param {string} companyUid 
     * @param {string} batchUid 
     * @param {string} culture 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BatchApiInterface
     */
    apiCultureBatchCompanyUidBatchUidGet(companyUid: string, batchUid: string, culture: string, options?: any): AxiosPromise<void>;

    /**
     * 
     * @param {string} companyUid 
     * @param {string} culture 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BatchApiInterface
     */
    apiCultureBatchCompanyUidDistributedGet(companyUid: string, culture: string, options?: any): AxiosPromise<Array<BatchModel>>;

    /**
     * 
     * @param {string} companyUid 
     * @param {string} culture 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BatchApiInterface
     */
    apiCultureBatchCompanyUidHarvestedGet(companyUid: string, culture: string, options?: any): AxiosPromise<Array<BatchModel>>;

    /**
     * 
     * @param {string} companyUid 
     * @param {string} culture 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BatchApiInterface
     */
    apiCultureBatchCompanyUidLatestGet(companyUid: string, culture: string, options?: any): AxiosPromise<Array<BatchModel>>;

    /**
     * 
     * @param {string} companyUid 
     * @param {string} supplierUid 
     * @param {string} culture 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BatchApiInterface
     */
    apiCultureBatchCompanyUidSupplierSupplierUidGet(companyUid: string, supplierUid: string, culture: string, options?: any): AxiosPromise<Array<BatchModel>>;

    /**
     * 
     * @param {string} culture 
     * @param {DeleteBatchCommand} [deleteBatchCommand] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BatchApiInterface
     */
    apiCultureBatchDelete(culture: string, deleteBatchCommand?: DeleteBatchCommand, options?: any): AxiosPromise<DeleteBatchCommand>;

    /**
     * 
     * @param {string} culture 
     * @param {CreateBatchCommand} [createBatchCommand] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BatchApiInterface
     */
    apiCultureBatchPost(culture: string, createBatchCommand?: CreateBatchCommand, options?: any): AxiosPromise<CreateBatchCommand>;

    /**
     * 
     * @param {string} culture 
     * @param {UpdateBatchCommand} [updateBatchCommand] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BatchApiInterface
     */
    apiCultureBatchPut(culture: string, updateBatchCommand?: UpdateBatchCommand, options?: any): AxiosPromise<UpdateBatchCommand>;

    /**
     * 
     * @param {string} uid 
     * @param {string} culture 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BatchApiInterface
     */
    apiCultureBatchUidQrcodeGet(uid: string, culture: string, options?: any): AxiosPromise<void>;

}

/**
 * BatchApi - object-oriented interface
 * @export
 * @class BatchApi
 * @extends {BaseAPI}
 */
export class BatchApi extends BaseAPI implements BatchApiInterface {
    /**
     * 
     * @param {string} companyUid 
     * @param {string} batchUid 
     * @param {string} culture 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BatchApi
     */
    public apiCultureBatchCompanyUidBatchUidGet(companyUid: string, batchUid: string, culture: string, options?: any) {
        return BatchApiFp(this.configuration).apiCultureBatchCompanyUidBatchUidGet(companyUid, batchUid, culture, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} companyUid 
     * @param {string} culture 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BatchApi
     */
    public apiCultureBatchCompanyUidDistributedGet(companyUid: string, culture: string, options?: any) {
        return BatchApiFp(this.configuration).apiCultureBatchCompanyUidDistributedGet(companyUid, culture, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} companyUid 
     * @param {string} culture 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BatchApi
     */
    public apiCultureBatchCompanyUidHarvestedGet(companyUid: string, culture: string, options?: any) {
        return BatchApiFp(this.configuration).apiCultureBatchCompanyUidHarvestedGet(companyUid, culture, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} companyUid 
     * @param {string} culture 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BatchApi
     */
    public apiCultureBatchCompanyUidLatestGet(companyUid: string, culture: string, options?: any) {
        return BatchApiFp(this.configuration).apiCultureBatchCompanyUidLatestGet(companyUid, culture, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} companyUid 
     * @param {string} supplierUid 
     * @param {string} culture 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BatchApi
     */
    public apiCultureBatchCompanyUidSupplierSupplierUidGet(companyUid: string, supplierUid: string, culture: string, options?: any) {
        return BatchApiFp(this.configuration).apiCultureBatchCompanyUidSupplierSupplierUidGet(companyUid, supplierUid, culture, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} culture 
     * @param {DeleteBatchCommand} [deleteBatchCommand] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BatchApi
     */
    public apiCultureBatchDelete(culture: string, deleteBatchCommand?: DeleteBatchCommand, options?: any) {
        return BatchApiFp(this.configuration).apiCultureBatchDelete(culture, deleteBatchCommand, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} culture 
     * @param {CreateBatchCommand} [createBatchCommand] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BatchApi
     */
    public apiCultureBatchPost(culture: string, createBatchCommand?: CreateBatchCommand, options?: any) {
        return BatchApiFp(this.configuration).apiCultureBatchPost(culture, createBatchCommand, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} culture 
     * @param {UpdateBatchCommand} [updateBatchCommand] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BatchApi
     */
    public apiCultureBatchPut(culture: string, updateBatchCommand?: UpdateBatchCommand, options?: any) {
        return BatchApiFp(this.configuration).apiCultureBatchPut(culture, updateBatchCommand, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} uid 
     * @param {string} culture 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BatchApi
     */
    public apiCultureBatchUidQrcodeGet(uid: string, culture: string, options?: any) {
        return BatchApiFp(this.configuration).apiCultureBatchUidQrcodeGet(uid, culture, options).then((request) => request(this.axios, this.basePath));
    }
}
